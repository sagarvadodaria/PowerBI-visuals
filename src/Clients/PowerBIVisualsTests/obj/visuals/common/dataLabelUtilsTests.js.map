{"version":3,"sources":["visuals/common/dataLabelUtilsTests.ts"],"names":["powerbitests","powerbitests.columnChartDataLabelsShowValidation","powerbitests.columnChartDataLabelsShowValidation.createMetadata","powerbitests.VisualBuilder","powerbitests.VisualBuilder.constructor","powerbitests.VisualBuilder.pluginName","powerbitests.VisualBuilder.init","powerbitests.VisualBuilder.setSize","powerbitests.VisualBuilder.createVisual","powerbitests.VisualBuilder.createInitOptions","powerbitests.VisualBuilder.createIdentities","powerbitests.VisualBuilder.createDataView","powerbitests.VisualBuilder.update","powerbitests.VisualBuilder.onDataChanged","powerbitests.MapBuilder","powerbitests.MapBuilder.constructor","powerbitests.MapBuilder.layout","powerbitests.MapBuilder.graphicsContext","powerbitests.MapBuilder.build","powerbitests.MapBubbleBuilder","powerbitests.MapBubbleBuilder.constructor","powerbitests.MapBubbleBuilder.buildMapBubble","powerbitests.MapBubbleBuilder.getResult","powerbitests.MapSliceBuilder","powerbitests.MapSliceBuilder.constructor","powerbitests.MapSliceBuilder.buildMapSlice","powerbitests.MapSliceBuilder.getResult"],"mappings":"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","file":"visuals/common/dataLabelUtilsTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import DataLabelUtils = powerbi.visuals.dataLabelUtils;\r\n    import ObjectEnumerationBuilder = powerbi.visuals.ObjectEnumerationBuilder;\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    describe(\"DataLabelUtils\", () => {\r\n\r\n        afterEach(() => {\r\n            $(\".data-labels\").remove();\r\n        });\r\n\r\n        describe(\"dataLabelUtils tests\", () => {\r\n\r\n            it('display units formatting values : Auto', () => {\r\n                let value: number = 2000000;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                labelSettings.displayUnits = 0;\r\n                labelSettings.precision = 0;\r\n                let value2 = 1000000;\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(null, labelSettings, value2);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"2M\");\r\n            });\r\n\r\n            it('display units formatting values : None', () => {\r\n                let value: number = 20000;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                labelSettings.displayUnits = 10;\r\n                labelSettings.precision = 0;\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(null, labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"20000\");\r\n            });\r\n\r\n            it(\"display units formatting values : K\", () => {\r\n                let value: number = 20000;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                labelSettings.displayUnits = 10000;\r\n                labelSettings.precision = 0;\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(null, labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"20K\");\r\n            });\r\n\r\n            it(\"display units formatting values : M\", () => {\r\n                let value: number = 200000;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                labelSettings.displayUnits = 1000000;\r\n                labelSettings.precision = 1;\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(null, labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"0.2M\");\r\n            });\r\n\r\n            it(\"display units formatting values : B\", () => {\r\n                let value: number = 200000000000;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                labelSettings.displayUnits = 1000000000;\r\n                labelSettings.precision = 0;\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(null, labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"200bn\");\r\n            });\r\n\r\n            it(\"display units formatting values : T\", () => {\r\n                let value: number = 200000000000;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                labelSettings.displayUnits = 1000000000000;\r\n                labelSettings.precision = 1;\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(null, labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"0.2T\");\r\n            });\r\n\r\n            it(\"precision formatting using format string #0\", () => {\r\n                let value: number = 2000;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(\"#0\", labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"2000\");\r\n            });\r\n\r\n            it(\"precision formatting using format string #0.00\", () => {\r\n                let value: number = 2000;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(\"#0.00\", labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"2000.00\");\r\n            });\r\n\r\n            it(\"precision formatting using format string 0.#### $;-0.#### $;0 $\", () => {\r\n                let value: number = -2000.123456;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(\"#.#### $;-#.#### $;0 $\", labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"-2000.1235 $\");\r\n            });\r\n\r\n            it(\"precision formatting using forced precision\", () => {\r\n                let value: number = 2000.123456;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                labelSettings.precision = 2;\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter = formattersCache.getOrCreate(\"0.0000\", labelSettings);\r\n                let formattedValue = formatter.format(value);\r\n                expect(formattedValue).toBe(\"2000.12\");\r\n            });\r\n\r\n            it(\"label formatting - multiple formats\", () => {\r\n                let formatCol1 = \"#,0.0\";\r\n                let formatCol2 = \"$#,0.0\";\r\n                let value: number = 1545;\r\n                let labelSettings: powerbi.visuals.VisualDataLabelsSettings = DataLabelUtils.getDefaultLabelSettings();\r\n                labelSettings.displayUnits = null;\r\n                labelSettings.precision = 1;\r\n\r\n                let formattersCache = DataLabelUtils.createColumnFormatterCacheManager();\r\n                let formatter1 = formattersCache.getOrCreate(formatCol1, labelSettings);\r\n                let formattedValue = formatter1.format(value);\r\n\r\n                expect(formattedValue).toBe(\"1,545.0\");\r\n\r\n                let formatter2 = formattersCache.getOrCreate(formatCol2, labelSettings);\r\n                formattedValue = formatter2.format(value);\r\n\r\n                expect(formattedValue).toBe(\"$1,545.0\");\r\n            });\r\n        });\r\n\r\n        describe(\"Test enumerateDataLabels\", () => {\r\n            it(\"showAll should always be the last property when exists\", () => {\r\n                let labelSettings = DataLabelUtils.getDefaultLineChartLabelSettings();\r\n                let options: powerbi.visuals.VisualDataLabelsSettingsOptions = {\r\n                    dataLabelsSettings: labelSettings,\r\n                    displayUnits: true,\r\n                    enumeration: new ObjectEnumerationBuilder(),\r\n                    fontSize: true,\r\n                    labelDensity: true,\r\n                    labelStyle: true,\r\n                    position: true,\r\n                    positionObject: [],\r\n                    precision: true,\r\n                    selector: null,\r\n                    show: true,\r\n                    showAll: true,\r\n                };\r\n\r\n                DataLabelUtils.enumerateDataLabels(options);\r\n                let enumeration = options.enumeration.complete();\r\n\r\n                expect(enumeration.instances.length).toBe(1);\r\n\r\n                let properties = enumeration.instances[0].properties;\r\n                expect(_.last(Object.keys(properties))).toBe('showAll');\r\n            });\r\n        });\r\n\r\n        describe(\"Test enumerateCategoryLabels\", () => {\r\n            it(\"test default values\", () => {\r\n                let labelSettings = DataLabelUtils.getDefaultPointLabelSettings();\r\n\r\n                let enumerationWithColor = new ObjectEnumerationBuilder();\r\n                DataLabelUtils.enumerateCategoryLabels(enumerationWithColor, labelSettings, true);\r\n                let objectsWithColor = enumerationWithColor.complete().instances;\r\n\r\n                let enumerationNoColor = new ObjectEnumerationBuilder();\r\n                DataLabelUtils.enumerateCategoryLabels(enumerationNoColor, labelSettings, false);\r\n                let objectsNoColor = enumerationNoColor.complete().instances;\r\n\r\n                labelSettings.showCategory = true;\r\n                let enumerationCategoryLabels = new ObjectEnumerationBuilder();\r\n                DataLabelUtils.enumerateCategoryLabels(enumerationCategoryLabels, labelSettings, false, true);\r\n                let objectsCategoryLabels = enumerationCategoryLabels.complete().instances;\r\n\r\n                expect(objectsWithColor[0].properties[\"show\"]).toBe(false);\r\n                expect(objectsNoColor[0].properties[\"show\"]).toBe(false);\r\n                expect(objectsCategoryLabels[0].properties[\"show\"]).toBe(true);\r\n\r\n                expect(objectsWithColor[0].properties[\"color\"]).toBe(labelSettings.labelColor);\r\n                expect(objectsNoColor[0].properties[\"color\"]).toBeUndefined();\r\n            });\r\n\r\n            it(\"test custom values\", () => {\r\n                let labelSettings = DataLabelUtils.getDefaultPointLabelSettings();\r\n                labelSettings.show = true;\r\n                labelSettings.labelColor = \"#FF0000\";\r\n\r\n                let enumerationWithColor = new ObjectEnumerationBuilder();\r\n                DataLabelUtils.enumerateCategoryLabels(enumerationWithColor, labelSettings, true);\r\n                let objectsWithColor = enumerationWithColor.complete().instances;\r\n\r\n                expect(objectsWithColor[0].properties[\"show\"]).toBe(true);\r\n                helpers.assertColorsMatch(<string>objectsWithColor[0].properties[\"color\"], labelSettings.labelColor);\r\n\r\n                labelSettings.categoryLabelColor = \"#222222\";\r\n                enumerationWithColor = new ObjectEnumerationBuilder();\r\n                DataLabelUtils.enumerateCategoryLabels(enumerationWithColor, labelSettings, true);\r\n                objectsWithColor = enumerationWithColor.complete().instances;\r\n\r\n                helpers.assertColorsMatch(<string>objectsWithColor[0].properties[\"color\"], labelSettings.categoryLabelColor);\r\n            });\r\n\r\n            it(\"test category labels objects for donut chart\", () => {\r\n                let labelSettings = DataLabelUtils.getDefaultDonutLabelSettings();\r\n\r\n                let enumerationWithColor = new ObjectEnumerationBuilder();\r\n                DataLabelUtils.enumerateCategoryLabels(enumerationWithColor, labelSettings, false, true);\r\n                let objectsWithColor = enumerationWithColor.complete().instances;\r\n\r\n                expect(objectsWithColor[0].properties[\"show\"]).toBe(labelSettings.showCategory);\r\n            });\r\n\r\n            it(\"test null values\", () => {\r\n                let labelSettings = DataLabelUtils.getDefaultPointLabelSettings();\r\n\r\n                let enumerationWithColor = new ObjectEnumerationBuilder();\r\n                DataLabelUtils.enumerateCategoryLabels(enumerationWithColor, null, true);\r\n                let objectsWithColor = enumerationWithColor.complete().instances;\r\n\r\n                expect(objectsWithColor[0].properties[\"show\"]).toBe(labelSettings.show);\r\n                expect(objectsWithColor[0].properties[\"color\"]).toBe(labelSettings.labelColor);\r\n            });\r\n        });\r\n    });\r\n\r\n    function columnChartDataLabelsShowValidation(chartType: string, collide: boolean) {\r\n        let visualBuilder: VisualBuilder;\r\n\r\n        let dataViewMetadataThreeColumn: powerbi.DataViewMetadataColumn[] = [\r\n            {\r\n                displayName: \"col1\",\r\n                queryName: \"col1\",\r\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n            },\r\n            {\r\n                displayName: \"col2\",\r\n                queryName: \"col2\",\r\n                isMeasure: true,\r\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n            },\r\n            {\r\n                displayName: \"col3\",\r\n                queryName: \"col3\",\r\n                isMeasure: true,\r\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n            }\r\n        ];\r\n\r\n        function createMetadata(columns): powerbi.DataViewMetadata {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: columns,\r\n            };\r\n\r\n            metadata.objects = {\r\n                labels: {\r\n                    show: true,\r\n                    labelPrecision: 0,\r\n                    color: {\r\n                        solid: {\r\n                            color: \"#FF0000\"\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            return metadata;\r\n        }\r\n\r\n        beforeEach(() => {\r\n            if (collide) {\r\n                visualBuilder = new VisualBuilder(\"100\", \"100\", chartType);\r\n            } else {\r\n                visualBuilder = new VisualBuilder(\"500\", \"500\", chartType);\r\n            }\r\n\r\n            visualBuilder.metadata = createMetadata(dataViewMetadataThreeColumn);\r\n        });\r\n    }\r\n\r\n    describe(\"Stacked Bar Chart show labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"barChart\", false));\r\n    describe(\"Clustered Bar Chart show labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"clusteredBarChart\", false));\r\n    describe(\"Hundred Percent Stacked Bar Chart show labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"hundredPercentStackedBarChart\", false));\r\n    describe(\"Stacked Column Chart show labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"columnChart\", false));\r\n    describe(\"Clustered Column Chart show labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"clusteredColumnChart\", false));\r\n    describe(\"Hundred Percent Stacked Column Chart show labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"hundredPercentStackedColumnChart\", false));\r\n\r\n    describe(\"Stacked Bar Chart hide labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"barChart\", true));\r\n    describe(\"Clustered Bar Chart hide labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"clusteredBarChart\", true));\r\n    describe(\"Hundred Percent Stacked Bar Chart hide labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"hundredPercentStackedBarChart\", true));\r\n    describe(\"Stacked Column Chart hide labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"columnChart\", true));\r\n    describe(\"Clustered Column Chart hide labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"clusteredColumnChart\", true));\r\n    describe(\"Hundred Percent Stacked Column Chart hide labels validation\", () =>\r\n        columnChartDataLabelsShowValidation(\"hundredPercentStackedColumnChart\", true));\r\n\r\n    class VisualBuilder {\r\n        private visual: powerbi.IVisual;\r\n\r\n        private element: JQuery;\r\n\r\n        private host: powerbi.IVisualHostServices;\r\n\r\n        private style: powerbi.IVisualStyle;\r\n\r\n        public metadata: powerbi.DataViewMetadata;\r\n\r\n        public values: any[] = [];\r\n\r\n        public categoriesValues: any[] = [];\r\n\r\n        public categoryIdentities: powerbi.DataViewScopeIdentity[];\r\n\r\n        public isIdentity: boolean = false;\r\n\r\n        private dataView: powerbi.DataView;\r\n\r\n        private height: string;\r\n\r\n        private width: string;\r\n\r\n        private _pluginName: string;\r\n\r\n        public get pluginName(): string {\r\n            return this._pluginName;\r\n        }\r\n\r\n        constructor(height: string, width: string, pluginName: string) {\r\n            this.width = width;\r\n            this.height = height;\r\n            this._pluginName = pluginName;\r\n\r\n            this.init();\r\n        }\r\n\r\n        private init() {\r\n            this.element = powerbitests.helpers.testDom(this.height, this.width);\r\n            this.host = powerbitests.mocks.createVisualHostServices();\r\n            this.style = powerbi.visuals.visualStyles.create();\r\n\r\n            this.createVisual();\r\n        }\r\n\r\n        public setSize(width: string, height: string) {\r\n            this.width = width;\r\n            this.height = height;\r\n\r\n            this.init();\r\n        }\r\n\r\n        private createVisual() {\r\n            this.visual = powerbi.visuals.visualPluginFactory.create().getPlugin(this._pluginName).create();\r\n\r\n            this.visual.init(this.createInitOptions());\r\n        }\r\n\r\n        private createInitOptions(): powerbi.VisualInitOptions {\r\n            return <powerbi.VisualInitOptions> {\r\n                element: this.element,\r\n                host: this.host,\r\n                style: this.style,\r\n                viewport: {\r\n                    height: this.element.height(),\r\n                    width: this.element.width()\r\n                },\r\n                animation: { transitionImmediate: true }\r\n            };\r\n        }\r\n\r\n        protected createIdentities() {\r\n            if (!this.isIdentity) {\r\n                this.categoryIdentities = undefined;\r\n\r\n                return;\r\n            }\r\n\r\n            let categoryIdentities: powerbi.DataViewScopeIdentity[] = [];\r\n\r\n            for (let i = 0; i < this.categoriesValues.length; i++) {\r\n                categoryIdentities.push(mocks.dataViewScopeIdentity(this.categoriesValues[i]));\r\n            }\r\n\r\n            this.categoryIdentities = categoryIdentities;\r\n        }\r\n\r\n        private createDataView() {\r\n            this.dataView = <powerbi.DataView> {\r\n                metadata: this.metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: this.metadata.columns[0],\r\n                        values: this.categoriesValues,\r\n                        identity: this.categoryIdentities\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: this.metadata.columns[1],\r\n                        values: this.values\r\n                    }])\r\n                }\r\n            };\r\n        }\r\n\r\n        public update() {\r\n            this.createIdentities();\r\n            this.createDataView();\r\n        }\r\n\r\n        public onDataChanged() {\r\n            this.update();\r\n\r\n            this.visual.onDataChanged({\r\n                dataViews: [this.dataView]\r\n            });\r\n        }\r\n    }\r\n\r\n    class MapBuilder {\r\n        public datalabelSettings: powerbi.visuals.PointDataLabelsSettings = {\r\n            show: true,\r\n            displayUnits: 2,\r\n            position: powerbi.visuals.PointLabelPosition.Above,\r\n            precision: 2,\r\n            labelColor: \"#000000\",\r\n            formatterOptions: {}\r\n        };\r\n\r\n        public viewPort = {\r\n            height: 150,\r\n            width: 300\r\n        };\r\n\r\n        public layout(): powerbi.visuals.ILabelLayout {\r\n            return DataLabelUtils.getMapLabelLayout(this.datalabelSettings);\r\n        }\r\n\r\n        public graphicsContext(className: string): D3.Selection {\r\n            return d3.select(\"body\")\r\n                .append(\"svg\")\r\n                .style(\"position\", \"absolute\")\r\n                .append(\"g\")\r\n                .classed(className, true);\r\n        }\r\n\r\n        public build(x: number, y: number, labeltext: string) {\r\n            return {\r\n                x: x,\r\n                y: y,\r\n                radius: 10,\r\n                fill: \"#000000\",\r\n                stroke: \"2\",\r\n                strokeWidth: 2,\r\n                selected: true,\r\n                identity: null,\r\n                labeltext: labeltext\r\n            };\r\n        }\r\n    }\r\n\r\n    class MapBubbleBuilder extends MapBuilder {\r\n        public buildMapBubble(x: number, y: number, labeltext: string): powerbi.visuals.MapBubble {\r\n            return <powerbi.visuals.MapBubble> this.build(x, y, labeltext);\r\n        }\r\n\r\n        public getResult(data: any[], className: string): D3.UpdateSelection {\r\n            return DataLabelUtils.drawDefaultLabelsForDataPointChart(\r\n                data,\r\n                this.graphicsContext(className),\r\n                this.layout(),\r\n                this.viewPort);\r\n        }\r\n    }\r\n\r\n    class MapSliceBuilder extends MapBuilder {\r\n        public buildMapSlice(x: number, y: number, labeltext: string, value: any): powerbi.visuals.MapSlice {\r\n            let map: any = this.build(x, y, labeltext);\r\n            map.value = value;\r\n\r\n            return <powerbi.visuals.MapSlice> map;\r\n        }\r\n\r\n        public getResult(data: any[], className: string) {\r\n            return DataLabelUtils.drawDefaultLabelsForDataPointChart(\r\n                data,\r\n                this.graphicsContext(className),\r\n                this.layout(),\r\n                this.viewPort);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}