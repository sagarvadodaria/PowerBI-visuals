{"version":3,"sources":["visuals/dataDotChartTests.ts"],"names":["powerbitests","powerbitests.DataViewBuilder","powerbitests.DataViewBuilder.constructor","powerbitests.DataViewBuilder.visual","powerbitests.DataViewBuilder.hostServices","powerbitests.DataViewBuilder.warningSpy","powerbitests.DataViewBuilder.dataView","powerbitests.DataViewBuilder.initVisual","powerbitests.DataViewBuilder.update","powerbitests.DataViewBuilder.buildCategoricalCategories","powerbitests.DataViewBuilder.buildCategoricalValues","powerbitests.DataViewBuilder.getHighlights","powerbitests.DataViewBuilder.getValuesSource","powerbitests.DataViewBuilder.buildDataView","powerbitests.DataViewBuilder.onDataChanged"],"mappings":"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IAAIA,CAACA,CAACA,aAAaA,EAAEA,CAACA;YAC/CA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,OAAOA,CAACA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;YACrEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YAC7CA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YAEjDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBACrDA,IAAIA,UAAUA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,UAAUA,CAACA,aAAaA,CAACA,CAACA,IAAIA,CAACA,kBAAkBA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,WAAWA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACxEA,MAAMA,CAACA,UAAUA,CAACA,aAAaA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,UAAUA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAC5CA,CAACA;QACLA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,oEAAoEA,EAAEA;YACrEA,eAAeA,CAACA,OAAOA,GAAGA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,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AACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;YACrEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YAC7CA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YAEjDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBACrDA,IAAIA,UAAUA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,UAAUA,CAACA,aAAaA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACpFA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,WAAWA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACxEA,MAAMA,CAACA,UAAUA,CAACA,aAAaA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,UAAUA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAC5CA,CAACA;QACLA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,gEAAgEA,EAAEA;YACjEA,IAAIA,KAAKA,GAAGA,CAACA,IAAIA,IAAIA,CAACA,WAAWA,CAACA,EAAEA,IAAIA,IAAIA,CAACA,YAAYA,CAACA,EAAEA,IAAIA,IAAIA,CAACA,WAAWA,CAACA,CAACA,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;YACxCA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,OAAOA,CAACA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;YACrEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,OAAOA,CAACA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;YACrEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YAC7CA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YAEjDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBACrDA,IAAIA,UAAUA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAE3CA,MAAMA,CAACA,UAAUA,CAACA,aAAaA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,GAAGA,KAAKA,CAACA,CAACA,CAACA,CAACA,OAAOA,EAAEA,GAAGA,IAAIA,CAACA,CAACA;gBAC5EA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,WAAWA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACxEA,MAAMA,CAACA,UAAUA,CAACA,aAAaA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,UAAUA,CAACA,QAAQA,CAACA,CAACA,IAAIA,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AAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,4BAA4BA,CAACA,CAACA;gBAClGA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6CAA6CA,EAAEA,UAACA,IAAIA;YACnDA,eAAeA,CAACA,MAAMA,GAAGA,CAACA,CAACA,MAAMA,CAACA,iBAAiBA,CAACA,CAACA,CAACA;YAEtDA,eAAeA,CAACA,MAAMA,EAAEA,CAACA;YAEzBA,eAAeA,CAACA,aAAaA,EAAEA,CAACA;YAEhCA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,eAAeA,CAACA,UAAUA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBACtDA,MAAMA,CAACA,eAAeA,CAACA,UAAUA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,eAAeA,CAACA,UAAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,4BAA4BA,CAACA,CAACA;gBAClGA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,8CAA8CA,EAAEA,UAACA,IAAIA;YACpDA,eAAeA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;YAEpCA,eAAeA,CAACA,MAAMA,EAAEA,CAACA;YAEzBA,eAAeA,CAACA,aAAaA,EAAEA,CAACA;YAEhCA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,eAAeA,CAACA,UAAUA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBACtDA,MAAMA,CAACA,eAAeA,CAACA,UAA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A,IAAIA,CAACA,CAACA;oBAEpBA,kDAAkDA;oBAClDA,IAAIA,MAAMA,GAAGA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;oBAC9BA,EAAEA,CAACA,CAACA,KAAKA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBACdA,MAAMA,CAACA,MAAMA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;wBAClCA,SAASA,GAAGA,MAAMA,CAACA;oBACvBA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACFA,MAAMA,CAACA,MAAMA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;oBACtCA,CAACA;oBAEDA,MAAMA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;oBAE7CA,yCAAyCA;oBACzCA,EAAEA,CAACA,CAACA,KAAKA,KAAKA,CAACA,IAAIA,KAAKA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBAC7BA,MAAMA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACtCA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACFA,MAAMA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;oBACjDA,CAACA;gBACLA,CAACA,CAACA,CAACA;gBAEHA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,yBAAyBA,EAAEA,UAACA,IAAIA;YAC/BA,eAAeA,CAACA,MAAMA,GAAGA,CAACA,CAACA,MAAMA,EAAEA,MAAMA,EAAEA,MAAMA,EAAEA,MAAMA,EAAEA,MAAMA,CAACA,CAACA,CAACA;YAEpEA,eAAeA,CAACA,MAAMA,EAAEA,CAACA;YAEzBA,eAAeA,CAACA,aAAaA,EAAEA,CAACA;YAEhCA,UAAUA,CAACA;gBACPA,IAAIA,OAAOA,GAAGA,CAACA,CAACA,sBAAsBA,CAACA,CAACA;gBACxCA,MAAMA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAE/BA,OAAOA,CAACA,IAAIA,CAACA,UAACA,KAAKA,EAAEA,IAAIA;oBAErBA,IAAIA,KAAKA,GAAGA,CAACA,CAACA,IAAIA,CAACA,CAACA;oBAEpBA,MAAMA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;oBAE5CA,yCAAyCA;oBACzCA,EAAEA,CAACA,CAACA,KAAKA,KAAKA,CAACA,IAAIA,KAAKA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBAC7BA,MAAMA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACrCA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACFA,MAAMA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;oBAChDA,CAACA;gBACLA,CAACA,CAACA,CAACA;gBAEHA,IAAIA,OAAOA,GAAGA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAChCA,MAAMA,CAACA,OAAOA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAEpCA,IAAIA,OAAOA,GAAGA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAChCA,MAAMA,CAACA,OAAOA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAEpCA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,I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A,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAExDA,iDAAiDA;gBACjDA,MAAMA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,SAASA,CAACA,YAAYA,CAACA,CAACA;gBAE1DA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,mCAAmCA,EAAEA,UAACA,IAAIA;YACzC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","file":"visuals/dataDotChartTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import DataDotChart = powerbi.visuals.DataDotChart;\r\n    import dataDotChartCapabilities = powerbi.visuals.dataDotChartCapabilities;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import EventType = powerbitests.helpers.ClickEventType;\r\n    import ColumnUtil = powerbi.visuals.ColumnUtil;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    describe(\"Check DataDotChart capabilities\", () => {\r\n\r\n        it(\"DataDotChart registered capabilities\", () => {\r\n            expect(powerbi.visuals.visualPluginFactory.create().getPlugin(\"dataDotChart\").capabilities).toBe(dataDotChartCapabilities);\r\n        });\r\n\r\n        it(\"DataDotChart capabilities should include dataRoles\", () => {\r\n            expect(dataDotChartCapabilities.dataRoles).toBeDefined();\r\n        });\r\n\r\n        it(\"DataDotChart capabilities should include dataViewMappings\", () => {\r\n            expect(dataDotChartCapabilities.dataViewMappings).toBeDefined();\r\n        });\r\n\r\n        it(\"Capabilities should not suppressDefaultTitle\", () => {\r\n            expect(dataDotChartCapabilities.suppressDefaultTitle).toBeUndefined();\r\n        });\r\n\r\n        it(\"FormatString property should match calculated\", () => {\r\n            expect(powerbi.data.DataViewObjectDescriptors.findFormatString(dataDotChartCapabilities.objects)).toEqual(DataDotChart.formatStringProp);\r\n        });\r\n    });\r\n\r\n    describe(\"DataDotChart converter\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n\r\n        let blankCategoryValue = \"(Blank)\";\r\n\r\n        let dataViewMetadata: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: \"stringColumn\",\r\n                    queryName: \"stringColumn\",\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                },\r\n                {\r\n                    displayName: \"numberColumn\",\r\n                    queryName: \"numberColumn\",\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                },\r\n                {\r\n                    displayName: \"dateTimeColumn\",\r\n                    queryName: \"dateTimeColumn\",\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime)\r\n                }\r\n            ]\r\n        };\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n\r\n            dataViewBuilder.dataViewMetadata = dataViewMetadata;\r\n        });\r\n\r\n        it(\"Check converter with string categories undefined series\", () => {\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[0]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.categoricalValues = undefined;\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n            expect(actualData).toBeDefined();\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(0);\r\n        });\r\n\r\n        it(\"Check converter with string categories and an empty numeric series\", () => {\r\n            dataViewBuilder.categoryValues = [\"Cat 1\", \"Cat 2\", \"Cat 3\"];\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[0], dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [[]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n            expect(actualData).toEqual({\r\n                series: {\r\n                    xCol: dataView.metadata.columns[0],\r\n                    yCol: dataView.metadata.columns[1],\r\n                    data: []                    \r\n                },\r\n                hasHighlights: false,\r\n                hasDynamicSeries: true\r\n            });\r\n        });\r\n\r\n        it(\"Check converter with string categories and a numeric series\", () => {\r\n            dataViewBuilder.categoryValues = [\"Cat 1\", \"Cat 2\", \"Cat 3\"];\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[0], dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [[100, 200, 300]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.xCol).toEqual(dataView.metadata.columns[0]);\r\n            expect(actualData.series.yCol).toEqual(dataView.metadata.columns[1]);\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(3);\r\n\r\n            for (let i = 0; i < actualData.series.data.length; i++) {\r\n                let seriesData = actualData.series.data[i];\r\n                expect(seriesData.categoryValue).toBe(dataView.categorical.categories[0].values[i]);\r\n                expect(seriesData.value).toBe(dataView.categorical.values[0].values[i]);\r\n                expect(seriesData.categoryIndex).toBe(i);\r\n                expect(seriesData.seriesIndex).toBe(0);\r\n                expect(seriesData.selected).toBe(false);\r\n            }\r\n        });\r\n\r\n        it(\"Check converter with empty categories and single numeric value\", () => {\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [[100]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.categoricalCategories = [];\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.xCol).toBeUndefined();\r\n            expect(actualData.series.yCol).toEqual(dataView.metadata.columns[1]);\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(1);\r\n\r\n            for (let i = 0; i < actualData.series.data.length; i++) {\r\n                let seriesData = actualData.series.data[i];\r\n                expect(seriesData.categoryValue).toBe(blankCategoryValue);\r\n                expect(seriesData.value).toBe(dataView.categorical.values[0].values[i]);\r\n                expect(seriesData.categoryIndex).toBe(i);\r\n                expect(seriesData.seriesIndex).toBe(0);\r\n                expect(seriesData.selected).toBe(false);\r\n            }\r\n        });\r\n\r\n        it(\"Check converter with undefined categories and single numeric value\", () => {\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [[100]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.categoricalCategories = [];\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.xCol).toBeUndefined();\r\n            expect(actualData.series.yCol).toEqual(dataView.metadata.columns[1]);\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(1);\r\n\r\n            for (let i = 0; i < actualData.series.data.length; i++) {\r\n                let seriesData = actualData.series.data[i];\r\n                expect(seriesData.categoryValue).toBe(blankCategoryValue);\r\n                expect(seriesData.value).toBe(dataView.categorical.values[0].values[i]);\r\n                expect(seriesData.categoryIndex).toBe(i);\r\n                expect(seriesData.seriesIndex).toBe(0);\r\n                expect(seriesData.selected).toBe(false);\r\n            }\r\n        });\r\n\r\n        it(\"Check converter with string categories and multiple numeric series\", () => {\r\n            dataViewBuilder.categoryValues = [\"Cat 1\", \"Cat 2\", \"Cat 3\"];\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[0], dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [\r\n                [100, 200, 300],\r\n                [101, 201, 301],\r\n                [102, 202, 302]\r\n            ];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n            \r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.xCol).toEqual(dataView.metadata.columns[0]);\r\n            expect(actualData.series.yCol).toEqual(dataView.metadata.columns[1]);\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(3);\r\n\r\n            for (let i = 0; i < actualData.series.data.length; i++) {\r\n                let seriesData = actualData.series.data[i];\r\n                expect(seriesData.categoryValue).toBe(dataView.categorical.categories[0].values[i]);\r\n                expect(seriesData.value).toBe(dataView.categorical.values[0].values[i]);\r\n                expect(seriesData.categoryIndex).toBe(i);\r\n                expect(seriesData.seriesIndex).toBe(0);\r\n                expect(seriesData.selected).toBe(false);\r\n            }\r\n        });\r\n\r\n        it(\"Check converter with date-time categories and a numeric series\", () => {\r\n            let dates = [new Date(\"2014/9/25\"), new Date(\"2014/12/12\"), new Date(\"2015/9/25\")];\r\n\r\n            dataViewBuilder.categoryValues = dates;\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[2], dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [[100, 200, 300]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.xCol).toEqual(dataView.metadata.columns[2]);\r\n            expect(actualData.series.yCol).toEqual(dataView.metadata.columns[1]);\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(3);\r\n\r\n            for (let i = 0; i < actualData.series.data.length; i++) {\r\n                let seriesData = actualData.series.data[i];\r\n                expect(seriesData.categoryValue).toBe(dates[i].getTime());\r\n                expect(seriesData.value).toBe(dataView.categorical.values[0].values[i]);\r\n                expect(seriesData.categoryIndex).toBe(i);\r\n                expect(seriesData.seriesIndex).toBe(0);\r\n                expect(seriesData.selected).toBe(false);\r\n            }\r\n        });\r\n\r\n        it(\"Check converter with date-time categories and a numeric series where category value is null\", () => {\r\n            let dates = [new Date(\"2014/9/25\"), null, new Date(\"2015/9/25\")];\r\n\r\n            dataViewBuilder.categoryValues = dates;\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[2], dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [[100, 200, 300]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.xCol).toEqual(dataView.metadata.columns[2]);\r\n            expect(actualData.series.yCol).toEqual(dataView.metadata.columns[1]);\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(3);\r\n\r\n            for (let i = 0; i < actualData.series.data.length; i++) {\r\n                let seriesData = actualData.series.data[i];\r\n\r\n                expect(seriesData.categoryValue).toBe(dates[i] ? dates[i].getTime() : null);\r\n                expect(seriesData.value).toBe(dataView.categorical.values[0].values[i]);\r\n                expect(seriesData.categoryIndex).toBe(i);\r\n                expect(seriesData.seriesIndex).toBe(0);\r\n                expect(seriesData.selected).toBe(false);\r\n            }\r\n        });\r\n\r\n        it(\"Check converter pass string categories and a numeric series produces identities\", () => {\r\n            let identityNames = [\"John Domo\", \"Delta Force\", \"Jean Tablau\"];\r\n            let categoryIdentities = identityNames.map((item) => mocks.dataViewScopeIdentity(item));\r\n            \r\n            dataViewBuilder.categoryIdentities = categoryIdentities;\r\n            dataViewBuilder.categoryValues = [\"Cat 1\", \"Cat 2\", \"Cat 3\"];\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[0], dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [[100, 200, 300]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(3);\r\n\r\n            for (let i = 0; i < actualData.series.data.length; i++) {\r\n                let seriesData = actualData.series.data[i];\r\n                expect(seriesData.identity).toBeDefined();\r\n                expect(seriesData.identity.getKey()).toContain(identityNames[i]);\r\n            }\r\n        });\r\n\r\n        it(\"Check converter passed undefined categories produces measure name identities \", () => {\r\n            dataViewBuilder.columns = [dataViewMetadata.columns[1]];\r\n            dataViewBuilder.values = [[100]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.categoricalCategories = [];\r\n\r\n            let dataView: powerbi.DataView = dataViewBuilder.dataView;\r\n\r\n            let actualData = DataDotChart.converter(dataView, blankCategoryValue, null);\r\n\r\n            expect(actualData.series).toBeDefined();\r\n            expect(actualData.series.data).toBeDefined();\r\n            expect(actualData.series.data.length).toEqual(1);\r\n\r\n            for (let i = 0; i < actualData.series.data.length; i++) {\r\n                let seriesData = actualData.series.data[i];\r\n                expect(seriesData.identity).toBeDefined();\r\n                expect(seriesData.identity.getKey()).toContain(dataViewMetadata.columns[1].displayName);\r\n            }\r\n        });\r\n    });\r\n\r\n    let dataViewMetadataDefault: powerbi.DataViewMetadata = {\r\n        columns: [\r\n            {\r\n                displayName: \"stringColumn\",\r\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n            },\r\n            {\r\n                displayName: \"numberColumn\",\r\n                isMeasure: true,\r\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n                format: \"0.000\"\r\n            },\r\n            {\r\n                displayName: \"dateTimeColumn\",\r\n                isMeasure: true,\r\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime)\r\n            }\r\n        ]\r\n    };\r\n\r\n    describe(\"DataDotChart render to DOM\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n\r\n        let categoryValues = [\"a\", \"b\", \"c\", \"d\", \"e\"];\r\n        let categoryIdentities = categoryValues.map(n => mocks.dataViewScopeIdentity(n));\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n\r\n            dataViewBuilder.dataViewMetadata = dataViewMetadataDefault;\r\n            dataViewBuilder.columns = dataViewMetadataDefault.columns;\r\n            dataViewBuilder.categoryValues = categoryValues;\r\n            dataViewBuilder.categoryIdentities = categoryIdentities;\r\n        });\r\n\r\n        it(\"NaN in values shows a warning\", (done) => {\r\n            dataViewBuilder.values = [[NaN]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                expect(dataViewBuilder.warningSpy).toHaveBeenCalled();\r\n                expect(dataViewBuilder.warningSpy.calls.count()).toBe(1);\r\n                expect(dataViewBuilder.warningSpy.calls.argsFor(0)[0][0].code).toBe(\"NaNNotSupported\");\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Negative Infinity in values shows a warning\", (done) => {\r\n            dataViewBuilder.values = [[Number.NEGATIVE_INFINITY]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                expect(dataViewBuilder.warningSpy).toHaveBeenCalled();\r\n                expect(dataViewBuilder.warningSpy.calls.count()).toBe(1);\r\n                expect(dataViewBuilder.warningSpy.calls.argsFor(0)[0][0].code).toBe(\"InfinityValuesNotSupported\");\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Positive Infinity in values shows a warning\", (done) => {\r\n            dataViewBuilder.values = [[Number.POSITIVE_INFINITY]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                expect(dataViewBuilder.warningSpy).toHaveBeenCalled();\r\n                expect(dataViewBuilder.warningSpy.calls.count()).toBe(1);\r\n                expect(dataViewBuilder.warningSpy.calls.argsFor(0)[0][0].code).toBe(\"InfinityValuesNotSupported\");\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Out of range value in values shows a warning\", (done) => {\r\n            dataViewBuilder.values = [[-1e301]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                expect(dataViewBuilder.warningSpy).toHaveBeenCalled();\r\n                expect(dataViewBuilder.warningSpy.calls.count()).toBe(1);\r\n                expect(dataViewBuilder.warningSpy.calls.argsFor(0)[0][0].code).toBe(\"ValuesOutOfRange\");\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Values all okay does not show a warning\", (done) => {\r\n            dataViewBuilder.values = [[300]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                expect(dataViewBuilder.warningSpy).not.toHaveBeenCalled();\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Check axis in DOM\", (done) => {\r\n            dataViewBuilder.values = [[500000, 495000, 490000, 480000, 500000]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            let labels = $(\".dataDotChart .axisGraphicsContext .y.axis .tick\").find(\"text\");\r\n\r\n            setTimeout(() => {\r\n                expect($(\".dataDotChart .axisGraphicsContext .x.axis .tick\").length).toBeGreaterThan(0);\r\n                expect($(\".dataDotChart .axisGraphicsContext .y.axis .tick\").length).toBeGreaterThan(0);\r\n\r\n                expect(helpers.findElementText($(labels).first())).toBe(\"0.0M\");\r\n                expect(helpers.findElementTitle($(labels).first())).toBe(\"0.0M\");\r\n\r\n                expect(helpers.findElementText($(labels).last())).toBe(\"0.5M\");\r\n                expect(helpers.findElementTitle($(labels).last())).toBe(\"0.5M\");\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Check dots in DOM\", (done) => {\r\n            dataViewBuilder.values = [[500000, 495000, 490000, 480000, 500000]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                let $dots = $(\".dataDotChart .dot\");\r\n                expect($dots.length).toBe(5);\r\n\r\n                let dotRadius = 0;\r\n                $dots.each((index, elem) => {\r\n\r\n                    let $elem = $(elem);\r\n\r\n                    // I verify all dots have the same non-zero radius\r\n                    let radius = +$elem.attr(\"r\");\r\n                    if (index === 0) {\r\n                        expect(radius).toBeGreaterThan(0);\r\n                        dotRadius = radius;\r\n                    }\r\n                    else {\r\n                        expect(radius).toEqual(dotRadius);\r\n                    }\r\n\r\n                    expect(+$elem.attr(\"cx\")).toBeGreaterThan(0);\r\n\r\n                    // The first and last dots are at the top\r\n                    if (index === 0 || index === 4) {\r\n                        expect(+$elem.attr(\"cy\")).toBe(0);\r\n                    }\r\n                    else {\r\n                        expect(+$elem.attr(\"cy\")).toBeGreaterThan(0);\r\n                    }\r\n                });\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Check dot labels in DOM\", (done) => {\r\n            dataViewBuilder.values = [[500000, 495000, 490000, 480000, 500000]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                let $labels = $(\".dataDotChart .label\");\r\n                expect($labels.length).toBe(5);\r\n\r\n                $labels.each((index, elem) => {\r\n\r\n                    let $elem = $(elem);\r\n\r\n                    expect(+$elem.attr(\"x\")).toBeGreaterThan(0);\r\n\r\n                    // The first and last dots are at the top\r\n                    if (index === 0 || index === 4) {\r\n                        expect(+$elem.attr(\"y\")).toBe(0);\r\n                    }\r\n                    else {\r\n                        expect(+$elem.attr(\"y\")).toBeGreaterThan(0);\r\n                    }\r\n                });\r\n\r\n                let $label1 = $($labels.get(0));\r\n                expect($label1.text()).toBe(\"0.5M\");\r\n\r\n                let $label3 = $($labels.get(2));\r\n                expect($label3.text()).toBe(\"0.5M\");\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        let overflowCategoryValues = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\r\n        let overflowCategoryIdentities = overflowCategoryValues.map(n => mocks.dataViewScopeIdentity(n));\r\n\r\n        it(\"Check dots text overflow handled in DOM\", (done) => {\r\n            dataViewBuilder.categoryValues = overflowCategoryValues;\r\n            dataViewBuilder.categoryIdentities = overflowCategoryIdentities;\r\n            dataViewBuilder.values = [[\r\n                999, 888, 777, 666,\r\n                555, 444, 333, 222,\r\n                111, 999, 888, 777,\r\n                666, 555, 444, 333,\r\n                222, 111, 999, 888,\r\n                777, 666, 555, 444,\r\n                333, 222]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                let $labels = $(\".dataDotChart .label\");\r\n                expect($labels.length).toBeGreaterThan(0);\r\n\r\n                $labels.each((index, elem) => {\r\n\r\n                    let $elem = $(elem);\r\n\r\n                    expect($elem.attr(\"class\")).toContain(\"overflowed\");\r\n                });\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Check partial highlighting dots in DOM\", (done) => {\r\n            dataViewBuilder.values = [[500000, 495000, 490000, 480000, 500000]];\r\n            dataViewBuilder.highlights = [[100000, 195000, null, 180000, 9000]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                let $dots = $(\".dataDotChart .dot\");\r\n                expect($dots.length).toBe(10);\r\n                \r\n                // I check partial highlighting\r\n                let defaultOpacity = ColumnUtil.DefaultOpacity.toString();\r\n                let dimmedOpacity = ColumnUtil.DimmedOpacity.toString();\r\n\r\n                expect($dots[0].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect($dots[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect($dots[2].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect($dots[3].style.fillOpacity).toBe(defaultOpacity);\r\n                expect($dots[4].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect($dots[5].style.fillOpacity).toBe(defaultOpacity);\r\n                expect($dots[6].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect($dots[7].style.fillOpacity).toBe(defaultOpacity);\r\n                expect($dots[8].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect($dots[9].style.fillOpacity).toBe(defaultOpacity);                \r\n\r\n                // I check that null value causes .null-value css\r\n                expect($($dots[5]).attr(\"class\")).toContain(\"null-value\");\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure zero line axis is darkened\", (done) => {\r\n            dataViewBuilder.values = [[500000, -495000, 490000, 480000, -500000]];\r\n\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n                let zeroTicks = $(\"g.tick:has(line.zero-line)\");\r\n\r\n                expect(zeroTicks.length).toBe(2);\r\n                zeroTicks.each((i, item) => {\r\n                    expect(d3.select(item).datum() === 0).toBe(true);\r\n                });\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"DataDotChart interactivity in DOM\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n\r\n        let defaultOpacity = ColumnUtil.DefaultOpacity.toString();\r\n        let dimmedOpacity = ColumnUtil.DimmedOpacity.toString();\r\n\r\n        let categoryValues = [\"a\", \"b\", \"c\", \"d\", \"e\"];\r\n        let categoryIdentities = categoryValues.map(n => mocks.dataViewScopeIdentity(n));\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n\r\n            dataViewBuilder.dataViewMetadata = dataViewMetadataDefault;\r\n            dataViewBuilder.columns = dataViewMetadataDefault.columns;\r\n            dataViewBuilder.values = [[500000, 495000, 490000, 480000, 500000]];\r\n            dataViewBuilder.categoryValues = categoryValues;\r\n            dataViewBuilder.categoryIdentities = categoryIdentities;\r\n        });\r\n\r\n        it(\"Check select dot\", (done) => {\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n\r\n                let dots = $(\".dataDotChart .dot\");\r\n\r\n                spyOn(dataViewBuilder.hostServices, \"onSelect\").and.callThrough();\r\n\r\n                (<any>dots.first()).d3Click(0, 0);\r\n\r\n                expect(dots[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[1].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(dots[2].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(dots[3].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(dots[4].style.fillOpacity).toBe(dimmedOpacity);\r\n\r\n                expect(dataViewBuilder.hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [categoryIdentities[0]]\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Check multi-select dot\", (done) => {\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n\r\n                let dots = $(\".dataDotChart .dot\");\r\n\r\n                spyOn(dataViewBuilder.hostServices, \"onSelect\").and.callThrough();\r\n\r\n                (<any>dots.first()).d3Click(0, 0);\r\n                \r\n                expect(dots[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[1].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(dots[2].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(dots[3].style.fillOpacity).toBe(dimmedOpacity);\r\n\r\n                expect(dataViewBuilder.hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [categoryIdentities[0]]\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Check external clear selection\", (done) => {\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n\r\n                let dots = $(\".dataDotChart .dot\");\r\n\r\n                spyOn(dataViewBuilder.hostServices, \"onSelect\").and.callThrough();\r\n\r\n                (<any>dots.first()).d3Click(0, 0);\r\n                (<any>dots.last()).d3Click(0, 0, EventType.CtrlKey);\r\n\r\n                dataViewBuilder.visual.onClearSelection();\r\n\r\n                expect(dots[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[2].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[3].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[4].style.fillOpacity).toBe(defaultOpacity);               \r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Check clearCatcher clear selection\", (done) => {\r\n            dataViewBuilder.update();\r\n\r\n            dataViewBuilder.onDataChanged();\r\n\r\n            setTimeout(() => {\r\n\r\n                let dots = $(\".dataDotChart .dot\");                \r\n\r\n                (<any>dots.first()).d3Click(0, 0);\r\n                (<any>dots.last()).d3Click(0, 0, EventType.CtrlKey);\r\n\r\n                spyOn(dataViewBuilder.hostServices, \"onSelect\").and.callThrough();\r\n\r\n                (<any>($(\".clearCatcher\").last())).d3Click(0, 0);\r\n\r\n                expect(dots[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[2].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[3].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(dots[4].style.fillOpacity).toBe(defaultOpacity);\r\n\r\n                expect(dataViewBuilder.hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: []\r\n                    });\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    class DataViewBuilder {\r\n        private element: JQuery;\r\n\r\n        private _visual: powerbi.IVisual;\r\n\r\n        public get visual(): powerbi.IVisual {\r\n            return this._visual;\r\n        }\r\n\r\n        private _hostServices: powerbi.IVisualHostServices;\r\n\r\n        public get hostServices(): powerbi.IVisualHostServices {\r\n            return this._hostServices;\r\n        }\r\n\r\n        public highlights: any[] = null;\r\n\r\n        public values: any[] = [];\r\n\r\n        private _warningSpy: jasmine.Spy;\r\n\r\n        public get warningSpy(): jasmine.Spy {\r\n            return this._warningSpy;\r\n        }\r\n\r\n        private _dataView: powerbi.DataView;\r\n\r\n        public get dataView(): powerbi.DataView {\r\n            if (!this._dataView) {\r\n                this.buildDataView();\r\n            }\r\n\r\n            return this._dataView;\r\n        }\r\n\r\n        public categoryValues: any[];\r\n        \r\n        public categoryIdentities: any[];\r\n\r\n        public dataViewMetadata: powerbi.DataViewMetadata;\r\n\r\n        public categoricalCategories: any[] = [];\r\n\r\n        public categoricalValues: powerbi.DataViewValueColumns;\r\n\r\n        public columns: any[] = [];\r\n\r\n        constructor(width: string = \"500\", height: string = \"500\") {\r\n            this.element = powerbitests.helpers.testDom(height, width);\r\n            this._visual = new powerbi.visuals.CartesianChart({ chartType: powerbi.visuals.CartesianChartType.DataDot, behavior: new powerbi.visuals.CartesianChartBehavior([new powerbi.visuals.DataDotChartWebBehavior()]) });\r\n            this._hostServices = mocks.createVisualHostServices();\r\n            this._warningSpy = jasmine.createSpy(\"warning\");\r\n            this._hostServices.setWarnings = this.warningSpy;\r\n\r\n            this.initVisual();\r\n        }\r\n\r\n        public initVisual() {\r\n            this.visual.init({\r\n                element: this.element,\r\n                host: this.hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: this.element.height(),\r\n                    width: this.element.width()\r\n                },\r\n                animation: { transitionImmediate: true },\r\n                interactivity: { selection: true, isInteractiveLegend: false }\r\n            });\r\n        }\r\n\r\n        public update() {\r\n            this.buildCategoricalCategories();\r\n            this.buildCategoricalValues();\r\n        }\r\n\r\n        private buildCategoricalCategories() {\r\n            this.categoricalCategories = [\r\n                {\r\n                    source: this.getValuesSource(0),\r\n                    values: this.categoryValues,\r\n                    identity: this.categoryIdentities\r\n                }\r\n            ];\r\n        }\r\n\r\n        private buildCategoricalValues() {\r\n            let categoricalValues = [];\r\n\r\n            for (let i = 0; i < this.values.length; i++) {\r\n                categoricalValues.push({\r\n                    source: this.getValuesSource(i + 1),\r\n                    values: this.values[i],\r\n                    highlights: this.getHighlights(i)\r\n                });\r\n            }\r\n\r\n            this.categoricalValues =\r\n                DataViewTransform.createValueColumns(categoricalValues);\r\n        }\r\n\r\n        private getHighlights(index): any {\r\n            if (this.highlights) {\r\n                return this.highlights[index];\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        private getValuesSource(index): any {\r\n            if (this.columns[index]) {\r\n                return this.columns[index];\r\n            }\r\n\r\n            return this.columns[this.columns.length - 1];\r\n        }\r\n\r\n        private buildDataView() {\r\n            this._dataView = {\r\n                metadata: this.dataViewMetadata,\r\n                categorical: {\r\n                    categories: this.categoricalCategories,\r\n                    values: this.categoricalValues\r\n                }\r\n            };\r\n        }\r\n\r\n        public onDataChanged() {\r\n            this.visual.onDataChanged({\r\n                dataViews: [this.dataView]\r\n            });\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}