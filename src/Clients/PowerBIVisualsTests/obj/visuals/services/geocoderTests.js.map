{"version":3,"sources":["visuals/services/geocoderTests.ts"],"names":["powerbitests"],"mappings":"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","file":"visuals/services/geocoderTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import MapUtil = powerbi.visuals.MapUtil;\r\n    import services = powerbi.visuals.services;\r\n    import GeocodeQuery = services.GeocodeQuery;\r\n    import GeocodeBoundaryQuery = services.GeocodeBoundaryQuery;\r\n    import BingEntities = services.BingEntities;\r\n\r\n    describe(\"GeocodingManagerTests\", () => {\r\n        describe(\"services.isCategoryType\", () => {\r\n            it(\"GeocodingManager.CategoryTypes.Address\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.Address)).toBeTruthy();\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes.City\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.City)).toBeTruthy();\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes.Continent\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.Continent)).toBeTruthy();\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes Country\", () => {\r\n                expect(services.isCategoryType(\"Country\")).toBeTruthy(); // Country is special\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes.County\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.County)).toBeTruthy();\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes.Longitude\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.Longitude)).toBeTruthy();\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes.Latitude\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.Latitude)).toBeTruthy();\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes.Place\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.Place)).toBeTruthy();\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes.PostalCode\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.PostalCode)).toBeTruthy();\r\n            });\r\n\r\n            it(\"GeocodingManager.CategoryTypes.StateOrProvince\", () => {\r\n                expect(services.isCategoryType(MapUtil.CategoryTypes.StateOrProvince)).toBeTruthy();\r\n            });\r\n           \r\n            it(\"GeocodingManager.CategoryTypes empty\", () => {\r\n                expect(services.isCategoryType(\"\")).toBeFalsy();\r\n            });\r\n        });\r\n    });\r\n\r\n    describe(\"GeocodeQueryTests\", () => {\r\n        beforeEach(() => {\r\n            MapUtil.Settings.BingKey = \"testBingKey\";\r\n        });\r\n\r\n        it(\"null values converted to empty strings\", () => {\r\n            let nullQuery = new GeocodeQuery(null, null);\r\n            expect(nullQuery.query).toBe(\"\");\r\n            expect(nullQuery.category).toBe(\"\");\r\n        });\r\n        \r\n        it(\"cache hits\", () => {\r\n            let query = new GeocodeQuery(\"Redmond\", \"City\");\r\n            expect(query.getCacheHits()).toBe(0);\r\n            query.incrementCacheHit();\r\n            expect(query.getCacheHits()).toBe(1);\r\n            query.incrementCacheHit();\r\n            query.incrementCacheHit();\r\n            expect(query.getCacheHits()).toBe(3);\r\n        });\r\n\r\n        it(\"getBingEntity\", () => {\r\n            let addressQuery = new GeocodeQuery(\"One Microsoft Way\", \"Address\");\r\n            expect(addressQuery.getBingEntity()).toBe(BingEntities.Address);\r\n            let cityQuery = new GeocodeQuery(\"Redmond\", \"City\");\r\n            expect(cityQuery.getBingEntity()).toBe(BingEntities.PopulatedPlace);\r\n            let continentQuery = new GeocodeQuery(\"North America\", \"Continent\");\r\n            expect(continentQuery.getBingEntity()).toBe(BingEntities.Continent);\r\n            let countryQuery = new GeocodeQuery(\"United States\", \"Country\");\r\n            expect(countryQuery.getBingEntity()).toBe(BingEntities.Sovereign);\r\n            let countyQuery = new GeocodeQuery(\"King\", \"County\");\r\n            expect(countyQuery.getBingEntity()).toBe(BingEntities.AdminDivision2);\r\n            let longQuery = new GeocodeQuery(\"-122.127762\", \"Longitude\");\r\n            expect(longQuery.getBingEntity()).toBe(\"\");\r\n            let latQuery = new GeocodeQuery(\"47.644287\", \"Latitude\");\r\n            expect(latQuery.getBingEntity()).toBe(\"\");\r\n            let placeQuery = new GeocodeQuery(\"Microsoft Building 17\", \"Place\");\r\n            expect(placeQuery.getBingEntity()).toBe(\"\");\r\n            let postalCodeQuery = new GeocodeQuery(\"98052\", \"PostalCode\");\r\n            expect(postalCodeQuery.getBingEntity()).toBe(BingEntities.Postcode);\r\n            let stateQuery = new GeocodeQuery(\"Washington\", \"StateOrProvince\");\r\n            expect(stateQuery.getBingEntity()).toBe(BingEntities.AdminDivision1);\r\n        });\r\n\r\n        it(\"getUrl\", () => {\r\n            let query = new GeocodeQuery(\"Redmond\", \"City\");\r\n            expect(query.getUrl()).toBe(\"https://dev.virtualearth.net/REST/v1/Locations?key=testBingKey&includeEntityTypes=PopulatedPlace&q=Redmond&c=en-US&maxRes=20\");\r\n        });\r\n\r\n        it(\"getUrl with postal code\", () => {\r\n            let query = new GeocodeQuery(\"98052\", \"PostalCode\");\r\n            expect(query.getUrl()).toBe(\"https://dev.virtualearth.net/REST/v1/Locations?key=testBingKey&includeEntityTypes=Postcode,Postcode1,Postcode2,Postcode3,Postcode4&q=98052&c=en-US&maxRes=20\");\r\n        });\r\n\r\n        it(\"getUrl with no Bing entityType\", () => {\r\n            let query = new GeocodeQuery(\"Microsoft Building 17\", \"Place\");\r\n            expect(query.getUrl()).toBe(\"https://dev.virtualearth.net/REST/v1/Locations?key=testBingKey&q=Microsoft Building 17&c=en-US&maxRes=20\");\r\n        });\r\n\r\n        it(\"getUrl county\", () => {\r\n            let query = new GeocodeQuery(\"King\", \"County\");\r\n            expect(query.getUrl()).toBe(\"https://dev.virtualearth.net/REST/v1/Locations?key=testBingKey&adminDistrict=King&c=en-US&maxRes=20\");\r\n        });\r\n\r\n        it(\"getUrl state\", () => {\r\n            let query = new GeocodeQuery(\"Washington\", \"StateOrProvince\");\r\n            expect(query.getUrl()).toBe(\"https://dev.virtualearth.net/REST/v1/Locations?key=testBingKey&adminDistrict=Washington&c=en-US&maxRes=20\");\r\n        });\r\n\r\n        it(\"getUrl state with context\", () => {\r\n            let query = new GeocodeQuery(\"Washington, United States\", \"StateOrProvince\");\r\n            expect(query.getUrl()).toBe(\"https://dev.virtualearth.net/REST/v1/Locations?key=testBingKey&includeEntityTypes=AdminDivision1&q=Washington, United States&c=en-US&maxRes=20\");\r\n        });\r\n\r\n        it(\"getUrl includes country code request\", () => {\r\n            let query = new GeocodeQuery(\"US\", \"Country\");\r\n            expect(query.getUrl()).toBe(\"https://dev.virtualearth.net/REST/v1/Locations?key=testBingKey&includeEntityTypes=Sovereign&q=US&c=en-US&maxRes=20&include=ciso2\");\r\n        });\r\n\r\n        it(\"getUrl does not include country code request when category is not country\", () => {\r\n            let query = new GeocodeQuery(\"WA\", \"StateOrProvince\");\r\n            expect(query.getUrl()).toBe(\"https://dev.virtualearth.net/REST/v1/Locations?key=testBingKey&adminDistrict=WA&c=en-US&maxRes=20\");\r\n        });\r\n    });\r\n\r\n    describe(\"GeocodeBoundaryQueryTests\", () => {\r\n        beforeEach(() => {\r\n            MapUtil.Settings.BingKey = \"testBingKey\";\r\n        });\r\n\r\n        it(\"getUrl\", () => {\r\n            let query = new GeocodeBoundaryQuery(47, 122, \"StateOrProvince\", 1);\r\n            expect(query.getUrl()).toBe(\"https://platform.bing.com/geo/spatial/v1/public/Geodata?key=testBingKey&$format=json&SpatialFilter=GetBoundary(47, 122, 1, \\'AdminDivision1\\', 1, 0, \\'en-US\\', \\'US\\')\");\r\n        });\r\n    });\r\n} "],"sourceRoot":"/source/"}