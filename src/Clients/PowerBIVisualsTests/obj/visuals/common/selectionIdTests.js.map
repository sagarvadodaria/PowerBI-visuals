{"version":3,"sources":["visuals/common/selectionIdTests.ts"],"names":["powerbitests"],"mappings":"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AAsBA,CAACA,SAASA,EAAEA,QAAQA,CAACA,CAACA;QACnEA,IAAIA,IAAIA,GAAGA,WAAWA,CAACA,sBAAsBA,CAACA,SAASA,EAAEA,QAAQA,CAACA,CAACA;QAEnEA,EAAEA,CAACA,sCAAsCA,EAAEA;YACvCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,WAAWA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACnEA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACpCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,WAAWA,CAACA,YAAYA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACjEA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACpCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,WAAWA,CAACA,iBAAiBA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACvEA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;QACxCA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,oCAAoCA,EAAEA;YACrCA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,WAAWA,CAACA,aAAaA,CAACA,SAASA,EAAEA,OAAOA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YAC9EA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,WAAWA,CAACA,sBAAsBA,CAACA,SAASA,EAAEA,QAAQA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACxFA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;QAC1CA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,0CAA0CA,EAAEA;YAC3CA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACpCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACrCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACrCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACpCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACrCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACpCA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;QACzCA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,oCAAoCA,EAAEA;YACrCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACrCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;QAC1CA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,kCAAkCA,EAAEA;YACnCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACrCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;QAC1CA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,mCAAmCA,EAAEA;YACpCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACrCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACtCA,MAAMA,CAACA,GAAGA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;QAC1CA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2CAA2CA,EAAEA;YAC5CA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACvCA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACxCA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACvCA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACvCA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACtCA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,C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","file":"visuals/common/selectionIdTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import SelectionId = powerbi.visuals.SelectionId;\r\n    import SelectionIdBuilder = powerbi.visuals.SelectionIdBuilder;\r\n    import Selector = powerbi.data.Selector;\r\n\r\n    describe(\"SelectionIdBuilder tests\", () => {\r\n        let categoryA = mocks.dataViewScopeIdentity(\"A\");\r\n        let categoryQueryName = \"categoryA\";\r\n        let categoryColumn: powerbi.DataViewCategoryColumn = {\r\n            source: {\r\n                queryName: categoryQueryName,\r\n                displayName: 'testDisplayName'\r\n            },\r\n            identity: [categoryA],\r\n            values: []\r\n        };\r\n        let seriesa = mocks.dataViewScopeIdentity(\"a\");\r\n        let seriesQueryName = \"seriesA\";\r\n\r\n        let seriesColumn: any = {\r\n            source: {\r\n                queryName: seriesQueryName,\r\n                displayName: 'testSeriesDisplayName'\r\n            }\r\n        };\r\n\r\n        let valueColumn: any = { identity: seriesa };\r\n\r\n        let measure1 = \"measure1\";\r\n\r\n        let idA = SelectionId.createWithId(categoryA);\r\n        let ida = SelectionId.createWithId(seriesa);\r\n        let id1 = SelectionId.createWithMeasure(measure1);\r\n        let idAll = SelectionId.createWithIdsAndMeasure(categoryA, seriesa, measure1);\r\n\r\n        it(\"SelectionIdBuilder -- empty\", () => {\r\n            let id = SelectionIdBuilder.builder().createSelectionId();\r\n            expect(id.getSelector()).toBeNull();\r\n            expect(id.getSelectorsByColumn()).toEqual({});\r\n            expect(id.getKey()).toEqual('{\"selector\":null,\"highlight\":false}');\r\n        });\r\n\r\n        it(\"SelectionIdBuilder -- withCategory\", () => {\r\n            let id = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .createSelectionId();\r\n\r\n            expect(id.getSelector()).toEqual(idA.getSelector());\r\n            expect(id.getSelectorsByColumn()).toEqual({ dataMap: { categoryA: idA.getSelector()['data'][0] } });\r\n\r\n        });\r\n\r\n        it(\"SelectionIdBuilder -- withSeries\", () => {\r\n            let id = SelectionIdBuilder.builder()\r\n                .withSeries(seriesColumn, valueColumn)\r\n                .createSelectionId();\r\n\r\n            expect(id.getSelector()).toEqual(ida.getSelector());\r\n            expect(id.getSelectorsByColumn()).toEqual({ dataMap: { seriesA: ida.getSelector()['data'][0] } });\r\n        });\r\n\r\n        it(\"SelectionIdBuilder -- withMeasure\", () => {\r\n            let id = SelectionIdBuilder.builder()\r\n                .withMeasure(measure1)\r\n                .createSelectionId();\r\n\r\n            expect(id.getSelector()).toEqual(id1.getSelector());\r\n            expect(id.getSelectorsByColumn()).toEqual({ metadata: id1.getSelector()['metadata'] });\r\n        });\r\n\r\n        it(\"SelectionIdBuilder -- category, series, and measure\", () => {\r\n            let id = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .withSeries(seriesColumn, valueColumn)\r\n                .withMeasure(measure1)\r\n                .createSelectionId();\r\n            \r\n            let allSelector = idAll.getSelector();\r\n            expect(id.getSelector()).toEqual(allSelector);\r\n            expect(id.getSelectorsByColumn()).toEqual({\r\n                dataMap: {\r\n                    categoryA: allSelector['data'][0],\r\n                    seriesA: allSelector['data'][1]\r\n                },\r\n                metadata: allSelector['metadata']\r\n            });\r\n\r\n        });\r\n\r\n    });\r\n\r\n    describe(\"SelectionId tests\", () => {\r\n        let categoryA = mocks.dataViewScopeIdentity(\"A\");\r\n        let categoryB = mocks.dataViewScopeIdentity(\"B\");\r\n        let seriesa = mocks.dataViewScopeIdentity(\"a\");\r\n        let seriesb = mocks.dataViewScopeIdentity(\"b\");\r\n        let measure1 = \"measure1\";\r\n        let measure2 = \"measure2\";\r\n\r\n        let idA = SelectionId.createWithId(categoryA);\r\n        let idB = SelectionId.createWithId(categoryB);\r\n        let ida = SelectionId.createWithId(seriesa);\r\n        let idb = SelectionId.createWithId(seriesb);\r\n        let id1 = SelectionId.createWithMeasure(measure1);\r\n        let id2 = SelectionId.createWithMeasure(measure2);\r\n        let idAa = SelectionId.createWithIds(categoryA, seriesa);\r\n        let idAb = SelectionId.createWithIds(categoryA, seriesb);\r\n        let idBa = SelectionId.createWithIds(categoryB, seriesa);\r\n        let idA1 = SelectionId.createWithIdAndMeasure(categoryA, measure1);\r\n        let idA2 = SelectionId.createWithIdAndMeasure(categoryA, measure2);\r\n        let idB1 = SelectionId.createWithIdAndMeasure(categoryB, measure1);\r\n\r\n        it(\"SelectionId equals single identifier\", () => {\r\n            expect(idA.equals(SelectionId.createWithId(categoryA))).toBe(true);\r\n            expect(idA.equals(idB)).toBe(false);\r\n            expect(ida.equals(SelectionId.createWithId(seriesa))).toBe(true);\r\n            expect(ida.equals(idb)).toBe(false);\r\n            expect(id1.equals(SelectionId.createWithMeasure(measure1))).toBe(true);\r\n            expect(id1.equals(id2)).toBe(false);\r\n        });\r\n\r\n        it(\"SelectionId equals two identifiers\", () => {\r\n            expect(idAa.equals(SelectionId.createWithIds(categoryA, seriesa))).toBe(true);\r\n            expect(idAa.equals(idAb)).toBe(false);\r\n            expect(idAa.equals(idBa)).toBe(false);\r\n            expect(idAa.equals(idA1)).toBe(false);\r\n            expect(idA1.equals(SelectionId.createWithIdAndMeasure(categoryA, measure1))).toBe(true);\r\n            expect(idA1.equals(idA2)).toBe(false);\r\n            expect(idA1.equals(idB1)).toBe(false);\r\n            expect(idA1.equals(idAa)).toBe(false);\r\n        });\r\n\r\n        it(\"SelectionId equals different identifiers\", () => {\r\n            expect(idA.equals(ida)).toBe(false);\r\n            expect(idA.equals(idAa)).toBe(false);\r\n            expect(idA.equals(idA1)).toBe(false);\r\n            expect(idb.equals(id1)).toBe(false);\r\n            expect(idb.equals(idAb)).toBe(false);\r\n            expect(id1.equals(idA)).toBe(false);\r\n            expect(id1.equals(idA1)).toBe(false);\r\n        });\r\n\r\n        it(\"SelectionId includes with category\", () => {\r\n            expect(idA.includes(idA)).toBe(true);\r\n            expect(idA.includes(idAb)).toBe(true);\r\n            expect(idA.includes(idA1)).toBe(true);\r\n            expect(idA.includes(idB)).toBe(false);\r\n            expect(idA.includes(ida)).toBe(false);\r\n            expect(idA.includes(id1)).toBe(false);\r\n        });\r\n\r\n        it(\"SelectionId includes with series\", () => {\r\n            expect(ida.includes(ida)).toBe(true);\r\n            expect(ida.includes(idAa)).toBe(true);\r\n            expect(ida.includes(idA)).toBe(false);\r\n            expect(ida.includes(idb)).toBe(false);\r\n            expect(ida.includes(id1)).toBe(false);\r\n        });\r\n\r\n        it(\"SelectionId includes with measure\", () => {\r\n            expect(id1.includes(id1)).toBe(true);\r\n            expect(id1.includes(idA1)).toBe(true);\r\n            expect(id1.includes(idA)).toBe(false);\r\n            expect(id1.includes(ida)).toBe(false);\r\n            expect(id1.includes(id2)).toBe(false);\r\n        });\r\n\r\n        it(\"SelectionId includes with two identifiers\", () => {\r\n            expect(idAa.includes(idAa)).toBe(true);\r\n            expect(idAa.includes(idA1)).toBe(false);\r\n            expect(idAa.includes(idA)).toBe(false);\r\n            expect(idA1.includes(idA1)).toBe(true);\r\n            expect(idA1.includes(idA)).toBe(true);\r\n            expect(idAa.includes(idBa)).toBe(false);\r\n            expect(idA1.includes(idB1)).toBe(false);\r\n        });\r\n\r\n        it(\"SelectionId createNull\", () => {\r\n            let selectionId = SelectionId.createNull();\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: null, highlight: false }));\r\n        });\r\n\r\n        it(\"SelectionId createWithId\", () => {\r\n            let selectionId = SelectionId.createWithId(categoryA);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA] }), highlight: false }));\r\n        });\r\n\r\n        it(\"SelectionId createWithMeasure\", () => {\r\n            let selectionId = SelectionId.createWithMeasure(measure1);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ metadata: measure1 }), highlight: false }));\r\n        });\r\n\r\n        it(\"SelectionId createWithIdAndMeasure\", () => {\r\n            let selectionId = SelectionId.createWithIdAndMeasure(categoryA, measure1);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA], metadata: measure1 }), highlight: false }));\r\n        });\r\n\r\n        it(\"SelectionId createWithIds\", () => {\r\n            let selectionId = SelectionId.createWithIds(categoryA, seriesa);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA, seriesa] }), highlight: false }));\r\n        });\r\n\r\n        it(\"SelectionId createWithIds: with duplicates\", () => {\r\n            let selectionId = SelectionId.createWithIds(categoryA, categoryA);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA] }), highlight: false }));\r\n        });\r\n\r\n        it(\"SelectionId createWithIdsAndMeasure\", () => {\r\n            let selectionId = SelectionId.createWithIdsAndMeasure(categoryA, seriesa, measure1);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA, seriesa], metadata: measure1 }), highlight: false }));\r\n            selectionId = SelectionId.createWithIdsAndMeasure(undefined, seriesa, measure1);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [seriesa], metadata: measure1 }), highlight: false }));\r\n            selectionId = SelectionId.createWithIdsAndMeasure(categoryA, undefined, measure1);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA], metadata: measure1 }), highlight: false }));\r\n            selectionId = SelectionId.createWithIdsAndMeasure(categoryA, seriesa, undefined);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA, seriesa] }), highlight: false }));\r\n        });\r\n\r\n        it(\"SelectionId createWithIdsAndMeasure: with duplicates\", () => {\r\n            let selectionId = SelectionId.createWithIdsAndMeasure(categoryA, categoryA, measure1);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA], metadata: measure1 }), highlight: false }));\r\n        });\r\n\r\n        it(\"SelectionId createWithHighlight\", () => {\r\n            let selectionId = SelectionId.createWithIdsAndMeasure(categoryA, seriesa, measure1);\r\n            expect(selectionId.getKey()).toEqual(JSON.stringify({ selector: Selector.getKey({ data: [categoryA, seriesa], metadata: measure1 }), highlight: false }));\r\n            let selectionIdWithHighlight = SelectionId.createWithHighlight(selectionId);\r\n            expect(selectionIdWithHighlight.getSelector()).toBe(selectionId.getSelector());\r\n            expect(selectionIdWithHighlight.getKey()).not.toBe(selectionId.getKey());\r\n        });\r\n\r\n        it(\"SelectionId creates using undefined\", () => {\r\n            let nullKey = SelectionId.createNull().getKey();\r\n            let ids = SelectionId.createWithIdAndMeasure(undefined, undefined);\r\n            expect(ids.getKey()).toEqual(nullKey);\r\n            let idAndMeasure = SelectionId.createWithIdAndMeasure(undefined, undefined);\r\n            expect(idAndMeasure.getKey()).toEqual(nullKey);\r\n            let idsAndMeasure = SelectionId.createWithIdsAndMeasure(undefined, undefined, undefined);\r\n            expect(idsAndMeasure.getKey()).toEqual(nullKey);\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}