{"version":3,"sources":["helpers/kpiHelper.ts"],"names":["powerbitests","powerbitests.kpiHelper","powerbitests.kpiHelper.buildDataViewForRedTrend","powerbitests.kpiHelper.buildDefaultDataViewMetadata","powerbitests.kpiHelper.buildDataViewCategoricalForRedTrend","powerbitests.kpiHelper.buildDataViewForGreenTrend","powerbitests.kpiHelper.buildDataViewForYellowTrend","powerbitests.kpiHelper.buildDataViewForNoGoalTrend","powerbitests.kpiHelper.buildDataViewWithMissingIndicator","powerbitests.kpiHelper.buildDataViewWithMissingIndicatorWITHGoal","powerbitests.kpiHelper.buildDataViewWithMissingTrendline","powerbitests.kpiHelper.buildDataViewWithMissingTrendlineWITHGoal","powerbitests.kpiHelper.buildDataViewWithMissingTrendlineAndIndicator","powerbitests.kpiHelper.buildDataViewWithMissingTrendlineAndIndicatorBUTWithGoals","powerbitests.kpiHelper.buildDataViewMetadataForNoGoal","powerbitests.kpiHelper.buildDataViewMetadata","powerbitests.kpiHelper.buildDataViewCategoricalForNoGoal","powerbitests.kpiHelper.buildDataViewCategorical","powerbitests.kpiHelper.buildDataViewForGreenNoTrend","powerbitests.kpiHelper.buildDataViewMetadataForNoTrend","powerbitests.kpiHelper.buildDataViewCategoricalForGreenNoTrend","powerbitests.kpiHelper.buildDataViewForRedNoTrend"],"mappings":"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","file":"helpers/kpiHelper.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests.kpiHelper {\r\n    import ValueType = powerbi.ValueType;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n\r\n    export function buildDataViewForRedTrend(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDefaultDataViewMetadata();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategoricalForRedTrend();\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    function buildDefaultDataViewMetadata(): powerbi.DataViewMetadata {\r\n        return buildDataViewMetadata(true, true, true, false);\r\n    }\r\n\r\n    function buildDataViewCategoricalForRedTrend(): powerbi.DataViewCategorical {\r\n        let dataViewMetadata = buildDefaultDataViewMetadata();\r\n        let dataViewCategorical = {\r\n            categories: [{\r\n                source: dataViewMetadata.columns[0],\r\n                values: [1, 2, 3, 4, 5],\r\n                identity: [\r\n                    mocks.dataViewScopeIdentity(1),\r\n                    mocks.dataViewScopeIdentity(2),\r\n                    mocks.dataViewScopeIdentity(3),\r\n                    mocks.dataViewScopeIdentity(4),\r\n                    mocks.dataViewScopeIdentity(5)\r\n                ],\r\n            }],\r\n            values: DataViewTransform.createValueColumns([\r\n                {\r\n                    source: dataViewMetadata.columns[0],\r\n                    values: [1, 2, 3, 4, 5]\r\n                },\r\n                {\r\n                    source: dataViewMetadata.columns[1],\r\n                    values: [20, 10, 30, 15, 12]\r\n                },\r\n                {\r\n                    source: dataViewMetadata.columns[2],\r\n                    values: [20, 20, 20, 20, 20]\r\n                }])\r\n        };\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    export function buildDataViewForGreenTrend(): powerbi.DataView {\r\n        let dataView = buildDataViewForRedTrend();\r\n        dataView.categorical.values[1].values = [20, 10, 30, 15, 25];\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildDataViewForYellowTrend(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadata(true, true, true, true);\r\n\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategorical(\r\n            dataViewMetadata.columns[0], dataViewMetadata.columns[1], dataViewMetadata.columns[2], dataViewMetadata.columns[3]);\r\n\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildDataViewForNoGoalTrend(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadataForNoGoal();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategoricalForNoGoal();\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildDataViewWithMissingIndicator(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadataForNoGoal();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategoricalForNoGoal();\r\n\r\n        dataViewMetadata.columns.pop();\r\n        dataViewCategorical.values.pop();\r\n\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n    \r\n    export function buildDataViewWithMissingIndicatorWITHGoal(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadata(true, false, true, true);\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategorical(dataViewMetadata.columns[0], null, dataViewMetadata.columns[1], dataViewMetadata.columns[2]);\r\n\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildDataViewWithMissingTrendline(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadata(false, true, false, false);\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategorical(null, dataViewMetadata.columns[0], null, null);\r\n\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildDataViewWithMissingTrendlineWITHGoal(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadata(false, true, true, true);\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategorical(null, dataViewMetadata.columns[0], dataViewMetadata.columns[1], dataViewMetadata.columns[2]);\r\n\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildDataViewWithMissingTrendlineAndIndicator(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadata(false, false, false, false);\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategorical(null, null, null, null);\r\n\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildDataViewWithMissingTrendlineAndIndicatorBUTWithGoals(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadata(false, false, true, true);\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategorical(null, null, dataViewMetadata.columns[0], dataViewMetadata.columns[1]);\r\n\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    function buildDataViewMetadataForNoGoal(): powerbi.DataViewMetadata {\r\n        return buildDataViewMetadata(true, true, false, false);\r\n    }\r\n\r\n    function buildDataViewMetadata(trendline: boolean, indicator: boolean, lowGoal: boolean, highGoal: boolean): powerbi.DataViewMetadata {\r\n        let columns: powerbi.DataViewMetadataColumn[] = [];\r\n\r\n        if (trendline) {\r\n            columns.push({ displayName: \"TrendLine\", type: ValueType.fromDescriptor({ text: true }), roles: { \"TrendLine\": true } });\r\n        }\r\n\r\n        if (indicator) {\r\n            columns.push({ displayName: \"Indicator\", isMeasure: true, type: ValueType.fromDescriptor({ numeric: true }), roles: { \"Indicator\": true } });\r\n        }\r\n\r\n        if (lowGoal) {\r\n            columns.push({ displayName: \"Goal\", isMeasure: true, roles: { \"Goal\": true } });\r\n        }\r\n\r\n        if (highGoal) {\r\n            columns.push({ displayName: \"Goal\", isMeasure: true, roles: { \"Goal\": true } });\r\n        }\r\n\r\n        return {\r\n            columns: columns\r\n        };\r\n    }\r\n\r\n    function buildDataViewCategoricalForNoGoal(): powerbi.DataViewCategorical {\r\n        let dataViewMetadata = buildDataViewMetadataForNoGoal();\r\n        let dataViewCategorical = {\r\n            categories: [{\r\n                source: dataViewMetadata.columns[0],\r\n                values: [1, 2, 3, 4, 5],\r\n                identity: [\r\n                    mocks.dataViewScopeIdentity(1),\r\n                    mocks.dataViewScopeIdentity(2),\r\n                    mocks.dataViewScopeIdentity(3),\r\n                    mocks.dataViewScopeIdentity(4),\r\n                    mocks.dataViewScopeIdentity(5)\r\n                ],\r\n            }],\r\n            values: DataViewTransform.createValueColumns([\r\n                {\r\n                    source: dataViewMetadata.columns[0],\r\n                    values: [1, 2, 3, 4, 5]\r\n                },\r\n                {\r\n                    source: dataViewMetadata.columns[1],\r\n                    values: [20, 10, 30, 15, 12]\r\n                }])\r\n        };\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    function buildDataViewCategorical(trendlineMetaDataColumn: powerbi.DataViewMetadataColumn, indicatorMetaDataColumn: powerbi.DataViewMetadataColumn,\r\n        lowGoalMetaDataColumn: powerbi.DataViewMetadataColumn, highGoalMetaDataColumn: powerbi.DataViewMetadataColumn): powerbi.DataViewCategorical {\r\n\r\n        let dataViewValueColumns: powerbi.DataViewValueColumn[] = [];\r\n\r\n        let sourceColumn: powerbi.DataViewMetadataColumn;\r\n\r\n        if (trendlineMetaDataColumn) {\r\n            dataViewValueColumns.push({\r\n                source: trendlineMetaDataColumn,\r\n                values: [1, 2, 3, 4, 5]\r\n            });\r\n\r\n            sourceColumn = trendlineMetaDataColumn;\r\n        }\r\n\r\n        if (indicatorMetaDataColumn) {\r\n            dataViewValueColumns.push({\r\n                source: indicatorMetaDataColumn,\r\n                values: [20, 10, 30, 15, 12]\r\n            });\r\n\r\n            if (!sourceColumn) {\r\n                sourceColumn = indicatorMetaDataColumn;\r\n            }\r\n        }\r\n\r\n        if (lowGoalMetaDataColumn) {\r\n            dataViewValueColumns.push({\r\n                source: lowGoalMetaDataColumn,\r\n                values: [1, 1, 1, 1, 1]\r\n            });\r\n        }\r\n\r\n        if (highGoalMetaDataColumn) {\r\n            dataViewValueColumns.push({\r\n                source: highGoalMetaDataColumn,\r\n                values: [100, 200, 300, 400, 500]\r\n            });\r\n        }\r\n\r\n        let source: powerbi.DataViewMetadataColumn;\r\n        let values: number[];\r\n        let identity: powerbi.DataViewScopeIdentity[];\r\n\r\n        if (trendlineMetaDataColumn && indicatorMetaDataColumn) {\r\n            source = sourceColumn;\r\n            values = [1, 2, 3, 4, 5];\r\n            identity = [\r\n                mocks.dataViewScopeIdentity(1),\r\n                mocks.dataViewScopeIdentity(2),\r\n                mocks.dataViewScopeIdentity(3),\r\n                mocks.dataViewScopeIdentity(4),\r\n                mocks.dataViewScopeIdentity(5)\r\n            ];\r\n        }\r\n\r\n        let dataViewCategorical = {\r\n            categories: [{\r\n                source: source,\r\n                values: values,\r\n                identity: identity,\r\n            }],\r\n            values: DataViewTransform.createValueColumns(dataViewValueColumns)\r\n        };\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    export function buildDataViewForGreenNoTrend(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDataViewMetadataForNoTrend();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDataViewCategoricalForGreenNoTrend();\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    function buildDataViewMetadataForNoTrend(): powerbi.DataViewMetadata {\r\n        return buildDataViewMetadata(false, true, true, false);\r\n    }\r\n\r\n    function buildDataViewCategoricalForGreenNoTrend(): powerbi.DataViewCategorical {\r\n        let dataViewMetadata = buildDataViewMetadataForNoTrend();\r\n        let dataViewCategorical = {\r\n            values: DataViewTransform.createValueColumns([{\r\n                source: dataViewMetadata.columns[0],\r\n                values: [20]\r\n            },\r\n                {\r\n                    source: dataViewMetadata.columns[1],\r\n                    values: [15]\r\n                }])\r\n        };\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    export function buildDataViewForRedNoTrend(): powerbi.DataView {\r\n        let dataView = buildDataViewForGreenNoTrend();\r\n        dataView.categorical.values[0].values = [10];\r\n\r\n        return dataView;\r\n    }\r\n}"],"sourceRoot":"/source/"}