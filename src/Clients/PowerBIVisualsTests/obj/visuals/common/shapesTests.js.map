{"version":3,"sources":["visuals/common/shapesTests.ts"],"names":["powerbitests","powerbitests.AreRectsEqual"],"mappings":"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YACpCA,IAAIA,aAAaA,GAAGA,MAAMA,CAACA,SAASA,CAACA,OAAOA,CAACA,CAACA;YAC9CA,IAAIA,SAASA,GAAmBA,EAAEA,CAACA,EAAEA,OAAOA,CAACA,CAACA,GAAGA,aAAaA,EAAEA,CAACA,EAAEA,OAAOA,CAACA,CAACA,GAAGA,aAAaA,EAAEA,CAACA;YAC/FA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YACpCA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;QACxCA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,0BAA0BA,EAAEA;YAC3BA,OAAOA,GAAGA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA;YACzBA,OAAOA,GAAGA,MAAMA,CAACA,SAASA,CAACA,OAAOA,CAACA,CAACA;YACpCA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC1BA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QAC9BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6BAA6BA,EAAEA;YAC9BA,OAAOA,GAAGA,EAAEA,CAACA,EAAEA,GAAGA,EAAEA,CAACA,EAAEA,GAAGA,EAAEA,CAACA;YAC7BA,OAAOA,GAAGA,MAAMA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA;YACxCA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YAClCA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;QACvCA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,8BAA8BA,EAAEA;YAC/BA,OAAOA,GAAGA,E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","file":"visuals/common/shapesTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import Shapes = powerbi.visuals.shapes;\r\n    import Point = powerbi.visuals.shapes.Point;\r\n    import Size = powerbi.visuals.shapes.Size;\r\n    import Rect = powerbi.visuals.shapes.Rect;\r\n    import Thickness = powerbi.visuals.shapes.Thickness;\r\n    import Vector = powerbi.visuals.shapes.Vector;\r\n    import IRect = powerbi.visuals.IRect;\r\n\r\n    describe(\"Point tests\", () => {\r\n\r\n        let pointA;\r\n\r\n        it(\"offset with positive value\", () => {\r\n            let pointA: Shapes.IPoint = { x: 10, y: 10 };\r\n            let offset = Point.offset(pointA, 20, 25);\r\n            expect(offset.x).toBe(30);\r\n            expect(offset.y).toBe(35);\r\n        });\r\n\r\n        it(\"offset with negative value\", () => {\r\n            let pointA: Shapes.IPoint = { x: 100, y: 100 };\r\n            let offset = Point.offset(pointA, -20, -25);\r\n            expect(offset.x).toBe(80);\r\n            expect(offset.y).toBe(75);\r\n        });\r\n\r\n        it(\"Check equals - return true\", () => {\r\n            let pointA: Shapes.IPoint = { x: 100, y: 100 };\r\n            let pointB: Shapes.IPoint = { x: 100, y: 100 };\r\n            let offset = Point.equals(pointA, pointB);\r\n            expect(offset).toBe(true);\r\n        });\r\n\r\n        it(\"Check equals - return false\", () => {\r\n            let pointA: Shapes.IPoint = { x: 100, y: 100 };\r\n            let pointB: Shapes.IPoint = { x: 50, y: 100 };\r\n            let offset = Point.equals(pointA, pointB);\r\n            expect(offset).toBe(false);\r\n        });\r\n\r\n        it(\"Check clone\", () => {\r\n            let point: Shapes.IPoint = { x: 100, y: 100 };\r\n            let clonePoint = Point.clone(point);\r\n            expect(clonePoint.x).toBe(point.x);\r\n            expect(clonePoint.y).toBe(point.y);\r\n        });\r\n\r\n        it(\"Point - To String\", () => {\r\n            let point: Shapes.IPoint = { x: 100, y: 100 };\r\n            let pointToString = Point.toString(point);\r\n            expect(pointToString).toBe(\"{x:100, y:100}\");\r\n        });\r\n\r\n        it(\"Check Serialize\", () => {\r\n            let point: Shapes.IPoint = { x: 200, y: 200 };\r\n            let pointSerialize = Point.serialize(point);\r\n            expect(pointSerialize).toBe(\"200,200\");\r\n        });\r\n\r\n        it(\"Check Distance \", () => {\r\n            let pointA: Shapes.IPoint = { x: 200, y: 200 };\r\n            let pointB: Shapes.IPoint = { x: 250, y: 300 };\r\n            let distance = Point.getDistance(pointA, pointB);\r\n            let calculatedDistance = Math.sqrt(Math.pow(pointB.x - pointA.x, 2) + (Math.pow(pointB.y - pointA.y, 2)));\r\n            expect(distance).toBe(calculatedDistance);\r\n        });\r\n\r\n        it(\"Check Distance (null values)\", () => {\r\n            pointA = null;\r\n            let pointB: Shapes.IPoint = { x: 150, y: 200 };\r\n            let distance = Point.getDistance(pointA, pointB);\r\n            expect(distance).toBe(null);\r\n        });\r\n\r\n        it(\"Check zero Distance \", () => {\r\n            let pointA: Shapes.IPoint = { x: 200, y: 200 };\r\n            let pointB: Shapes.IPoint = { x: 200, y: 200 };\r\n            let distance = Point.getDistance(pointA, pointB);\r\n            expect(distance).toBe(0);\r\n        });\r\n\r\n        it(\"Equals (static) - return true \", () => {\r\n            let pointA: Shapes.IPoint = { x: 200, y: 200 };\r\n            let pointB: Shapes.IPoint = { x: 200, y: 200 };\r\n            let arePointsEqual = Point.equals(pointA, pointB);\r\n            expect(arePointsEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Equals (static) - point A is null \", () => {\r\n            let pointB: Shapes.IPoint = { x: 200, y: 200 };\r\n            let arePointsEqual = Point.equals(null, pointB);\r\n            expect(arePointsEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - point B is null \", () => {\r\n            let pointA: Shapes.IPoint = { x: 200, y: 200 };\r\n            let arePointsEqual = Point.equals(pointA, null);\r\n            expect(arePointsEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - points are null \", () => {\r\n            let arePointsEqual = Point.equals(null, null);\r\n            expect(arePointsEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals with Precision - return true \", () => {\r\n            let pointA: Shapes.IPoint = { x: 200.23, y: 200.32 };\r\n            let pointB: Shapes.IPoint = { x: 200.23, y: 200.32 };\r\n            let arePointsEqual = Shapes.Point.equalWithPrecision(pointA, pointB);\r\n            expect(arePointsEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Parse Point (from string no default value)\", () => {\r\n            let pointStr = \"200,215\";\r\n            let pointA = Point.parsePoint(pointStr);\r\n            expect(pointA.x).toBe(200);\r\n            expect(pointA.y).toBe(215);\r\n        });\r\n\r\n        it(\"Parse Point (from string,2 points)\", () => {\r\n            let pointStr = \"190,220\";\r\n            let pointA = Point.parsePoint(pointStr);\r\n            expect(pointA.x).toBe(190);\r\n            expect(pointA.y).toBe(220);\r\n        });\r\n\r\n        it(\"Parse Point (from string,2 points (default value ignored)\", () => {\r\n            let pointStr = \"190,220\";\r\n            let defaultValue: Shapes.IPoint = { x: 110, y: 100 };\r\n            let pointA = Point.parsePoint(pointStr, defaultValue);\r\n            expect(pointA.x).toBe(190);\r\n            expect(pointA.y).toBe(220);\r\n        });\r\n\r\n        it(\"Parse Point (from empty string)\", () => {\r\n            let pointStr = \"\";\r\n            let pointA = Point.parsePoint(pointStr);\r\n            expect(pointA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Point - from empty string (default value taken)\", () => {\r\n            let pointStr = \"\";\r\n            let defaultValue: Shapes.IPoint = { x: 110, y: 100 };\r\n            let pointA = Point.parsePoint(pointStr, defaultValue);\r\n            expect(pointA.x).toBe(defaultValue.x);\r\n            expect(pointA.y).toBe(defaultValue.y);\r\n        });\r\n\r\n        it(\"Parse Point (from int array)\", () => {\r\n            let intArray = [190, 220];\r\n            let pointA = Point.parsePoint(intArray);\r\n            expect(pointA.x).toBe(190);\r\n            expect(pointA.y).toBe(220);\r\n        });\r\n\r\n        it(\"Parse Point - from int array (default value ignored)\", () => {\r\n            let intArray = [190, 220];\r\n            let defaultValue: Shapes.IPoint = { x: 110, y: 100 };\r\n            let pointA = Point.parsePoint(intArray, defaultValue);\r\n            expect(pointA.x).toBe(190);\r\n            expect(pointA.y).toBe(220);\r\n        });\r\n\r\n        it(\"Parse Point (int with more than 2 elements)\", () => {\r\n            let intArray = [190, 220, 200, 210];\r\n            let pointA = Point.parsePoint(intArray);\r\n            expect(pointA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Point (int with more than 2 elements (default value taken)\", () => {\r\n            let intArray = [190, 220, 200, 210];\r\n            let defaultValue: Shapes.IPoint = { x: 110, y: 100 };\r\n            pointA = Point.parsePoint(intArray, defaultValue);\r\n            expect(pointA.x).toBe(110);\r\n            expect(pointA.y).toBe(100);\r\n        });\r\n\r\n        it(\"Parse Point (int with one element)\", () => {\r\n            let intArray = [190];\r\n            let pointA = Point.parsePoint(intArray);\r\n            expect(pointA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Point - int with one element (default value taken)\", () => {\r\n            let intArray = [190];\r\n            let defaultValue: Shapes.IPoint = { x: 110, y: 100 };\r\n            let pointA = Point.parsePoint(intArray, defaultValue);\r\n            expect(pointA.x).toBe(defaultValue.x);\r\n            expect(pointA.y).toBe(defaultValue.y);\r\n        });\r\n\r\n        it(\"Parse Point (int with empty array)\", () => {\r\n            let intArray = [];\r\n            let pointA = Point.parsePoint(intArray);\r\n            expect(pointA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Point (int with empty array (default value taken)\", () => {\r\n            let intArray = [];\r\n            let defaultValue: Shapes.IPoint = { x: 110, y: 100 };\r\n            let pointA = Point.parsePoint(intArray, defaultValue);\r\n            expect(pointA.x).toBe(110);\r\n            expect(pointA.y).toBe(100);\r\n        });\r\n\r\n        it(\"Parse Point  - not string and not array)\", () => {\r\n            let num: boolean = true;\r\n            let pointA = Point.parsePoint(num);\r\n            expect(pointA).toBe(null);\r\n\r\n        });\r\n\r\n        it(\"Parse Point - not string and not array (default value taken)\", () => {\r\n            let num: boolean = true;\r\n            let defaultValue: Shapes.IPoint = { x: 110, y: 100 };\r\n            let pointA = Point.parsePoint(num, defaultValue);\r\n            expect(pointA.x).toBe(110);\r\n            expect(pointA.y).toBe(100);\r\n        });\r\n\r\n        it(\"Parse Point - getting null\", () => {\r\n            let pointA = Point.parsePoint(null);\r\n            expect(pointA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Point - getting null (default value taken)\", () => {\r\n            let defaultValue: Shapes.IPoint = { x: 110, y: 100 };\r\n            let pointA = Point.parsePoint(null, defaultValue);\r\n            expect(pointA.x).toBe(110);\r\n            expect(pointA.y).toBe(100);\r\n        });\r\n    });\r\n\r\n    describe(\"Size Tests\", () => {\r\n\r\n        it(\"Is Empty - true\", () => {\r\n            let size: Shapes.ISize = { width: 0, height: 0 };\r\n            let isEmpty = Size.isEmpty(size);\r\n            expect(isEmpty).toBe(true);\r\n        });\r\n\r\n        it(\"Is Empty - false\", () => {\r\n            let size: Shapes.ISize = { width: 50, height: 50 };\r\n            let isEmpty = Size.isEmpty(size);\r\n            expect(isEmpty).toBe(false);\r\n        });\r\n\r\n        it(\"Check equals - return true\", () => {\r\n            let sizeA: Shapes.ISize = { width: 120, height: 100 };\r\n            let sizeB: Shapes.ISize = { width: 120, height: 100 };\r\n            let sizeEquals = Size.equals(sizeA, sizeB);\r\n            expect(sizeEquals).toBe(true);\r\n        });\r\n\r\n        it(\"Check equals - return false\", () => {\r\n            let sizeA: Shapes.ISize = { width: 120, height: 100 };\r\n            let sizeB: Shapes.ISize = { width: 120, height: 150 };\r\n            let sizeEquals = Size.equals(sizeA, sizeB);\r\n            expect(sizeEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Check equals - null\", () => {\r\n            let size: Shapes.ISize = { width: 120, height: 100 };\r\n            let sizeEquals = Size.equals(size, null);\r\n            expect(sizeEquals).toBe(false);\r\n        });\r\n\r\n        it(\"clone\", () => {\r\n            let size: Shapes.ISize = { width: 120, height: 100 };\r\n            let sizeCloned = Size.clone(size);\r\n            expect(sizeCloned.width).toBe(size.width);\r\n            expect(sizeCloned.height).toBe(size.height);\r\n        });\r\n\r\n        it(\"clone - null\", () => {\r\n            let size = null;\r\n            let sizeCloned = Size.clone(size);\r\n            expect(sizeCloned).toBe(null);\r\n        });\r\n\r\n        it(\"inflate - Positive values\", () => {\r\n            let size: Shapes.ISize = { width: 120, height: 100 };\r\n            let padding: Shapes.IThickness = { left: 5, top: 10, right: 5, bottom: 10 };\r\n            let sizeInflated = Size.inflate(size, padding);\r\n            expect(sizeInflated.width).toBe(130);\r\n            expect(sizeInflated.height).toBe(120);\r\n        });\r\n\r\n        it(\"inflate - Zero values\", () => {\r\n            let size: Shapes.ISize = { width: 120, height: 100 };\r\n            let padding: Shapes.IThickness = { left: 0, top: 0, right: 0, bottom: 0 };\r\n            let sizeInflated = Size.inflate(size, padding);\r\n            expect(sizeInflated.width).toBe(size.width);\r\n            expect(sizeInflated.height).toBe(size.height);\r\n        });\r\n\r\n        it(\"deflate - Positive values\", () => {\r\n            let size: Shapes.ISize = { width: 120, height: 100 };\r\n            let padding: Shapes.IThickness = { left: 5, top: 10, right: 5, bottom: 10 };\r\n            let sizeDeflated = Size.deflate(size, padding);\r\n            expect(sizeDeflated.width).toBe(110);\r\n            expect(sizeDeflated.height).toBe(80);\r\n        });\r\n\r\n        it(\"deflate - Zero values\", () => {\r\n            let size: Shapes.ISize = { width: 120, height: 100 };\r\n            let padding: Shapes.IThickness = { left: 0, top: 0, right: 0, bottom: 0 };\r\n            let sizeDeflated = Size.deflate(size, padding);\r\n            expect(sizeDeflated.width).toBe(size.width);\r\n            expect(sizeDeflated.height).toBe(size.height);\r\n        });\r\n\r\n        it(\"Combine 2 sizes\", () => {\r\n            let sizeA: Shapes.ISize = { width: 70, height: 110 };\r\n            let sizeB: Shapes.ISize = { width: 30, height: 120 };\r\n            Size.combine(sizeA, sizeB);\r\n            let newSize: Shapes.ISize = { width: 70, height: 120 };\r\n            expect(newSize.width).toBe(70);\r\n            expect(newSize.height).toBe(120);\r\n        });\r\n\r\n        it(\"Combine 2 sizes (A contains B)\", () => {\r\n            let sizeA: Shapes.ISize = { width: 150, height: 120 };\r\n            let sizeB: Shapes.ISize = { width: 80, height: 110 };\r\n            let newSize = Size.combine(sizeA, sizeB);\r\n            expect(newSize.width).toBe(sizeA.width);\r\n            expect(newSize.height).toBe(sizeA.height);\r\n        });\r\n\r\n        it(\"Combine 2 sizes (B contains A)\", () => {\r\n            let sizeA: Shapes.ISize = { width: 150, height: 120 };\r\n            let sizeB: Shapes.ISize = { width: 180, height: 170 };\r\n            let newSize = Size.combine(sizeA, sizeB);\r\n            expect(newSize.width).toBe(sizeB.width);\r\n            expect(newSize.height).toBe(sizeB.height);\r\n        });\r\n\r\n        it(\"Combine 2 sizes (one empty)\", () => {\r\n            let sizeA: Shapes.ISize = { width: 110, height: 120 };\r\n            let sizeB: Shapes.ISize = { width: 0, height: 0 };\r\n            let newSize = Size.combine(sizeA, sizeB);\r\n            expect(newSize.width).toBe(sizeA.width);\r\n            expect(newSize.height).toBe(sizeA.height);\r\n        });\r\n\r\n        it(\"To Rect\", () => {\r\n            let size: Shapes.ISize = { width: 120, height: 100 };\r\n            let sizeToRect = Size.toRect(size);\r\n            expect(sizeToRect.left).toBe(0);\r\n            expect(sizeToRect.top).toBe(0);\r\n            expect(sizeToRect.width).toBe(120);\r\n            expect(sizeToRect.height).toBe(100);\r\n        });\r\n\r\n        it(\"To string\", () => {\r\n            let size: Shapes.ISize = { width: 150, height: 30 };\r\n            let sizeToString = Size.toString(size);\r\n            expect(sizeToString).toBe(\"{width:150, height:30}\");\r\n        });\r\n\r\n        it(\"Equals (static) - return true \", () => {\r\n            let SizeA: Shapes.ISize = { width: 200, height: 200 };\r\n            let SizeB: Shapes.ISize = { width: 200, height: 200 };\r\n            let areSizesEqual = Size.equals(SizeA, SizeB);\r\n            expect(areSizesEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Equals (static) - size A is null \", () => {\r\n            let SizeB: Shapes.ISize = { width: 200, height: 200 };\r\n            let areSizesEqual = Size.equals(null, SizeB);\r\n            expect(areSizesEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - size B is null \", () => {\r\n            let SizeA: Shapes.ISize = { width: 200, height: 200 };\r\n            let areSizesEqual = Size.equals(SizeA, null);\r\n            expect(areSizesEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - sizes are null \", () => {\r\n            let areSizesEqual = Size.equals(null, null);\r\n            expect(areSizesEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals with Precision - return true \", () => {\r\n            let SizeA: Shapes.ISize = { width: 200.23, height: 200.32 };\r\n            let SizeB: Shapes.ISize = { width: 200.23, height: 200.32 };\r\n            let areSizesEqual = Shapes.Size.equalWithPrecision(SizeA, SizeB);\r\n            expect(areSizesEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Parse Size (from string no default value)\", () => {\r\n            let sizeStr = \"200,215\";\r\n            let sizeA = Size.parseSize(sizeStr);\r\n            expect(sizeA.width).toBe(200);\r\n            expect(sizeA.height).toBe(215);\r\n        });\r\n\r\n        it(\"Parse Size (from string,2 points)\", () => {\r\n            let sizeStr = \"190,220\";\r\n            let sizeA = Size.parseSize(sizeStr);\r\n            expect(sizeA.width).toBe(190);\r\n            expect(sizeA.height).toBe(220);\r\n        });\r\n\r\n        it(\"Parse Size - from string,2 points (default value ignored)\", () => {\r\n            let sizeStr = \"190,220\";\r\n            let defaultValue: Shapes.ISize = { width: 110, height: 100 };\r\n            let sizeA = Size.parseSize(sizeStr, defaultValue);\r\n            expect(sizeA.width).toBe(190);\r\n            expect(sizeA.height).toBe(220);\r\n        });\r\n\r\n        it(\"Parse Size (from empty string)\", () => {\r\n            let sizeStr = \"\";\r\n            let sizeA = Size.parseSize(sizeStr);\r\n            expect(sizeA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Size - from empty string (default value taken)\", () => {\r\n            let sizeStr = \"\";\r\n            let defaultValue: Shapes.ISize = { width: 110, height: 100 };\r\n            let sizeA = Size.parseSize(sizeStr, defaultValue);\r\n            expect(sizeA.width).toBe(110);\r\n            expect(sizeA.height).toBe(100);\r\n        });\r\n\r\n        it(\"Parse Size (from int array)\", () => {\r\n            let intArray = [190, 220];\r\n            let sizeA = Size.parseSize(intArray);\r\n            expect(sizeA.width).toBe(190);\r\n            expect(sizeA.height).toBe(220);\r\n        });\r\n\r\n        it(\"Parse Size - from int array (default value ignored)\", () => {\r\n            let intArray = [190, 220];\r\n            let defaultValue: Shapes.ISize = { width: 110, height: 100 };\r\n            let sizeA = Size.parseSize(intArray, defaultValue);\r\n            expect(sizeA.width).toBe(190);\r\n            expect(sizeA.height).toBe(220);\r\n        });\r\n\r\n        it(\"Parse Size (int with more than 2 elements)\", () => {\r\n            let intArray = [190, 220, 200, 210];\r\n            let sizeA = Size.parseSize(intArray);\r\n            expect(sizeA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Size (int with more than 2 elements (default value taken)\", () => {\r\n            let intArray = [190, 220, 200, 210];\r\n            let defaultValue: Shapes.ISize = { width: 110, height: 100 };\r\n            let sizeA = Size.parseSize(intArray, defaultValue);\r\n            expect(sizeA.width).toBe(defaultValue.width);\r\n            expect(sizeA.height).toBe(defaultValue.height);\r\n        });\r\n\r\n        it(\"Parse Size (int with one element)\", () => {\r\n            let intArray = [190];\r\n            let sizeA = Size.parseSize(intArray);\r\n            expect(sizeA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Size (int with one element (default value taken)\", () => {\r\n            let intArray = [190];\r\n            let defaultValue: Shapes.ISize = { width: 110, height: 100 };\r\n            let sizeA = Size.parseSize(intArray, defaultValue);\r\n            expect(sizeA.width).toBe(defaultValue.width);\r\n            expect(sizeA.height).toBe(defaultValue.height);\r\n        });\r\n\r\n        it(\"Parse Size (int with empty array)\", () => {\r\n            let intArray = [];\r\n            let sizeA = Size.parseSize(intArray);\r\n            expect(sizeA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Size (int with empty array (default value taken)\", () => {\r\n            let intArray = [];\r\n            let defaultValue: Shapes.ISize = { width: 110, height: 100 };\r\n            let sizeA = Size.parseSize(intArray, defaultValue);\r\n            expect(sizeA.width).toBe(110);\r\n            expect(sizeA.height).toBe(100);\r\n        });\r\n\r\n        it(\"Parse Size (not string and not array)\", () => {\r\n            let num: boolean = true;\r\n            let sizeA = Size.parseSize(num);\r\n            expect(sizeA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Size (not string and not array (default value taken)\", () => {\r\n            let num: boolean = true;\r\n            let defaultValue: Shapes.ISize = { width: 110, height: 100 };\r\n            let sizeA = Size.parseSize(num, defaultValue);\r\n            expect(sizeA.width).toBe(110);\r\n            expect(sizeA.height).toBe(100);\r\n        });\r\n\r\n        it(\"Parse Size - getting null\", () => {\r\n            let sizeA = Size.parseSize(null);\r\n            expect(sizeA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Size - getting null (default value taken)\", () => {\r\n            let defaultValue: Shapes.ISize = { width: 110, height: 100 };\r\n            let sizeA = Size.parseSize(null, defaultValue);\r\n            expect(sizeA.width).toBe(110);\r\n            expect(sizeA.height).toBe(100);\r\n        });\r\n    });\r\n\r\n    describe(\"Rect tests\", () => {\r\n\r\n        let rectA;\r\n        let rectB;\r\n        let isEmpty;\r\n        let isIntersecting;\r\n        let defaultRect: IRect = { left: 110, top: 100, width: 150, height: 117 };\r\n\r\n        function AreRectsEqual(rectA, rectB): boolean {\r\n            return (rectB.left === rectA.left && rectB.top === rectA.top && rectB.width === rectA.width && rectB.height === rectA.height);\r\n        }\r\n\r\n        it(\"Is Empty - true\", () => {\r\n            rectA = { left: 0, top: 0, width: 0, height: 0 };\r\n            let isEmpty = Rect.isEmpty(rectA);\r\n            expect(isEmpty).toBe(true);\r\n        });\r\n\r\n        it(\"Is Empty - false\", () => {\r\n            rectA = { left: 0, top: 0, width: 50, height: 20 };\r\n            let isEmpty = Rect.isEmpty(rectA);\r\n            expect(isEmpty).toBe(false);\r\n        });\r\n\r\n        it(\"Is Empty - null\", () => {\r\n            rectA = null;\r\n            isEmpty = Rect.isEmpty(rectA);\r\n            expect(isEmpty).toBe(true);\r\n        });\r\n\r\n        it(\"Is Intersecting - true\", () => {\r\n            rectA = { left: 0, top: 0, width: 200, height: 300 };\r\n            rectB = { left: 170, top: 30, width: 300, height: 400 };\r\n            isIntersecting = Rect.isIntersecting(rectA, rectB);\r\n            expect(isIntersecting).toBe(true);\r\n        });\r\n\r\n        it(\"Is Intersecting - false\", () => {\r\n            rectA = { left: 0, top: 0, width: 10, height: 10 };\r\n            rectB = { left: 100, top: 200, width: 500, height: 400 };\r\n            isIntersecting = Rect.isIntersecting(rectA, rectB);\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Is Intersecting - first rect is null\", () => {\r\n            rectA = { left: 0, top: 0, width: 200, height: 200 };\r\n            rectB = null;\r\n            isIntersecting = Rect.isIntersecting(rectA, rectB);\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Is Intersecting - second rect is null\", () => {\r\n            rectA = null;\r\n            rectB = { left: 0, top: 0, width: 200, height: 200 };\r\n            isIntersecting = Rect.isIntersecting(rectA, rectB);\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Get offset\", () => {\r\n            rectA = { left: 0, top: 0, width: 200, height: 200 };\r\n            rectB = Rect.getOffset(rectA);\r\n            expect(rectB.x).toBe(0);\r\n            expect(rectB.y).toBe(0);\r\n        });\r\n\r\n        it(\"Get size\", () => {\r\n            rectA = { left: 0, top: 0, width: 200, height: 200 };\r\n            rectB = Rect.getSize(rectA);\r\n            expect(rectB.width).toBe(200);\r\n            expect(rectB.height).toBe(200);\r\n        });\r\n\r\n        it(\"Set size\", () => {\r\n            rectA = { left: 0, top: 0, width: 200, height: 200 };\r\n            let newSize: Shapes.ISize = { width: 150, height: 170 };\r\n            Rect.setSize(rectA, newSize);\r\n            expect(rectA.width).toBe(150);\r\n            expect(rectA.height).toBe(170);\r\n        });\r\n\r\n        it(\"Get Right (Property)\", () => {\r\n            rectA = { left: 120, top: 50, width: 200, height: 200 };\r\n            let right = Rect.right(rectA);\r\n            expect(right).toBe(320);\r\n        });\r\n\r\n        it(\"Get Bottom (Property)\", () => {\r\n            rectA = { left: 70, top: 130, width: 200, height: 200 };\r\n            let bottom = Rect.bottom(rectA);\r\n            expect(bottom).toBe(330);\r\n        });\r\n\r\n        it(\"Get TopLeft (Property)\", () => {\r\n            rectA = { left: 0, top: 0, width: 200, height: 200 };\r\n            let topLeft = Rect.topLeft(rectA);\r\n            expect(topLeft.x).toBe(0);\r\n            expect(topLeft.y).toBe(0);\r\n        });\r\n\r\n        it(\"Get TopRight (Property)\", () => {\r\n            rectA = { left: 80, top: 170, width: 150, height: 220 };\r\n            let topRight = Rect.topRight(rectA);\r\n            expect(topRight.x).toBe(230);\r\n            expect(topRight.y).toBe(170);\r\n        });\r\n\r\n        it(\"Get BottomLeft (Property)\", () => {\r\n            rectA = { left: 0, top: 10, width: 30, height: 220 };\r\n            let bottomLeft = Rect.bottomLeft(rectA);\r\n            expect(bottomLeft.x).toBe(rectA.left);\r\n            expect(bottomLeft.y).toEqual(rectA.top + rectA.height);\r\n        });\r\n\r\n        it(\"Get BottomRight (Property)\", () => {\r\n            rectA = { left: 50, top: 90, width: 200, height: 270 };\r\n            let bottomRight = Rect.bottomRight(rectA);\r\n            expect(bottomRight.x).toBe(250);\r\n            expect(bottomRight.y).toBe(360);\r\n        });\r\n\r\n        it(\"Check equals - return true\", () => {\r\n            rectA = { left: 50, top: 90, width: 200, height: 270 };\r\n            rectB = { left: 50, top: 90, width: 200, height: 270 };\r\n            let rectEquals = Rect.equals(rectA, rectB);\r\n            expect(rectEquals).toBe(true);\r\n        });\r\n\r\n        it(\"Check equals - return false\", () => {\r\n            rectA = { left: 50, top: 90, width: 200, height: 270 };\r\n            rectB = { left: 50, top: 90, width: 250, height: 270 };\r\n            let rectEquals = Rect.equals(rectA, rectB);\r\n            expect(rectEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Check equals - null\", () => {\r\n            rectA = { left: 70, top: 90, width: 130, height: 270 };\r\n            let rectEquals = Rect.equals(rectA, null);\r\n            expect(rectEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Clone\", () => {\r\n            rectA = { left: 70, top: 90, width: 130, height: 270 };\r\n            rectB = Rect.clone(rectA);\r\n            expect(AreRectsEqual(rectA, rectB)).toBe(true);\r\n        });\r\n\r\n        it(\"Rect ToString\", () => {\r\n            rectA = { left: 70, top: 90, width: 130, height: 270 };\r\n            let rectToString = \"{left:70, top:90, width:130, height:270}\";\r\n            expect(Rect.toString(rectA)).toBe(rectToString);\r\n        });\r\n\r\n        it(\"Rect offset - Positive Values\", () => {\r\n            rectA = { left: 70, top: 90, width: 130, height: 270 };\r\n            let rectB = Rect.offset(rectA, 30, 30);\r\n            expect(rectB.left).toBe(rectA.left + 30);\r\n            expect(rectB.top).toBe(rectA.top + 30);\r\n            expect(rectB.width).toBe(rectA.width);\r\n            expect(rectB.height).toBe(rectA.height);\r\n        });\r\n\r\n        it(\"Rect offset - Zero Values\", () => {\r\n            rectA = { left: 70, top: 90, width: 130, height: 270 };\r\n            let rectB = Rect.offset(rectA, 0, 0);\r\n            expect(rectB.left).toBe(rectA.left);\r\n\r\n        });\r\n\r\n        it(\"Rect offset - Negative Values\", () => {\r\n            rectA = { left: 70, top: 90, width: 130, height: 270 };\r\n            rectB = Rect.offset(rectA, -30, -60);\r\n            expect(rectB.left).toBe(rectA.left - 30);\r\n            expect(rectB.top).toBe(rectA.top - 60);\r\n            expect(rectB.width).toBe(rectA.width);\r\n            expect(rectB.height).toBe(rectA.height);\r\n        });\r\n\r\n        it(\"Rect offset - Negative Offset Bigger than Top Left\", () => {\r\n            rectA = { left: 70, top: 90, width: 130, height: 270 };\r\n            rectB = Rect.offset(rectA, -100, -130);\r\n            expect(rectB.left).toBe(0);\r\n            expect(rectB.top).toBe(0);\r\n            expect(rectB.width).toBe(rectA.width);\r\n            expect(rectB.height).toBe(rectA.height);\r\n        });\r\n\r\n        it(\"Rect inflate\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            let thickness: Shapes.IThickness = { left: 30, top: 20, right: 50, bottom: 40 };\r\n            rectB = Rect.inflate(rectA, thickness);\r\n            expect(rectB.left).toBe(40);\r\n            expect(rectB.top).toBe(90);\r\n            expect(rectB.width).toBe(210);\r\n            expect(rectB.height).toBe(330);\r\n        });\r\n\r\n        it(\"Rect inflate - Zero Values\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            let thickness: Shapes.IThickness = { left: 0, top: 0, right: 0, bottom: 0 };\r\n            rectB = Rect.inflate(rectA, thickness);\r\n            expect(rectB.left).toBe(70);\r\n            expect(rectB.top).toBe(110);\r\n            expect(rectB.width).toBe(130);\r\n            expect(rectB.height).toBe(270);\r\n        });\r\n\r\n        it(\"Rect deflate\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            let thickness: Shapes.IThickness = { left: 30, top: 20, right: 50, bottom: 40 };\r\n            rectB = Rect.deflate(rectA, thickness);\r\n            expect(rectB.left).toBe(100);\r\n            expect(rectB.top).toBe(130);\r\n            expect(rectB.width).toBe(50);\r\n            expect(rectB.height).toBe(210);\r\n        });\r\n\r\n        it(\"Rect deflate - Zero Values\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            let thickness: Shapes.IThickness = { left: 0, top: 0, right: 0, bottom: 0 };\r\n            rectB = Rect.deflate(rectA, thickness);\r\n            expect(rectB.left).toBe(70);\r\n            expect(rectB.top).toBe(110);\r\n            expect(rectB.width).toBe(130);\r\n            expect(rectB.height).toBe(270);\r\n        });\r\n\r\n        it(\"Rect inflateBy\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectA = Rect.inflateBy(rectA, 20);\r\n            expect(rectA.left).toBe(50);\r\n            expect(rectA.top).toBe(90);\r\n            expect(rectA.width).toBe(170);\r\n            expect(rectA.height).toBe(310);\r\n        });\r\n\r\n        it(\"Rect inflateBy - Zero Values\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectA = Rect.inflateBy(rectA, 0);\r\n            expect(rectA.left).toBe(70);\r\n            expect(rectA.top).toBe(110);\r\n            expect(rectA.width).toBe(130);\r\n            expect(rectA.height).toBe(270);\r\n        });\r\n\r\n        it(\"Rect deflateBy\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectA = Rect.deflateBy(rectA, 30);\r\n            expect(rectA.left).toBe(100);\r\n            expect(rectA.top).toBe(140);\r\n            expect(rectA.width).toBe(70);\r\n            expect(rectA.height).toBe(210);\r\n        });\r\n\r\n        it(\"Rect deflateBy - Zero Values\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectA = Rect.deflateBy(rectA, 0);\r\n            expect(rectA.left).toBe(70);\r\n            expect(rectA.top).toBe(110);\r\n            expect(rectA.width).toBe(130);\r\n            expect(rectA.height).toBe(270);\r\n        });\r\n\r\n        it(\"Contains Point - Return true\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            let newPoint: Shapes.IPoint = { x: 100, y: 140 };\r\n            let isContains = Shapes.Rect.containsPoint(rectA, newPoint);\r\n            expect(isContains).toBe(true);\r\n        });\r\n\r\n        it(\"Contains Point check floating point rounding precision\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            var inPoint: Shapes.IPoint = { x: 69.99999, y: 140 };\r\n            var outPoint: Shapes.IPoint = { x: 69.9999, y: 140 };\r\n            var containsInner = Shapes.Rect.containsPoint(rectA, inPoint);\r\n            var containsOuter = Shapes.Rect.containsPoint(rectA, outPoint);\r\n            expect(containsInner).toBe(true);\r\n            expect(containsOuter).toBe(false);\r\n        });\r\n\r\n        it(\"Contains Point - Return false\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            let newPoint: Shapes.IPoint = { x: 220, y: 170 };\r\n            let isContains = Shapes.Rect.containsPoint(rectA, newPoint);\r\n            expect(isContains).toBe(false);\r\n        });\r\n\r\n        it(\"Contains Point - null\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            let isContains = Shapes.Rect.containsPoint(rectA, null);\r\n            expect(isContains).toBe(false);\r\n        });\r\n\r\n        it(\"Is Intersecting - Return true\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectB = { left: 70, top: 150, width: 130, height: 320 };\r\n            let isIntersecting = Shapes.Rect.isIntersecting(rectA, rectB);\r\n            expect(isIntersecting).toBe(true);\r\n        });\r\n\r\n        it(\"Is Intersecting - Return false\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectB = { left: 30, top: 20, width: 20, height: 20 };\r\n            let isIntersecting = Shapes.Rect.isIntersecting(rectA, rectB);\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Is Intersecting - first null\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectB = null;\r\n            let isIntersecting = Shapes.Rect.isIntersecting(rectA, rectB);\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Is Intersecting - second null\", () => {\r\n            rectA = null;\r\n            rectB = { left: 70, top: 110, width: 130, height: 270 };\r\n            let isIntersecting = Shapes.Rect.isIntersecting(rectA, rectB);\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Intersect - Rect A Contains B\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectB = { left: 90, top: 140, width: 20, height: 20 };\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Intersect - Rect B Contains A\", () => {\r\n            rectA = { left: 110, top: 150, width: 30, height: 25 };\r\n            rectB = { left: 90, top: 140, width: 100, height: 120 };\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Intersect - Rect A Intersect B\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectB = { left: 90, top: 130, width: 80, height: 70 };\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Intersect - Rect A don't Intersect B\", () => {\r\n            rectA = { left: 0, top: 0, width: 20, height: 30 };\r\n            rectB = { left: 70, top: 110, width: 130, height: 270 };\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Intersect - Rect A is null\", () => {\r\n            rectA = null;\r\n            rectB = { left: 70, top: 110, width: 130, height: 270 };\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Intersect - Rect B is null\", () => {\r\n            rectA = { left: 70, top: 110, width: 130, height: 270 };\r\n            rectB = null;\r\n            expect(isIntersecting).toBe(false);\r\n        });\r\n\r\n        it(\"Combine 2 rects\", () => {\r\n            rectA = { left: 50, top: 50, width: 50, height: 50 };\r\n            rectB = { left: 60, top: 60, width: 60, height: 60 };\r\n            let newRect = Rect.combine(rectA, rectB);\r\n            let newRectCalculated: IRect = { left: 50, top: 50, width: 70, height: 70 };\r\n            expect(AreRectsEqual(newRectCalculated, newRect)).toBe(true);\r\n        });\r\n\r\n        it(\"Combine 2 rects (A contains B)\", () => {\r\n            rectA = { left: 150, top: 150, width: 20, height: 20 };\r\n            rectB = { left: 160, top: 160, width: 10, height: 10 };\r\n            let newRect = Rect.combine(rectA, rectB);\r\n            expect(AreRectsEqual(rectA, newRect)).toBe(true);\r\n        });\r\n\r\n        it(\"Combine 2 rects (B contains A)\", () => {\r\n            rectA = { left: 150, top: 150, width: 20, height: 20 };\r\n            rectB = { left: 130, top: 130, width: 50, height: 50 };\r\n            let newRect = Rect.combine(rectA, rectB);\r\n            expect(AreRectsEqual(newRect, rectB)).toBe(true);\r\n        });\r\n\r\n        it(\"Combine 2 rects (one empty)\", () => {\r\n            rectA = { left: 150, top: 150, width: 20, height: 20 };\r\n            rectB = { left: 0, top: 0, width: 0, height: 0 };\r\n            let newRect = rectA;\r\n            Rect.combine(rectA, rectB);\r\n            expect(AreRectsEqual(rectA, newRect)).toBe(true);\r\n        });\r\n\r\n        it(\"Parse Rect (from string no default value)\", () => {\r\n            let rectStr = \"200,215,200,180\";\r\n            rectA = Rect.parseRect(rectStr);\r\n            expect(rectA.left).toBe(200);\r\n            expect(rectA.top).toBe(215);\r\n            expect(rectA.width).toBe(200);\r\n            expect(rectA.height).toBe(180);\r\n        });\r\n\r\n        it(\"Parse Rect - from string,(default value ignored)\", () => {\r\n            let rectStr = \"190,220,150,170\";\r\n            rectA = Rect.parseRect(rectStr, defaultRect);\r\n            expect(rectA.left).toBe(190);\r\n            expect(rectA.top).toBe(220);\r\n            expect(rectA.width).toBe(150);\r\n            expect(rectA.height).toBe(170);\r\n        });\r\n\r\n        it(\"Parse Rect (from empty string)\", () => {\r\n            let rectStr = \"\";\r\n            rectA = Rect.parseRect(rectStr);\r\n            expect(rectA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Rect - from empty string (default value taken)\", () => {\r\n            let rectStr = \"\";\r\n            rectA = Rect.parseRect(rectStr, defaultRect);\r\n            expect(rectA.left).toBe(defaultRect.left);\r\n            expect(rectA.top).toBe(defaultRect.top);\r\n            expect(rectA.width).toBe(defaultRect.width);\r\n            expect(rectA.height).toBe(defaultRect.height);\r\n        });\r\n\r\n        it(\"Parse Rect (from int array)\", () => {\r\n            let intArray = [190, 220, 100, 150];\r\n            rectA = Rect.parseRect(intArray);\r\n            expect(rectA.left).toBe(190);\r\n            expect(rectA.top).toBe(220);\r\n            expect(rectA.width).toBe(100);\r\n            expect(rectA.height).toBe(150);\r\n        });\r\n\r\n        it(\"Parse Rect - from int array (default value ignored)\", () => {\r\n            let intArray = [190, 220, 130, 115];\r\n            rectA = Rect.parseRect(intArray, defaultRect);\r\n            expect(rectA.left).toBe(190);\r\n            expect(rectA.top).toBe(220);\r\n            expect(rectA.width).toBe(130);\r\n            expect(rectA.height).toBe(115);\r\n        });\r\n\r\n        it(\"Parse Rect (int with more than 4 elements)\", () => {\r\n            let intArray = [190, 220, 200, 210, 118];\r\n            rectA = Rect.parseRect(intArray);\r\n            expect(rectA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Rect (int with more than 4 elements (default value ignored)\", () => {\r\n            let intArray = [190, 220, 200, 210];\r\n            let defaultValue = { left: 110, top: 100, width: 115, height: 170 };\r\n            rectA = Rect.parseRect(intArray, defaultValue);\r\n            expect(rectA.left).toBe(190);\r\n            expect(rectA.top).toBe(220);\r\n            expect(rectA.width).toBe(200);\r\n            expect(rectA.height).toBe(210);\r\n        });\r\n\r\n        it(\"Parse Rect (int with one element)\", () => {\r\n            let intArray = [190];\r\n            rectA = Rect.parseRect(intArray);\r\n            expect(rectA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Rect (int with one element (default value taken)\", () => {\r\n            let intArray = [190];\r\n            rectA = Rect.parseRect(intArray, defaultRect);\r\n            expect(rectA.left).toBe(defaultRect.left);\r\n            expect(rectA.top).toBe(defaultRect.top);\r\n            expect(rectA.width).toBe(defaultRect.width);\r\n            expect(rectA.height).toBe(defaultRect.height);\r\n        });\r\n\r\n        it(\"Parse Rect (int with empty array)\", () => {\r\n            let intArray = [];\r\n            rectA = Rect.parseRect(intArray);\r\n            expect(rectA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Rect (int with empty array (default value taken)\", () => {\r\n            let intArray = [];\r\n            let defaultValue = { left: 110, top: 100, width: 115, height: 170 };\r\n            rectA = Rect.parseRect(intArray, defaultValue);\r\n            expect(rectA.left).toBe(defaultValue.left);\r\n            expect(rectA.top).toBe(defaultValue.top);\r\n            expect(rectA.width).toBe(defaultValue.width);\r\n            expect(rectA.height).toBe(defaultValue.height);\r\n        });\r\n\r\n        it(\"Parse Rect (not string and not array)\", () => {\r\n            let num: boolean = true;\r\n            rectA = Rect.parseRect(num);\r\n            expect(rectA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Rect (not string and not array (default value taken)\", () => {\r\n            let num: boolean = true;\r\n            let defaultValue = { left: 110, top: 100, width: 115, height: 170 };\r\n            rectA = Rect.parseRect(num, defaultValue);\r\n            expect(rectA.left).toBe(defaultValue.left);\r\n            expect(rectA.top).toBe(defaultValue.top);\r\n            expect(rectA.width).toBe(defaultValue.width);\r\n            expect(rectA.height).toBe(defaultValue.height);\r\n        });\r\n\r\n        it(\"Parse Rect - getting null\", () => {\r\n            rectA = Rect.parseRect(null);\r\n            expect(rectA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Rect - getting null (default value taken)\", () => {\r\n            let defaultValue = { left: 110, top: 100, width: 115, height: 170 };\r\n            rectA = Rect.parseRect(null, defaultValue);\r\n            expect(rectA.left).toBe(defaultValue.left);\r\n            expect(rectA.top).toBe(defaultValue.top);\r\n            expect(rectA.width).toBe(defaultValue.width);\r\n            expect(rectA.height).toBe(defaultValue.height);\r\n        });\r\n\r\n    });\r\n\r\n    describe(\"Thickness tests\", () => {\r\n\r\n        let thicknessA;\r\n        let thicknessB;\r\n        let defaultThickness: Shapes.IThickness = { left: 105, top: 100, right: 122, bottom: 122 };\r\n\r\n        it(\"Inflate\", () => {\r\n            thicknessA = { left: 120, top: 100, right: 150, bottom: 170 };\r\n            thicknessB = { left: 20, top: 20, right: 20, bottom: 20 };\r\n            let newThickness = Thickness.inflate(thicknessA, thicknessB);\r\n            expect(newThickness.left).toBe(140);\r\n            expect(newThickness.top).toBe(120);\r\n            expect(newThickness.right).toBe(170);\r\n            expect(newThickness.bottom).toBe(190);\r\n        });\r\n\r\n        it(\"Get Width\", () => {\r\n            thicknessA = { left: 115, top: 134, right: 212, bottom: 270 };\r\n            let thicknessWidth = Thickness.getWidth(thicknessA);\r\n            expect(thicknessWidth).toBe(327);\r\n        });\r\n\r\n        it(\"Get Width - Zero Thickness\", () => {\r\n            thicknessA = { left: 0, top: 0, right: 0, bottom: 0 };\r\n            let thicknessWidth = Thickness.getWidth(thicknessA);\r\n            expect(thicknessWidth).toBe(0);\r\n        });\r\n\r\n        it(\"Get Height\", () => {\r\n            thicknessA = { left: 80, top: 215, right: 212, bottom: 15 };\r\n            let thicknessHeight = Thickness.getHeight(thicknessA);\r\n            expect(thicknessHeight).toBe(230);\r\n        });\r\n\r\n        it(\"Get Height\", () => {\r\n            thicknessA = { left: 0, top: 0, right: 0, bottom: 0 };\r\n            let thicknessHeight = Thickness.getHeight(thicknessA);\r\n            expect(thicknessHeight).toBe(0);\r\n        });\r\n\r\n        it(\"Clone\", () => {\r\n            thicknessA = { left: 158, top: 150, right: 215, bottom: 412 };\r\n            thicknessB = Thickness.clone(thicknessA);\r\n            expect(thicknessB.left).toBe(thicknessA.left);\r\n            expect(thicknessB.top).toBe(thicknessA.top);\r\n            expect(thicknessB.right).toBe(thicknessA.right);\r\n            expect(thicknessB.bottom).toBe(thicknessA.bottom);\r\n        });\r\n\r\n        it(\"Clone - null value\", () => {\r\n            thicknessA = null;\r\n            thicknessB = Thickness.clone(thicknessA);\r\n            expect(thicknessB).toBe(null);\r\n\r\n        });\r\n\r\n        it(\"Equals - return true\", () => {\r\n            thicknessA = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            thicknessB = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            let isEquals = Thickness.equals(thicknessA, thicknessB);\r\n            expect(isEquals).toBe(true);\r\n        });\r\n\r\n        it(\"Equals - return false\", () => {\r\n            thicknessA = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            thicknessB = { left: 87, top: 100, right: 180, bottom: 95 };\r\n            let isEquals = Thickness.equals(thicknessA, thicknessB);\r\n            expect(isEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Equals - first value is null\", () => {\r\n            thicknessA = null;\r\n            thicknessB = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            let isEquals = Thickness.equals(thicknessA, thicknessB);\r\n            expect(isEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Equals - second value is null\", () => {\r\n            thicknessA = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            thicknessB = null;\r\n            let isEquals = Thickness.equals(thicknessA, thicknessB);\r\n            expect(isEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Flip Horizontal\", () => {\r\n            thicknessA = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            Thickness.flipHorizontal(thicknessA);\r\n            expect(thicknessA.left).toBe(180);\r\n            expect(thicknessA.right).toBe(87);\r\n            expect(thicknessA.top).toBe(156);\r\n            expect(thicknessA.bottom).toBe(95);\r\n\r\n        });\r\n\r\n        it(\"Flip Vertical\", () => {\r\n            thicknessA = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            Thickness.flipVertical(thicknessA);\r\n            expect(thicknessA.left).toBe(87);\r\n            expect(thicknessA.right).toBe(180);\r\n            expect(thicknessA.top).toBe(95);\r\n            expect(thicknessA.bottom).toBe(156);\r\n\r\n        });\r\n\r\n        it(\"To string\", () => {\r\n            thicknessA = { left: 158, top: 150, right: 215, bottom: 412 };\r\n            let thicknessString = Thickness.toString(thicknessA);\r\n            expect(thicknessString).toBe(\"{top:150, left:158, right:215, bottom:412}\");\r\n\r\n        });\r\n\r\n        it(\"To Css String\", () => {\r\n            thicknessA = { left: 95, top: 140, right: 217, bottom: 107 };\r\n            let thicknessString = Thickness.toCssString(thicknessA);\r\n            expect(thicknessString).toBe(\"140px 217px 107px 95px\");\r\n\r\n        });\r\n\r\n        it(\"Is Empty true\", () => {\r\n            thicknessA = { left: 0, top: 0, right: 0, bottom: 0 };\r\n            let isEmpty = Thickness.isEmpty(thicknessA);\r\n            expect(isEmpty).toBe(true);\r\n\r\n        });\r\n\r\n        it(\"Is Empty false\", () => {\r\n            thicknessA = { left: 125, top: 130, right: 114, bottom: 47 };\r\n            let isEmpty = Thickness.isEmpty(thicknessA);\r\n            expect(isEmpty).toBe(false);\r\n\r\n        });\r\n\r\n        it(\"Equals (static) - return true \", () => {\r\n            thicknessA = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            thicknessB = { left: 87, top: 156, right: 180, bottom: 95 };\r\n            let areThicknessesEqual = Thickness.equals(thicknessA, thicknessB);\r\n            expect(areThicknessesEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Equals (static) - return false \", () => {\r\n            thicknessA = { left: 125, top: 130, right: 114, bottom: 47 };\r\n            thicknessB = { left: 125, top: 130, right: 110, bottom: 47 };\r\n            let areThicknessesEqual = Thickness.equals(thicknessA, thicknessB);\r\n            expect(areThicknessesEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - Thickness A is null \", () => {\r\n            let thicknessB: Shapes.IThickness = { left: 125, top: 130, right: 114, bottom: 47 };\r\n            let areThicknessesEqual = Thickness.equals(null, thicknessB);\r\n            expect(areThicknessesEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - Thickness B is null \", () => {\r\n            let thicknessA: Shapes.IThickness = { left: 125, top: 130, right: 114, bottom: 47 };\r\n            let areThicknessesEqual = Thickness.equals(thicknessA, null);\r\n            expect(areThicknessesEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - Thicknesses are null \", () => {\r\n            let areThicknessesEqual = Thickness.equals(null, null);\r\n            expect(areThicknessesEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals with Precision (static) - return true \", () => {\r\n            thicknessA = { left: 125, top: 130, right: 114, bottom: 47 };\r\n            thicknessB = { left: 125, top: 130, right: 114, bottom: 47 };\r\n            let areThicknessesEqual = Shapes.Thickness.equalWithPrecision(thicknessA, thicknessB);\r\n            expect(areThicknessesEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Parse Thickness (from string no default value)\", () => {\r\n            let thicknessStr = \"200,215,200,180\";\r\n            thicknessA = Thickness.parseThickness(thicknessStr);\r\n            expect(thicknessA.left).toBe(200);\r\n            expect(thicknessA.top).toBe(215);\r\n            expect(thicknessA.right).toBe(200);\r\n            expect(thicknessA.bottom).toBe(180);\r\n        });\r\n\r\n        it(\"Parse Thickness - from string,(default value ignored)\", () => {\r\n            let thicknessStr = \"190,220,150,170\";\r\n            thicknessA = Thickness.parseThickness(thicknessStr, defaultThickness);\r\n            expect(thicknessA.left).toBe(190);\r\n            expect(thicknessA.top).toBe(220);\r\n            expect(thicknessA.right).toBe(150);\r\n            expect(thicknessA.bottom).toBe(170);\r\n        });\r\n\r\n        it(\"Parse Thickness (from empty string)\", () => {\r\n            let thicknessStr = \"\";\r\n            thicknessA = Thickness.parseThickness(thicknessStr);\r\n            expect(thicknessA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Thickness - from empty string (default value taken)\", () => {\r\n            let thicknessStr = \"\";\r\n            thicknessA = Thickness.parseThickness(thicknessStr, defaultThickness);\r\n            expect(thicknessA.left).toBe(defaultThickness.left);\r\n            expect(thicknessA.top).toBe(defaultThickness.top);\r\n            expect(thicknessA.right).toBe(defaultThickness.right);\r\n            expect(thicknessA.bottom).toBe(defaultThickness.bottom);\r\n        });\r\n\r\n        it(\"Parse Thickness (from int array)\", () => {\r\n            let intArray = [190, 220, 100, 150];\r\n            thicknessA = Thickness.parseThickness(intArray);\r\n            expect(thicknessA.left).toBe(190);\r\n            expect(thicknessA.top).toBe(220);\r\n            expect(thicknessA.right).toBe(100);\r\n            expect(thicknessA.bottom).toBe(150);\r\n        });\r\n\r\n        it(\"Parse Thickness - from int array (default value ignored)\", () => {\r\n            let intArray = [190, 220, 130, 115];\r\n            thicknessA = Thickness.parseThickness(intArray, defaultThickness);\r\n            expect(thicknessA.left).toBe(190);\r\n            expect(thicknessA.top).toBe(220);\r\n            expect(thicknessA.right).toBe(130);\r\n            expect(thicknessA.bottom).toBe(115);\r\n        });\r\n\r\n        it(\"Parse Thickness (int with more than 4 elements)\", () => {\r\n            let intArray = [190, 220, 200, 210, 118];\r\n            thicknessA = Thickness.parseThickness(intArray);\r\n            expect(thicknessA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Thickness (int with more than 4 elements (default value ignored)\", () => {\r\n            let intArray = [190, 220, 200, 210];\r\n            thicknessA = Thickness.parseThickness(intArray, defaultThickness);\r\n            expect(thicknessA.left).toBe(190);\r\n            expect(thicknessA.top).toBe(220);\r\n            expect(thicknessA.right).toBe(200);\r\n            expect(thicknessA.bottom).toBe(210);\r\n        });\r\n\r\n        it(\"Parse Thickness (int with one element)\", () => {\r\n            let intArray = [190];\r\n            thicknessA = Thickness.parseThickness(intArray);\r\n            expect(thicknessA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Thickness (int with one element (default value taken)\", () => {\r\n            let intArray = [190];\r\n            thicknessA = Thickness.parseThickness(intArray, defaultThickness);\r\n            expect(thicknessA.left).toBe(defaultThickness.left);\r\n            expect(thicknessA.top).toBe(defaultThickness.top);\r\n            expect(thicknessA.right).toBe(defaultThickness.right);\r\n            expect(thicknessA.bottom).toBe(defaultThickness.bottom);\r\n        });\r\n\r\n        it(\"Parse Thickness (int with empty array)\", () => {\r\n            let intArray = [];\r\n            thicknessA = Thickness.parseThickness(intArray);\r\n            expect(thicknessA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Thickness (int with empty array (default value taken)\", () => {\r\n            let intArray = [];\r\n            thicknessA = Thickness.parseThickness(intArray, defaultThickness);\r\n            expect(thicknessA.left).toBe(defaultThickness.left);\r\n            expect(thicknessA.top).toBe(defaultThickness.top);\r\n            expect(thicknessA.right).toBe(defaultThickness.right);\r\n            expect(thicknessA.bottom).toBe(defaultThickness.bottom);\r\n        });\r\n\r\n        it(\"Parse Thickness (not string and not array)\", () => {\r\n            let num: boolean = true;\r\n            thicknessA = Thickness.parseThickness(num);\r\n            expect(thicknessA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Thickness (not string and not array (default value taken)\", () => {\r\n            let num: boolean = true;\r\n            thicknessA = Thickness.parseThickness(num, defaultThickness);\r\n            expect(thicknessA.left).toBe(defaultThickness.left);\r\n            expect(thicknessA.top).toBe(defaultThickness.top);\r\n            expect(thicknessA.right).toBe(defaultThickness.right);\r\n            expect(thicknessA.bottom).toBe(defaultThickness.bottom);\r\n        });\r\n\r\n        it(\"Parse Thickness - getting null\", () => {\r\n            thicknessA = Thickness.parseThickness(null);\r\n            expect(thicknessA).toBe(null);\r\n        });\r\n\r\n        it(\"Parse Thickness - getting null (default value taken)\", () => {\r\n            thicknessA = Thickness.parseThickness(null, defaultThickness);\r\n            expect(thicknessA.left).toBe(defaultThickness.left);\r\n            expect(thicknessA.top).toBe(defaultThickness.top);\r\n            expect(thicknessA.right).toBe(defaultThickness.right);\r\n            expect(thicknessA.bottom).toBe(defaultThickness.bottom);\r\n        });\r\n\r\n    });\r\n\r\n    describe(\"Vector tests\", () => {\r\n        let vectorA;\r\n        let vectorB;\r\n\r\n        it(\"Is Empty true\", () => {\r\n            vectorA = { x: 0, y: 0 };\r\n            let isEmpty = Vector.isEmpty(vectorA);\r\n            expect(isEmpty).toBe(true);\r\n\r\n        });\r\n\r\n        it(\"Is Empty false\", () => {\r\n            vectorA = { x: 125, y: 130 };\r\n            let isEmpty = Vector.isEmpty(vectorA);\r\n            expect(isEmpty).toBe(false);\r\n\r\n        });\r\n\r\n        it(\"Equals - return true\", () => {\r\n            vectorA = { x: 180, y: 95 };\r\n            vectorB = { x: 180, y: 95 };\r\n            let isEquals = Vector.equals(vectorA, vectorB);\r\n            expect(isEquals).toBe(true);\r\n        });\r\n\r\n        it(\"Equals - return false\", () => {\r\n            vectorA = { x: 180, y: 95 };\r\n            vectorB = { x: 100, y: 180 };\r\n            let isEquals = Vector.equals(vectorA, vectorB);\r\n            expect(isEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Equals - first value is null\", () => {\r\n            vectorA = null;\r\n            vectorB = { x: 150, y: 117 };\r\n            let isEquals = Vector.equals(vectorA, vectorB);\r\n            expect(isEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Equals - second value is null\", () => {\r\n            vectorA = { x: 156, y: 95 };\r\n            vectorB = null;\r\n            let isEquals = Vector.equals(vectorA, vectorB);\r\n            expect(isEquals).toBe(false);\r\n        });\r\n\r\n        it(\"Clone\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.clone(vectorA);\r\n            expect(vectorB.left).toBe(vectorA.left);\r\n            expect(vectorB.top).toBe(vectorA.top);\r\n\r\n        });\r\n\r\n        it(\"Clone - null value\", () => {\r\n            vectorA = null;\r\n            vectorB = Vector.clone(vectorA);\r\n            expect(vectorB).toBe(null);\r\n\r\n        });\r\n\r\n        it(\"To string\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            let vectorString = Vector.toString(vectorA);\r\n            expect(vectorString).toBe(\"{x:215, y:412}\");\r\n\r\n        });\r\n\r\n        it(\"Get Length\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            let vectorLength = Vector.getLength(vectorA);\r\n            let vectorLengthCalculated = Math.sqrt(215 * 215 + 412 * 412);\r\n            expect(vectorLength).toBe(vectorLengthCalculated);\r\n        });\r\n\r\n        it(\"Get Length - Zero\", () => {\r\n            vectorA = { x: 0, y: 0 };\r\n            let vectorLength = Vector.getLength(vectorA);\r\n            expect(vectorLength).toBe(0);\r\n        });\r\n\r\n        it(\"Get Length Sqr\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            let vectorLength = Vector.getLengthSqr(vectorA);\r\n            let vectorLengthCalculated = 215 * 215 + 412 * 412;\r\n            expect(vectorLength).toBe(vectorLengthCalculated);\r\n        });\r\n\r\n        it(\"Get Length Sqr - Zero\", () => {\r\n            vectorA = { x: 0, y: 0 };\r\n            let vectorLength = Vector.getLengthSqr(vectorA);\r\n            expect(vectorLength).toBe(0);\r\n        });\r\n\r\n        it(\"Scale - Greater than 1\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.scale(vectorA, 15);\r\n            expect(vectorB.x).toBe(vectorA.x * 15);\r\n            expect(vectorB.y).toBe(vectorA.y * 15);\r\n        });\r\n\r\n        it(\"Scale -  1\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.scale(vectorA, 1);\r\n            expect(vectorB.x).toBe(vectorA.x);\r\n            expect(vectorB.y).toBe(vectorA.y);\r\n        });\r\n\r\n        it(\"Scale -  between 0 and 1\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.scale(vectorA, 0.4);\r\n            expect(vectorB.x).toBe(vectorA.x * 0.4);\r\n            expect(vectorB.y).toBe(vectorA.y * 0.4);\r\n        });\r\n\r\n        it(\"Scale -  0\", () => {\r\n            vectorA = { x: 215, y: 412 };;\r\n            vectorB = Vector.scale(vectorA, 0);\r\n            expect(vectorB.x).toBe(0);\r\n            expect(vectorB.y).toBe(0);\r\n        });\r\n\r\n        it(\"Scale -  Negative\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.scale(vectorA, -4);\r\n            expect(vectorB.x).toBe(vectorA.x * -4);\r\n            expect(vectorB.y).toBe(vectorA.y * -4);\r\n        });\r\n\r\n        it(\"Normalize\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.normalize(vectorA);\r\n            let vectorALength = Vector.getLength(vectorA);\r\n            let newVector: Shapes.IVector = { x: vectorA.x / vectorALength, y: vectorA.y / vectorALength };\r\n            expect(newVector.x).toBe(vectorB.x);\r\n            expect(newVector.y).toBe(vectorB.y);\r\n        });\r\n\r\n        it(\"Normalize - empty vector\", () => {\r\n            vectorA = { x: 0, y: 0 };\r\n            vectorB = Vector.normalize(vectorA);\r\n            expect(vectorB.x).toBe(0);\r\n            expect(vectorB.y).toBe(0);\r\n        });\r\n\r\n        it(\"Rotate Vector 90 degrees CW\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.rotate90DegCW(vectorA);\r\n            expect(vectorB.x).toBe(vectorA.y);\r\n            expect(vectorB.y).toBe(-vectorA.x);\r\n        });\r\n\r\n        it(\"Rotate Vector 90 degrees CCW\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.rotate90DegCCW(vectorA);\r\n            expect(vectorB.x).toBe(-vectorA.y);\r\n            expect(vectorB.y).toBe(vectorA.x);\r\n        });\r\n\r\n        /*Using the Vector rotate formula newX=(X*cosA)-(y*sinA) */\r\n        it(\"Rotate - between 0 to 360 degrees\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.rotate(vectorA, 47);\r\n            let newVector: Shapes.IVector = { x: vectorA.x * Math.cos(47) - vectorA.y * Math.sin(47), y: vectorA.x * Math.sin(47) + vectorA.y * Math.cos(47) };\r\n            expect(vectorB.x).toBe(newVector.x);\r\n            expect(vectorB.y).toBe(newVector.y);\r\n        });\r\n\r\n        it(\"Rotate - 0 degrees\", () => {\r\n            vectorA = { x: 215, y: 412 };\r\n            vectorB = Vector.rotate(vectorA, 0);\r\n            expect(vectorB.x).toBe(vectorA.x);\r\n            expect(vectorB.y).toBe(vectorA.y);\r\n        });\r\n\r\n        it(\"Equals (static) - return true \", () => {\r\n            vectorA = { x: 130, y: 47 };\r\n            vectorB = { x: 130, y: 47 };\r\n            let areVectorsEqual = Vector.equals(vectorA, vectorB);\r\n            expect(areVectorsEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Equals (static) - return false \", () => {\r\n            vectorA = { x: 114, y: 47 };\r\n            vectorB = { x: 110, y: 47 };\r\n            let areVectorsEqual = Vector.equals(vectorA, vectorB);\r\n            expect(areVectorsEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - Vector A is null \", () => {\r\n            vectorB = { x: 121, y: 88 };\r\n            let areVectorsEqual = Vector.equals(null, vectorB);\r\n            expect(areVectorsEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - Vector B is null \", () => {\r\n            vectorA = { x: 114, y: 47 };\r\n            let areVectorsEqual = Vector.equals(vectorA, null);\r\n            expect(areVectorsEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals (static) - Vectors are null \", () => {\r\n            let areVectorsEqual = Vector.equals(null, null);\r\n            expect(areVectorsEqual).toBe(false);\r\n        });\r\n\r\n        it(\"Equals with Precision (static) - return true \", () => {\r\n            vectorA = { x: 130, y: 114.4 };\r\n            vectorB = { x: 130, y: 114.4 };\r\n            let areVectorsEqual = Shapes.Thickness.equalWithPrecision(vectorA, vectorB);\r\n            expect(areVectorsEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Equals with Precision (static) - return false \", () => {\r\n            vectorA = { x: 130.2, y: 114 };\r\n            vectorB = { x: 130, y: 114 };\r\n            let areVectorsEqual = Shapes.Thickness.equalWithPrecision(vectorA, vectorB);\r\n            expect(areVectorsEqual).toBe(true);\r\n        });\r\n\r\n        it(\"Add 2 Vectors\", () => {\r\n            vectorA = { x: 114, y: 47 };\r\n            vectorB = { x: 117, y: 134 };\r\n            let newVector = Vector.add(vectorA, vectorB);\r\n            expect(newVector.x).toBe(vectorA.x + vectorB.x);\r\n            expect(newVector.y).toBe(vectorA.y + vectorB.y);\r\n        });\r\n\r\n        it(\"Add Vector to Empty Vector\", () => {\r\n            vectorA = { x: 114, y: 47 };\r\n            vectorB = { x: 0, y: 0 };\r\n            let newVector = Vector.add(vectorA, vectorB);\r\n            expect(newVector.x).toBe(vectorA.x);\r\n            expect(newVector.y).toBe(vectorA.y);\r\n        });\r\n\r\n        it(\"Add Vector to its Inverse vector\", () => {\r\n            vectorA = { x: 114, y: 47 };\r\n            vectorB = { x: -114, y: -47 };\r\n            let newVector = Vector.add(vectorA, vectorB);\r\n            expect(newVector.x).toBe(0);\r\n            expect(newVector.y).toBe(0);\r\n        });\r\n\r\n        it(\"Subtract 2 Vectors\", () => {\r\n            vectorA = { x: 114, y: 47 };\r\n            vectorB = { x: 117, y: 134 };\r\n            let newVector = Vector.subtract(vectorA, vectorB);\r\n            expect(newVector.x).toBe(vectorA.x - vectorB.x);\r\n            expect(newVector.y).toBe(vectorA.y - vectorB.y);\r\n        });\r\n\r\n        it(\"Subtract Vector to Empty Vector\", () => {\r\n            vectorA = { x: 114, y: 47 };\r\n            vectorB = { x: 0, y: 0 };\r\n            let newVector = Vector.subtract(vectorA, vectorB);\r\n            expect(newVector.x).toBe(vectorA.x);\r\n            expect(newVector.y).toBe(vectorA.y);\r\n        });\r\n\r\n        it(\"Subtract Vector from the same vector\", () => {\r\n            vectorA = { x: 116, y: 49 };\r\n            vectorB = { x: 116, y: 49 };\r\n            let newVector = Vector.subtract(vectorA, vectorB);\r\n            expect(newVector.x).toBe(0);\r\n            expect(newVector.y).toBe(0);\r\n        });\r\n\r\n        it(\"dotProduct\", () => {\r\n            vectorA = { x: 116, y: 49 };\r\n            vectorA = { x: 140, y: 154 };\r\n            let dotProduct = Shapes.Vector.dotProduct(vectorA, vectorB);\r\n            let dotProductCalculated = vectorA.x * vectorB.x + vectorA.y * vectorB.y;\r\n            expect(dotProduct).toBe(dotProductCalculated);\r\n        });\r\n\r\n        it(\"Delta Vector\", () => {\r\n            let pointA: Shapes.IPoint = { x: 145, y: 217 };\r\n            let pointB: Shapes.IPoint = { x: 140, y: 154 };\r\n            let vectorA = Shapes.Vector.getDeltaVector(pointA, pointB);\r\n            expect(vectorA.x).toBe(pointB.x - pointA.x);\r\n            expect(vectorA.y).toBe(pointB.y - pointA.y);\r\n        });\r\n    });\r\n}\r\n"],"sourceRoot":"/source/"}