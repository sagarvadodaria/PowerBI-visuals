{"version":3,"sources":["customVisuals/sampleDataViews/CarLogosData.ts"],"names":["powerbitests","powerbitests.customVisuals","powerbitests.customVisuals.sampleDataViews","powerbitests.customVisuals.sampleDataViews.CarLogosData","powerbitests.customVisuals.sampleDataViews.CarLogosData.constructor","powerbitests.customVisuals.sampleDataViews.CarLogosData.getDataView"],"mappings":"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","file":"customVisuals/sampleDataViews/CarLogosData.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbitests.customVisuals.sampleDataViews {\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n    import DataView = powerbi.DataView;\r\n    import ValueType = powerbi.ValueType;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import DataViewValueColumns = powerbi.DataViewValueColumns;\r\n    import DataViewValueColumn = powerbi.DataViewValueColumn;\r\n\r\n    export class CarLogosData {\r\n\r\n        private categoryValues: string[] = [\"BMW\", \"Mercedes\", \"Honda\", \"Toyota\", \"Ferrari\"];\r\n\r\n        public getDataView(): DataView {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: 'Car',\r\n                        queryName: 'Country',\r\n                        roles: { Category: true },\r\n                        type: ValueType.fromDescriptor({ text: true })\r\n                    },\r\n                    {\r\n                        displayName: 'Sales Count',\r\n                        format: \"g\",\r\n                        isMeasure: true,\r\n                        queryName: 'sales',\r\n                        roles: { Values: true },\r\n                        type: ValueType.fromDescriptor({ numeric: true }),\r\n                        objects: { dataPoint: { fill: { solid: { color: 'purple' } } } },\r\n                    },\r\n                    {\r\n                        displayName: 'Image',\r\n                        format: \"g\",\r\n                        queryName: 'Image',\r\n                        roles: { Image: true },\r\n                        type: ValueType.fromDescriptor({ text: true })\r\n                    }\r\n                ],\r\n                objects: {\r\n                    general: {\r\n                        columns: 1\r\n                    }\r\n                }\r\n            };\r\n\r\n            let sampleData: number[] = [5, 10, 15, 20, 25];\r\n            let carImages: string[] = [\r\n                \"https://raw.githubusercontent.com/Microsoft/PowerBI-visuals/resources/images/chicletSlicer/bmw.png\",\r\n                \"https://raw.githubusercontent.com/Microsoft/PowerBI-visuals/resources/images/chicletSlicer/mercedes.png\",\r\n                \"https://raw.githubusercontent.com/Microsoft/PowerBI-visuals/resources/images/chicletSlicer/honda.png\",\r\n                \"https://raw.githubusercontent.com/Microsoft/PowerBI-visuals/resources/images/chicletSlicer/toyota.gif\",\r\n                \"https://raw.githubusercontent.com/Microsoft/PowerBI-visuals/resources/images/chicletSlicer/ferrari.png\"\r\n            ];\r\n\r\n            let fieldExpr = SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"table1\", name: \"country\" } });\r\n            let imageFieldExpr = SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"table1\", name: \"Image\" } });\r\n\r\n            let imageIdentities = carImages.map((value) => \r\n                powerbi.data.createDataViewScopeIdentity(SQExprBuilder.equal(imageFieldExpr, SQExprBuilder.text(value))));\r\n        \r\n            let categoryIdentities = this.categoryValues.map((value) =>\r\n                powerbi.data.createDataViewScopeIdentity(SQExprBuilder.equal(fieldExpr, SQExprBuilder.text(value))));\r\n\r\n            let columns: DataViewValueColumn[] = this.categoryValues.map((car, i): DataViewValueColumn => {\r\n\r\n                let source = dataViewMetadata.columns[1];\r\n                source.groupName = carImages[i];\r\n                return {\r\n                    source: source,\r\n                    identity: imageIdentities[i],\r\n                    values: sampleData\r\n                };\r\n            });\r\n\r\n            let dataValues: DataViewValueColumns = DataViewTransform.createValueColumns(columns, [fieldExpr, imageFieldExpr], dataViewMetadata.columns[2]);\r\n\r\n            return {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: this.categoryValues,\r\n                        identity: categoryIdentities,\r\n                    }],\r\n                    values: dataValues\r\n                }\r\n            };\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}