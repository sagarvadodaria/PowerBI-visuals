{"version":3,"sources":["visuals/services/textMeasurementServiceTests.ts"],"names":["powerbitests","powerbitests.getChildren","powerbitests.attachToDom","powerbitests.createSvgTextElement","powerbitests.createSpanElement","powerbitests.getTextProperties"],"mappings":"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","file":"visuals/services/textMeasurementServiceTests.js","sourcesContent":["/*\r\n*  Power BI Visualizations\r\n*\r\n*  Copyright (c) Microsoft Corporation\r\n*  All rights reserved. \r\n*  MIT License\r\n*\r\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n*  in the Software without restriction, including without limitation the rights\r\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n*  copies of the Software, and to permit persons to whom the Software is\r\n*  furnished to do so, subject to the following conditions:\r\n*   \r\n*  The above copyright notice and this permission notice shall be included in \r\n*  all copies or substantial portions of the Software.\r\n*   \r\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n*  THE SOFTWARE.\r\n*/\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import TextProperties = powerbi.TextProperties;\r\n    import TextMeasurementService = powerbi.TextMeasurementService;\r\n\r\n    describe(\"Text measurement service\", () => {\r\n        let Ellipsis = '…';\r\n\r\n        describe('measureSvgTextElementWidth', () => {\r\n            it('svg text element', () => {\r\n                let element = $(\"<text>\")\r\n                    .text(\"PowerBI rocks!\")\r\n                    .css({\r\n                        \"font-family\": \"Arial\",\r\n                        \"font-size\": \"11px\",\r\n                        \"font-weight\": \"bold\",\r\n                        \"font-style\": \"italic\",\r\n                        \"white-space\": \"nowrap\",\r\n                    });\r\n                attachToDom(element);\r\n\r\n                let width = TextMeasurementService.measureSvgTextElementWidth(<any>element.get(0));\r\n                expect(width).toBeGreaterThan(50);\r\n            });\r\n        });\r\n\r\n        it(\"measureSvgTextWidth\", () => {\r\n            let getTextWidth = (fontSize: number) => {\r\n                let textProperties = getTextProperties(fontSize);\r\n                return TextMeasurementService.measureSvgTextWidth(textProperties);\r\n            };\r\n\r\n            expect(getTextWidth(10)).toBeLessThan(getTextWidth(12));\r\n        });\r\n\r\n        it(\"estimateSvgTextHeight\", () => {\r\n            let getTextHeight = (fontSize: number) => {\r\n                let textProperties = getTextProperties(fontSize);\r\n                return TextMeasurementService.estimateSvgTextHeight(textProperties);\r\n            };\r\n\r\n            expect(getTextHeight(10)).toBeLessThan(getTextHeight(12));\r\n        });\r\n\r\n        it(\"estimateSvgTextBaselineDelta\", () => {\r\n            let getTextBaselineDelta = (fontSize: number) => {\r\n                let textProperties = getTextProperties(fontSize);\r\n                return TextMeasurementService.estimateSvgTextBaselineDelta(textProperties);\r\n            };\r\n\r\n            expect(getTextBaselineDelta(10)).toBeLessThan(getTextBaselineDelta(20));\r\n        });\r\n\r\n        it(\"estimateSvgTextHeight numeric\", () => {\r\n            let getTextHeight = (fontSize: number, numeric) => {\r\n                let textProperties = getTextProperties(fontSize);\r\n                return TextMeasurementService.estimateSvgTextHeight(textProperties, numeric);\r\n            };\r\n\r\n            expect(getTextHeight(12, true)).toBeLessThan(getTextHeight(12, false));\r\n        });\r\n\r\n        describe('estimate cache', () => {\r\n            let setDataSpy: jasmine.Spy;\r\n\r\n            beforeEach(() => {\r\n                powerbi.ephemeralStorageService['clearCache']();\r\n                setDataSpy = spyOn(powerbi.ephemeralStorageService, 'setData');\r\n                setDataSpy.and.callThrough();\r\n            });\r\n\r\n            it(\"estimateSvgTextHeight does cache\", () => {\r\n                TextMeasurementService.estimateSvgTextHeight(getTextProperties(10, 'A', 'RandomFont'));\r\n                TextMeasurementService.estimateSvgTextHeight(getTextProperties(10, 'B', 'RandomFont'));\r\n                TextMeasurementService.estimateSvgTextHeight(getTextProperties(14, 'C', 'RandomFont'));\r\n                TextMeasurementService.estimateSvgTextHeight(getTextProperties(14, 'D', 'RandomFont'));\r\n                TextMeasurementService.estimateSvgTextHeight(getTextProperties(10, 'E', 'RandomFont2'));\r\n                TextMeasurementService.estimateSvgTextHeight(getTextProperties(10, 'F', 'RandomFont2'));\r\n\r\n                expect(setDataSpy.calls.count()).toBe(3);\r\n            });\r\n\r\n            it(\"estimateSvgTextBaselineDelta does cache\", () => {\r\n                TextMeasurementService.estimateSvgTextBaselineDelta(getTextProperties(10, 'A', 'RandomFont'));\r\n                TextMeasurementService.estimateSvgTextBaselineDelta(getTextProperties(10, 'B', 'RandomFont'));\r\n                TextMeasurementService.estimateSvgTextBaselineDelta(getTextProperties(14, 'C', 'RandomFont'));\r\n                TextMeasurementService.estimateSvgTextBaselineDelta(getTextProperties(14, 'D', 'RandomFont'));\r\n                TextMeasurementService.estimateSvgTextBaselineDelta(getTextProperties(10, 'E', 'RandomFont2'));\r\n                TextMeasurementService.estimateSvgTextBaselineDelta(getTextProperties(10, 'F', 'RandomFont2'));\r\n\r\n                expect(setDataSpy.calls.count()).toBe(3);\r\n            });\r\n\r\n            xit('estimateSvgTextHeight does not cache when results are wrong', () => {\r\n                // Ask for a measurement so we put the measurement svg into the DOM\r\n                TextMeasurementService.estimateSvgTextHeight(getTextProperties(2, 'X', 'Primer'));\r\n                expect(setDataSpy.calls.count()).toBe(1);\r\n\r\n                // Measurements will be wrong when the element is disconnected\r\n                let measurementElement = d3.select('body').select('svg').node();\r\n                let parent = measurementElement.parentElement;\r\n                measurementElement.remove();\r\n\r\n                let wrongHeight = TextMeasurementService.estimateSvgTextHeight(getTextProperties(10, 'A', 'RandomFont'));\r\n                expect(wrongHeight).toBe(0);\r\n                expect(setDataSpy.calls.count()).toBe(1);\r\n\r\n                // Connect and remeasure\r\n                parent.appendChild(measurementElement);\r\n                let correctHeight = TextMeasurementService.estimateSvgTextHeight(getTextProperties(10, 'A', 'RandomFont'));\r\n                expect(correctHeight).toBeGreaterThan(0);\r\n                expect(setDataSpy.calls.count()).toBe(2);\r\n            });\r\n        });\r\n\r\n        it(\"measureSvgTextHeight\", () => {\r\n            let getTextHeight = (fontSize: number) => {\r\n                let textProperties = getTextProperties(fontSize);\r\n                return TextMeasurementService.measureSvgTextHeight(textProperties);\r\n            };\r\n\r\n            expect(getTextHeight(10)).toBeLessThan(getTextHeight(12));\r\n        });\r\n\r\n        it(\"measureSvgTextRect\", () => {\r\n            let getTextRect = (fontSize: number) => {\r\n                let textProperties = getTextProperties(fontSize);\r\n                return TextMeasurementService.measureSvgTextRect(textProperties);\r\n            };\r\n\r\n            let smallRect = getTextRect(10);\r\n            let largeRect = getTextRect(14);\r\n\r\n            expect(smallRect.height).toBeLessThan(largeRect.height);\r\n            //the y point of the rect is at the top of the rect, the y point of the text is (almost) at the bottom of the text.\r\n            //both y will be less than 0, testing the absolute y value.\r\n            expect(Math.abs(smallRect.y)).toBeLessThan(Math.abs(largeRect.y));\r\n        });\r\n\r\n        it(\"getMeasurementProperties\", () => {\r\n            let element = $(\"<text>\")\r\n                .text(\"PowerBI rocks!\")\r\n                .css({\r\n                    \"font-family\": \"Arial\",\r\n                    \"font-size\": \"11px\",\r\n                    \"font-weight\": \"bold\",\r\n                    \"font-style\": \"italic\",\r\n                    \"white-space\": \"nowrap\",\r\n                });\r\n            attachToDom(element);\r\n\r\n            let properties = TextMeasurementService.getMeasurementProperties(element);\r\n            let expectedProperties: TextProperties = {\r\n                fontFamily: \"Arial\",\r\n                fontSize: \"11px\",\r\n                fontWeight: \"bold\",\r\n                fontStyle: \"italic\",\r\n                whiteSpace: \"nowrap\",\r\n                text: \"PowerBI rocks!\",\r\n            };\r\n\r\n            expect(properties).toEqual(expectedProperties);\r\n        });\r\n\r\n        describe(\"getSvgMeasurementProperties\", () => {\r\n            it(\"svg text element\", () => {\r\n                let svg = $(\"<svg>\");\r\n                let element = $(\"<text>\")\r\n                    .text(\"PowerBI rocks!\")\r\n                    .css({\r\n                        \"font-family\": \"Arial\",\r\n                        \"font-size\": \"11px\",\r\n                        \"font-weight\": \"bold\",\r\n                        \"font-style\": \"italic\",\r\n                        \"white-space\": \"nowrap\",\r\n                    });\r\n                svg.append(element);\r\n                attachToDom(svg);\r\n\r\n                let properties = TextMeasurementService.getSvgMeasurementProperties(<any>element[0]);\r\n                let expectedProperties: TextProperties = {\r\n                    fontFamily: \"Arial\",\r\n                    fontSize: \"11px\",\r\n                    fontWeight: \"bold\",\r\n                    fontStyle: \"italic\",\r\n                    whiteSpace: \"nowrap\",\r\n                    text: \"PowerBI rocks!\",\r\n                };\r\n\r\n                expect(properties).toEqual(expectedProperties);\r\n            });\r\n        });\r\n\r\n        describe('getTailoredTextOrDefault', () => {\r\n            it(\"without ellipsis\", () => {\r\n                let properties: TextProperties = {\r\n                    fontFamily: \"Arial\",\r\n                    fontSize: \"11px\",\r\n                    fontWeight: \"bold\",\r\n                    fontStyle: \"italic\",\r\n                    whiteSpace: \"nowrap\",\r\n                    text: \"PowerBI rocks!\",\r\n                };\r\n\r\n                let text = TextMeasurementService.getTailoredTextOrDefault(properties, 100);\r\n\r\n                expect(text).toEqual(\"PowerBI rocks!\");\r\n            });\r\n\r\n            it(\"with ellipsis\", () => {\r\n                let properties: TextProperties = {\r\n                    fontFamily: \"Arial\",\r\n                    fontSize: \"11px\",\r\n                    fontWeight: \"bold\",\r\n                    fontStyle: \"italic\",\r\n                    whiteSpace: \"nowrap\",\r\n                    text: \"PowerBI rocks!\",\r\n                };\r\n\r\n                let text = TextMeasurementService.getTailoredTextOrDefault(properties, 45);\r\n\r\n                expect(jsCommon.StringExtensions.endsWith(text, Ellipsis)).toBeTruthy();\r\n                expect(jsCommon.StringExtensions.startsWithIgnoreCase(text, 'Pow')).toBeTruthy();\r\n            });\r\n        });\r\n\r\n        describe('svgEllipsis', () => {\r\n            it(\"with ellipsis\", () => {\r\n                let element = createSvgTextElement(\"PowerBI rocks!\");\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.svgEllipsis(<any>element[0], 20);\r\n\r\n                let text = $(element).text();\r\n                expect(jsCommon.StringExtensions.endsWith(text, Ellipsis)).toBeTruthy();\r\n            });\r\n\r\n            it(\"without ellipsis\", () => {\r\n                let element = createSvgTextElement(\"PowerBI rocks!\");\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.svgEllipsis(<any>element[0], 100);\r\n\r\n                let text = $(element).text();\r\n                expect(text).toEqual(\"PowerBI rocks!\");\r\n            });\r\n        });\r\n\r\n        describe('wordBreak', () => {\r\n            it('with no breaks', () => {\r\n                let originalText = \"ContentWithNoBreaks!\";\r\n                let element = createSvgTextElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreak(<any>element[0], 25 /* maxLength */, 20 * 1 /* maxHeight */);\r\n\r\n                let text = $(element).text();\r\n                expect($(element).find('tspan').length).toBe(1);\r\n                expect(jsCommon.StringExtensions.endsWith(text, Ellipsis)).toBeTruthy();\r\n            });\r\n\r\n            it('with breaks and ellipses', () => {\r\n                let originalText = \"PowerBI rocks!\";\r\n                let element = createSvgTextElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreak(<any>element[0], 25 /* maxLength */, 20 * 2 /* maxHeight */);\r\n\r\n                let text = $(element).text();\r\n                expect($(element).find('tspan').length).toBe(2);\r\n                expect(text.match(RegExp(Ellipsis, 'g')).length).toBe(2);\r\n            });\r\n\r\n            it('with breaks but forced to single line', () => {\r\n                let originalText = \"PowerBI rocks!\";\r\n                let element = createSvgTextElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreak(<any>element[0], 25 /* maxLength */, 20 * 1 /* maxHeight */);\r\n\r\n                let text = $(element).text();\r\n                expect($(element).find('tspan').length).toBe(1);\r\n                expect(jsCommon.StringExtensions.endsWith(text, Ellipsis)).toBeTruthy();\r\n            });\r\n\r\n            it('with breaks but forced to single line due to low max height', () => {\r\n                let originalText = \"PowerBI rocks!\";\r\n                let element = createSvgTextElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreak(<any>element[0], 25 /* maxLength */, 1 /* maxHeight */);\r\n\r\n                let text = $(element).text();\r\n                expect($(element).find('tspan').length).toBe(1);\r\n                expect(jsCommon.StringExtensions.endsWith(text, Ellipsis)).toBeTruthy();\r\n            });\r\n\r\n            it('with breaks multiple words on each line', () => {\r\n                let originalText = \"The Quick Brown Fox Jumped Over The Lazy Dog\";\r\n                let element = createSvgTextElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreak(<any>element[0], 75 /* maxLength */, 20 * 3 /* maxHeight */);\r\n\r\n                let text = $(element).text();\r\n                expect($(element).find('tspan').length).toBe(3);\r\n                expect(jsCommon.StringExtensions.endsWith(text, Ellipsis)).toBeTruthy();\r\n            });\r\n        });\r\n\r\n        describe('wordBreakOverflowingText', () => {\r\n            it('with no breaks', () => {\r\n                var originalText = \"ContentWithNoBreaks!\";\r\n                var element = createSpanElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreakOverflowingText(<any>element[0], 25 /* maxLength */, 20 * 1 /* maxHeight */);\r\n                var children = getChildren(element);\r\n                expect(children.length).toBe(1);\r\n                helpers.verifyEllipsisActive(children.first());\r\n            });\r\n\r\n            it('with breaks and ellipses', () => {\r\n                var originalText = \"PowerBI rocks!\";\r\n                var element = createSpanElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreakOverflowingText(<any>element[0], 25 /* maxLength */, 20 * 2 /* maxHeight */);\r\n\r\n                var children = getChildren(element);\r\n                expect(children.length).toBe(2);\r\n                helpers.verifyEllipsisActive(children.first());\r\n                helpers.verifyEllipsisActive(children.last());\r\n            });\r\n\r\n            it('with breaks but forced to single line', () => {\r\n                var originalText = \"PowerBI rocks!\";\r\n                var element = createSpanElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreakOverflowingText(<any>element[0], 25 /* maxLength */, 20 * 1 /* maxHeight */);\r\n\r\n                var children = getChildren(element);\r\n                expect(children.length).toBe(1);\r\n                helpers.verifyEllipsisActive(children.first());\r\n            });\r\n\r\n            it('with breaks but forced to single line due to low max height', () => {\r\n                var originalText = \"PowerBI rocks!\";\r\n                var element = createSpanElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreakOverflowingText(<any>element[0], 25 /* maxLength */, 1 /* maxHeight */);\r\n\r\n                var children = getChildren(element);\r\n                expect(children.length).toBe(1);\r\n                helpers.verifyEllipsisActive(children.first());\r\n            });\r\n\r\n            it('with breaks multiple words on each line', () => {\r\n                var originalText = \"The Quick Brown Fox Jumped Over The Lazy Dog\";\r\n                var element = createSpanElement(originalText);\r\n                attachToDom(element);\r\n\r\n                TextMeasurementService.wordBreakOverflowingText(<any>element[0], 75 /* maxLength */, 20 * 3 /* maxHeight */);\r\n\r\n                var children = getChildren(element);\r\n                expect(children.length).toBe(3);\r\n                helpers.verifyEllipsisActive(children.last());\r\n            });\r\n\r\n            function getChildren(element: JQuery): JQuery {\r\n                return $(element).children();\r\n            }\r\n        });\r\n\r\n        function attachToDom(element: JQuery|Element): JQuery {\r\n            let dom = powerbitests.helpers.testDom('100px', '100px');\r\n            dom.append([element]);\r\n            return dom;\r\n        }\r\n\r\n        function createSvgTextElement(text: string): SVGTextElement {\r\n            let svg = $(\"<svg>\");\r\n            let element = d3.select($(\"<text>\").get(0)).text(text);\r\n            svg.append(element);\r\n\r\n            return element[0];\r\n        }\r\n\r\n        function createSpanElement(text: string): JQuery {\r\n            var element = $(\"<span>\");\r\n            element.text(text);\r\n            \r\n            return element;\r\n        }\r\n\r\n        function getTextProperties(fontSize: number, text?: string, fontFamily?: string): TextProperties {\r\n            return {\r\n                fontFamily: fontFamily ? fontFamily : \"Arial\",\r\n                fontSize: fontSize + \"px\",\r\n                text: text ? text : \"PowerBI rocks!\",\r\n            };\r\n        }\r\n    });\r\n}"],"sourceRoot":"/source/"}