{"version":3,"sources":["visuals/common/pluginTests.ts"],"names":["powerbitests","powerbitests.initVisual","powerbitests.setData","powerbitests.changeData"],"mappings":"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","file":"visuals/common/pluginTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import DataViewObjectDescriptors = powerbi.data.DataViewObjectDescriptors;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import IVisual = powerbi.IVisual;\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    describe(\"VisualFactory\", () => {\r\n\r\n        let dataViewMetadataTwoColumn: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: \"col1\",\r\n                    queryName: \"col1\",\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                },\r\n                {\r\n                    displayName: \"col2\",\r\n                    queryName: \"col2\",\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                }\r\n            ],\r\n        };\r\n\r\n        let categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"col1\" });\r\n\r\n        function initVisual(v: powerbi.IVisual): void {\r\n            let hostServices = powerbitests.mocks.createVisualHostServices();\r\n            let element = powerbitests.helpers.testDom(\"500\", \"500\");\r\n\r\n            v.init({\r\n                element: element,\r\n                host: hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                settings: undefined,\r\n                interactivity: undefined,\r\n                animation: undefined\r\n            });\r\n        }\r\n\r\n        function setData(v: powerbi.IVisual, objectDescs: DataViewObjectDescriptors): void {\r\n            // full\r\n            changeData(v, objectDescs, [{\r\n                metadata: dataViewMetadataTwoColumn,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataTwoColumn.columns[0],\r\n                        values: [\"abc\", \"def\"],\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentityWithEquality(categoryColumnRef, \"abc\"),\r\n                            mocks.dataViewScopeIdentityWithEquality(categoryColumnRef, \"def\")],\r\n                        identityFields: [categoryColumnRef]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            min: 123,\r\n                            max: 234,\r\n                            subtotal: 357,\r\n                            values: [123, 234]\r\n                        }\r\n                    ])\r\n                }\r\n            }]);\r\n\r\n            // empty\r\n            changeData(v, objectDescs, []);\r\n\r\n            // no categorical\r\n            changeData(v, objectDescs, [{\r\n                metadata: dataViewMetadataTwoColumn,\r\n                categorical: undefined\r\n            }]);\r\n\r\n            // no metadata\r\n            changeData(v, objectDescs, [{\r\n                metadata: undefined,\r\n                categorical: {\r\n                    categories: [],\r\n                    values: undefined\r\n                }\r\n            }]);\r\n\r\n            // no categorical.values\r\n            changeData(v, objectDescs, [{\r\n                metadata: dataViewMetadataTwoColumn,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataTwoColumn.columns[0],\r\n                        values: [\"abc\", \"def\"],\r\n                        identity: [mocks.dataViewScopeIdentity(\"abc\"), mocks.dataViewScopeIdentity(\"def\")],\r\n                        identityFields: [categoryColumnRef]\r\n                    }],\r\n                    values: undefined\r\n                }\r\n            }]);\r\n\r\n            // no categories\r\n            changeData(v, objectDescs, [{\r\n                metadata: dataViewMetadataTwoColumn,\r\n                categorical: {\r\n                    categories: undefined,\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            min: 123,\r\n                            max: 123,\r\n                            subtotal: 123,\r\n                            values: [123]\r\n                        }\r\n                    ])\r\n                }\r\n            }]);\r\n\r\n            // no values\r\n            changeData(v, objectDescs, [{\r\n                metadata: dataViewMetadataTwoColumn,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataTwoColumn.columns[0],\r\n                        values: [\"abc\", \"def\"],\r\n                        identity: [mocks.dataViewScopeIdentity(\"abc\"), mocks.dataViewScopeIdentity(\"def\")],\r\n                        identityFields: [categoryColumnRef]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([])\r\n                }\r\n            }]);\r\n\r\n            // no values.values\r\n            changeData(v, objectDescs, [{\r\n                metadata: dataViewMetadataTwoColumn,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataTwoColumn.columns[0],\r\n                        values: [\"abc\", \"def\"],\r\n                        identity: [mocks.dataViewScopeIdentity(\"abc\"), mocks.dataViewScopeIdentity(\"def\")],\r\n                        identityFields: [categoryColumnRef]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: []\r\n                        }\r\n                    ])\r\n                }\r\n            }]);\r\n\r\n            // no categories.values\r\n            changeData(v, objectDescs, [{\r\n                metadata: dataViewMetadataTwoColumn,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataTwoColumn.columns[0],\r\n                        values: [],\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: []\r\n                        }\r\n                    ])\r\n                }\r\n            }]);\r\n        }\r\n\r\n        function changeData(visual: IVisual, objectDescs: DataViewObjectDescriptors, dataViews: powerbi.DataView[]): void {\r\n            if (visual.onDataChanged) {\r\n                visual.onDataChanged({ dataViews: dataViews });\r\n            } else if (visual.update) {\r\n                visual.update({ dataViews: dataViews, viewport: { height: 100, width: 100 } });\r\n            }\r\n\r\n            if (visual.enumerateObjectInstances && objectDescs) {\r\n                for (let objectName in objectDescs)\r\n                    visual.enumerateObjectInstances({ objectName: objectName });\r\n            }\r\n        }\r\n\r\n        it(\"VisualFactory.getVisuals - categorical - various dataViews\", () => {\r\n            let allVisuals = powerbi.visuals.visualPluginFactory.create().getVisuals();\r\n\r\n            for (let i = 0; i < allVisuals.length; i++) {\r\n                let exception = null,\r\n                    visualPlugin: powerbi.IVisualPlugin = allVisuals[i];\r\n\r\n                if (visualPlugin.name !== \"categoricalFilter\" &&\r\n                    visualPlugin.name !== \"consoleWriter\" && \r\n                    visualPlugin.name !== \"streamGraph\" &&\r\n                    visualPlugin.capabilities &&\r\n                    visualPlugin.capabilities.dataViewMappings &&\r\n                    visualPlugin.capabilities.dataViewMappings.length > 0 &&\r\n                    visualPlugin.capabilities.dataViewMappings[0].categorical) {\r\n                    let visual: powerbi.IVisual = visualPlugin.create();\r\n\r\n                    try {\r\n                        initVisual(visual);\r\n                        setData(visual, visualPlugin.capabilities.objects);\r\n                    } catch (e) {\r\n                        exception = e;\r\n                        debug.assertFail(visualPlugin.name + \" : \" + e.message);\r\n                    } finally {\r\n                        expect(exception).toBeNull();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}