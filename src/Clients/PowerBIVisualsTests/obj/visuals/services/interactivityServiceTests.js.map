{"version":3,"sources":["visuals/services/interactivityServiceTests.ts"],"names":["powerbitests","powerbitests.getSelectedIds","powerbitests.MockDefaultValueHandler","powerbitests.MockDefaultValueHandler.constructor","powerbitests.MockDefaultValueHandler.getIdentityFields","powerbitests.MockDefaultValueHandler.getDefaultValue"],"mappings":"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sBAAsBA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;YACxDA,MAAMA,CAACA,QAAQA,CAACA,eAAeA,CAACA,CAACA,oBAAoBA,CAACA,IAAIA,CAACA,CAACA;YAC5DA,oBAAoBA,CAACA,yBAAyBA,CAACA,aAAaA,CAACA,CAACA;YAC9DA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,UAAUA,EAAEA,CAACA;YAC/CA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,SAASA,EAAEA,CAACA;YAC9CA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,SAASA,EAAEA,CAACA;YAC9CA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,SAASA,EAAEA,CAACA;YAC9CA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,SAASA,EAAEA,CAACA;YAC9CA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,SAASA,EAAEA,CAACA;QAClDA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,+BAA+BA,EAAEA;YAChCA,KAAKA,CAACA,QAAQA,EAAEA,iBAAiBA,CAACA,CAACA;YACnCA,oBAAoBA,CAACA,IAAIA,CAACA,oBAAoBA,EAAEA,QAAQA,EAAEA,IAAIA,CAACA,CAACA;YAChEA,QAAQA,CAACA,WAAWA,CAACA,CAACA,EAAEA,KAAKA,CAACA,CAACA;YAC/BA,QAAQA,CAACA,KAAKA,EAAEA,CAACA;YACjBA,MAAMA,CAACA,QAAQA,CAACA,aAAaA,EAAEA,CAACA,CAACA,UAAUA,EAAEA,CAACA;YAC9CA,MAAMA,CAACA,QAAQA,CAACA,eAAeA,CAACA,CAACA,oBAAoBA,CAACA,KAAKA,CAACA,CAACA;YAC7DA,MAAMA,CAACA,oBAAoBA,CAACA,YAAYA,EAAEA,CAACA,CAACA,SAASA,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","file":"visuals/services/interactivityServiceTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import SelectableDataPoint = powerbi.visuals.SelectableDataPoint;\r\n    import SelectionId = powerbi.visuals.SelectionId;\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n    import MockBehavior = powerbitests.mocks.MockBehavior;\r\n\r\n    describe('Interactivity service', () => {\r\n        let host: powerbi.IVisualHostServices;\r\n        let interactivityService: powerbi.visuals.InteractivityService;\r\n        let selectableDataPoints: SelectableDataPoint[];\r\n        let behavior: MockBehavior;\r\n        let filterPropertyId: powerbi.DataViewObjectPropertyIdentifier;\r\n\r\n        beforeEach(() => {\r\n            host = powerbitests.mocks.createVisualHostServices();\r\n            host.canSelect = () => true; // Allows for multiselect behavior by default\r\n            interactivityService = <powerbi.visuals.InteractivityService>powerbi.visuals.createInteractivityService(host);\r\n            selectableDataPoints = <SelectableDataPoint[]> [\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"0\"), mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"0\"), mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"1\"), mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"1\"), mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"2\"), mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"2\"), mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n            ];\r\n            filterPropertyId = {\r\n                objectName: 'general',\r\n                propertyName: 'selected'\r\n            };\r\n            behavior = new MockBehavior(selectableDataPoints, filterPropertyId);\r\n        });\r\n\r\n        it('Basic binding', () => {\r\n            spyOn(behavior, \"bindEvents\");\r\n            spyOn(behavior, \"renderSelection\");\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            expect(behavior.bindEvents).toHaveBeenCalled();\r\n            expect(behavior.verifyCleared()).toBeTruthy();\r\n            expect(behavior.renderSelection).not.toHaveBeenCalled();\r\n            expect(interactivityService.hasSelection()).toBeFalsy();\r\n        });\r\n\r\n        it('Binding passes behaviorOptions', () => {\r\n            spyOn(behavior, \"bindEvents\");\r\n            let arbitraryBehaviorOptions = {\r\n                some: \"random\",\r\n                collection: \"of\",\r\n                random: \"stuff\",\r\n            };\r\n            interactivityService.bind(selectableDataPoints, behavior, arbitraryBehaviorOptions);\r\n            expect(behavior.bindEvents).toHaveBeenCalledWith(arbitraryBehaviorOptions, interactivityService);\r\n        });\r\n\r\n        it('Basic selection', () => {\r\n            spyOn(behavior, \"renderSelection\");\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(0, false);\r\n            expect(behavior.verifySingleSelectedAt(0)).toBeTruthy();\r\n            expect(behavior.renderSelection).toHaveBeenCalledWith(true);\r\n            expect(interactivityService.hasSelection()).toBeTruthy();\r\n        });\r\n\r\n        it('Apply selection', () => {\r\n            let newDataPoints = <SelectableDataPoint[]>[\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"0\"), mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"0\"), mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"1\"), mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"1\"), mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"2\"), mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdsAndMeasure(mocks.dataViewScopeIdentity(\"2\"), mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n            ];\r\n            spyOn(behavior, \"renderSelection\");\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(0, false);\r\n            expect(behavior.verifySingleSelectedAt(0)).toBeTruthy();\r\n            expect(behavior.renderSelection).toHaveBeenCalledWith(true);\r\n            interactivityService.applySelectionStateToData(newDataPoints);\r\n            expect(newDataPoints[0].selected).toBeTruthy();\r\n            expect(newDataPoints[1].selected).toBeFalsy();\r\n            expect(newDataPoints[2].selected).toBeFalsy();\r\n            expect(newDataPoints[3].selected).toBeFalsy();\r\n            expect(newDataPoints[4].selected).toBeFalsy();\r\n            expect(newDataPoints[5].selected).toBeFalsy();\r\n        });\r\n\r\n        it('Clear selection through event', () => {\r\n            spyOn(behavior, \"renderSelection\");\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(0, false);\r\n            behavior.clear();\r\n            expect(behavior.verifyCleared()).toBeTruthy();\r\n            expect(behavior.renderSelection).toHaveBeenCalledWith(false);\r\n            expect(interactivityService.hasSelection()).toBeFalsy();\r\n        });\r\n\r\n        it('Clear selection through service', () => {\r\n            spyOn(behavior, \"renderSelection\");\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(0, false);\r\n            interactivityService.clearSelection();\r\n            expect(behavior.verifyCleared()).toBeTruthy();\r\n            expect(behavior.renderSelection).toHaveBeenCalledWith(false);\r\n            expect(interactivityService.hasSelection()).toBeFalsy();\r\n        });\r\n\r\n        it('Clear selection should reset isInvertedSelectionMode for defaultValue ', () => {\r\n            let slicerDefaultValueHandler = new MockDefaultValueHandler();\r\n            interactivityService.bind(\r\n                selectableDataPoints,\r\n                behavior,\r\n                null,\r\n                {\r\n                    overrideSelectionFromData: true,\r\n                    hasSelectionOverride: false,\r\n                    slicerDefaultValueHandler: slicerDefaultValueHandler,\r\n                });\r\n            interactivityService.setSelectionModeInverted(true);\r\n            interactivityService.clearSelection();\r\n            expect(interactivityService.isSelectionModeInverted()).toBe(false);\r\n        });\r\n\r\n        it('Selection sent to host', () => {\r\n            spyOn(host, \"onSelect\");\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(0, false);\r\n            expect(host.onSelect).toHaveBeenCalledWith({ data: [selectableDataPoints[0].identity.getSelector()] });\r\n        });\r\n\r\n        it('persistSelectionFilter calls persistProperties', () => {\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            spyOn(host, \"persistProperties\");\r\n            behavior.selectIndexAndPersist(0, false);\r\n\r\n            let changes = interactivityService.createChangeForFilterProperty(filterPropertyId);\r\n\r\n            interactivityService.persistSelectionFilter(filterPropertyId);\r\n\r\n            expect(host.persistProperties).toHaveBeenCalledWith(changes);\r\n        });\r\n\r\n        describe('createChangeForFilterProperty', () => {\r\n            beforeEach(() => {\r\n                interactivityService.bind(selectableDataPoints, behavior, null);\r\n            });\r\n\r\n            it('select a single data point', () => {\r\n                behavior.selectIndexAndPersist(0, false);\r\n                \r\n                let changes = interactivityService.createChangeForFilterProperty(filterPropertyId);\r\n                \r\n                expect(changes).toEqual({\r\n                    merge: [{\r\n                        objectName: 'general',\r\n                        selector: undefined,\r\n                        properties: {\r\n                            'selected': powerbi.data.Selector.filterFromSelector([selectableDataPoints[0].identity.getSelector()], false),\r\n                        }\r\n                    }]\r\n                });\r\n            });\r\n\r\n            it('no selection should result in empty filter', () => {\r\n                let changes = interactivityService.createChangeForFilterProperty(filterPropertyId);\r\n\r\n                expect(changes).toEqual({\r\n                    remove: [{\r\n                        objectName: 'general',\r\n                        selector: undefined,\r\n                        properties: {\r\n                            'selected': { },\r\n                        }\r\n                    }]\r\n                });\r\n            });\r\n        });\r\n\r\n        it('Multiple single selects', () => {\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            for (let i = 0, ilen = selectableDataPoints.length; i < ilen; i++) {\r\n                behavior.selectIndex(i, false);\r\n                expect(behavior.verifySingleSelectedAt(i)).toBeTruthy();\r\n            }\r\n        });\r\n\r\n        it('Single select clears', () => {\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(1, false);\r\n            expect(behavior.verifySingleSelectedAt(1)).toBeTruthy();\r\n            behavior.selectIndex(1, false);\r\n            expect(behavior.verifyCleared()).toBeTruthy();\r\n        });\r\n\r\n        it('Basic multiselect', () => {\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(1, true);\r\n            expect(behavior.verifySelectionState([false, true, false, false, false, false])).toBeTruthy();\r\n            behavior.selectIndex(2, true);\r\n            expect(behavior.verifySelectionState([false, true, true, false, false, false])).toBeTruthy();\r\n            behavior.selectIndex(5, true);\r\n            expect(behavior.verifySelectionState([false, true, true, false, false, true])).toBeTruthy();\r\n        });\r\n\r\n        it('Multiselect clears', () => {\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(1, true);\r\n            expect(behavior.verifySelectionState([false, true, false, false, false, false])).toBeTruthy();\r\n            behavior.selectIndex(2, true);\r\n            expect(behavior.verifySelectionState([false, true, true, false, false, false])).toBeTruthy();\r\n            behavior.selectIndex(1, true);\r\n            expect(behavior.verifySelectionState([false, false, true, false, false, false])).toBeTruthy();\r\n            behavior.selectIndex(5, true);\r\n            expect(behavior.verifySelectionState([false, false, true, false, false, true])).toBeTruthy();\r\n            behavior.selectIndex(5, true);\r\n            expect(behavior.verifySelectionState([false, false, true, false, false, false])).toBeTruthy();\r\n        });\r\n\r\n        it('Single and multiselect', () => {\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(1, false);\r\n            expect(behavior.verifySingleSelectedAt(1)).toBeTruthy();\r\n            behavior.selectIndex(2, true);\r\n            expect(behavior.verifySelectionState([false, true, true, false, false, false])).toBeTruthy();\r\n            behavior.selectIndex(5, true);\r\n            expect(behavior.verifySelectionState([false, true, true, false, false, true])).toBeTruthy();\r\n            behavior.selectIndex(3, false);\r\n            expect(behavior.verifySingleSelectedAt(3)).toBeTruthy();\r\n            behavior.selectIndex(0, true);\r\n            expect(behavior.verifySelectionState([true, false, false, true, false, false])).toBeTruthy();\r\n        });\r\n\r\n        it('Multiselect treated as single select when host says selection is invalid', () => {\r\n            host.canSelect = () => false;\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            behavior.selectIndex(1, true);\r\n            expect(behavior.verifySelectionState([false, true, false, false, false, false])).toBeTruthy();\r\n            behavior.selectIndex(2, true);\r\n            expect(behavior.verifySelectionState([false, false, true, false, false, false])).toBeTruthy();\r\n            behavior.selectIndex(5, true);\r\n            expect(behavior.verifySelectionState([false, false, false, false, false, true])).toBeTruthy();\r\n        });\r\n\r\n        describe('overrideSelectionFromData', () => {\r\n            it('with', () => {\r\n                selectableDataPoints[5].selected = true;\r\n                interactivityService.bind(selectableDataPoints, behavior, null, { overrideSelectionFromData: true });\r\n\r\n                expect(interactivityService.hasSelection()).toBeTruthy();\r\n            });\r\n\r\n            it('without', () => {\r\n                selectableDataPoints[5].selected = true;\r\n                interactivityService.bind(selectableDataPoints, behavior, null);\r\n\r\n                expect(interactivityService.hasSelection()).toBeFalsy();\r\n            });\r\n        });\r\n\r\n        describe('Legend', () => {\r\n            it('Selection', () => {\r\n                let legendDataPoints = [\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n                ];\r\n                let legendBehavior = new MockBehavior(legendDataPoints, null);\r\n                interactivityService.bind(selectableDataPoints, behavior, null);\r\n                interactivityService.bind(legendDataPoints, legendBehavior, null, { isLegend: true });\r\n\r\n                legendBehavior.selectIndex(0);\r\n                expect(legendBehavior.verifySingleSelectedAt(0)).toBeTruthy();\r\n                expect(behavior.verifySelectionState([true, false, true, false, true, false])).toBeTruthy();\r\n                expect(interactivityService.hasSelection()).toBeTruthy();\r\n                expect(interactivityService.legendHasSelection()).toBeTruthy();\r\n\r\n                behavior.selectIndex(1);\r\n                expect(behavior.verifySingleSelectedAt(1)).toBeTruthy();\r\n                expect(legendBehavior.verifyCleared()).toBeTruthy();\r\n                expect(interactivityService.hasSelection()).toBeTruthy();\r\n                expect(interactivityService.legendHasSelection()).toBeFalsy();\r\n            });\r\n\r\n            it('Datapoint selection syncs legend datapoints', () => {    \r\n                // Datapoints\r\n                let selectableDataPoints = [\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n                ];\r\n                behavior = new MockBehavior(selectableDataPoints, filterPropertyId);\r\n                interactivityService.bind(selectableDataPoints, behavior, null);\r\n\r\n                // Legend datapoints\r\n                let legendDataPoints = [\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n                ];\r\n                let legendBehavior = new MockBehavior(legendDataPoints, filterPropertyId);\r\n                interactivityService.bind(legendDataPoints, legendBehavior, null, { isLegend: true });\r\n\r\n                // Trigger selection on datapoints\r\n                behavior.selectIndex(1);\r\n                expect(behavior.verifySelectionState([false, true])).toBeTruthy();\r\n                expect(legendBehavior.verifySelectionState([false, true])).toBeTruthy();\r\n                expect(interactivityService.hasSelection()).toBeTruthy();\r\n                expect(interactivityService.legendHasSelection()).toBeTruthy();\r\n\r\n                // Trigger selection on legend\r\n                legendBehavior.selectIndex(0);\r\n                expect(behavior.verifySelectionState([true, false])).toBeTruthy();\r\n                expect(legendBehavior.verifySelectionState([true, false])).toBeTruthy();\r\n                expect(interactivityService.hasSelection()).toBeTruthy();\r\n                expect(interactivityService.legendHasSelection()).toBeTruthy();\r\n\r\n                // Trigger selection on datapoints\r\n                behavior.selectIndex(0);\r\n                expect(behavior.verifySelectionState([false, false])).toBeTruthy();\r\n                expect(legendBehavior.verifySelectionState([false, false])).toBeTruthy();\r\n                expect(interactivityService.hasSelection()).toBeFalsy();\r\n                expect(interactivityService.legendHasSelection()).toBeFalsy();\r\n            });\r\n\r\n            it('Invalid selection without selectableDataPoints (only legendDataPoints)', () => {\r\n                let legendDataPoints = [\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n                ];\r\n                let legendBehavior = new MockBehavior(legendDataPoints, null);\r\n                interactivityService.bind(legendDataPoints, legendBehavior, null, { isLegend: true });\r\n\r\n                // Select first legend item\r\n                legendBehavior.selectIndex(0);\r\n                expect(legendBehavior.verifySelectionState([true, false])).toBeTruthy();\r\n\r\n                // New legend datapoints\r\n                let newLegendDataPoints = [\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"c\"), \"queryName\") },\r\n                    { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"d\"), \"queryName\") },\r\n                ];\r\n                legendBehavior = new MockBehavior(newLegendDataPoints, null);\r\n                interactivityService.bind(newLegendDataPoints, legendBehavior, null, { isLegend: true });\r\n\r\n                // Select a new legend item\r\n                legendBehavior.selectIndex(0);\r\n                expect(legendBehavior.verifySelectionState([true, false])).toBeTruthy();\r\n\r\n                // Attempting to select an invalid legend item should clearSelection\r\n                legendBehavior.select(legendDataPoints[1]);\r\n\r\n                expect(legendBehavior.verifySelectionState([false, false])).toBeTruthy();\r\n                expect(interactivityService.hasSelection()).toBeFalsy();\r\n                expect(interactivityService.legendHasSelection()).toBeFalsy();\r\n            });\r\n        });\r\n\r\n        it('Label selection', () => {\r\n            let labelsDataPoints = [\r\n                { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"a\"), \"queryName\") },\r\n                { selected: false, identity: SelectionId.createWithIdAndMeasure(mocks.dataViewScopeIdentity(\"b\"), \"queryName\") },\r\n            ];\r\n            let labelBehavior = new MockBehavior(labelsDataPoints, null);\r\n            interactivityService.bind(selectableDataPoints, behavior, null);\r\n            interactivityService.bind(labelsDataPoints, labelBehavior, null, { isLabels: true });\r\n\r\n            labelBehavior.selectIndex(0);\r\n            labelBehavior.verifySingleSelectedAt(0);\r\n            behavior.verifySelectionState([true, false, true, false, true, false]);\r\n            expect(interactivityService.hasSelection()).toBeTruthy();\r\n            expect(interactivityService.labelsHasSelection()).toBeTruthy();\r\n\r\n            behavior.selectIndex(1);\r\n            behavior.verifySingleSelectedAt(1);\r\n            labelBehavior.verifyCleared();\r\n            expect(interactivityService.hasSelection()).toBeTruthy();\r\n            expect(interactivityService.labelsHasSelection()).toBeFalsy();\r\n        });\r\n\r\n        it('Slicer selection', () => {\r\n            selectableDataPoints[5].selected = true;\r\n            interactivityService.bind(selectableDataPoints, behavior, null, { overrideSelectionFromData: true });\r\n\r\n            // Multiple binds to simulate reloading (should not result in dupes in filter condition).\r\n            selectableDataPoints[5].selected = true;\r\n            interactivityService.bind(selectableDataPoints, behavior, null, { overrideSelectionFromData: true });\r\n\r\n            let onSelectSpy = spyOn(host, 'onSelect');\r\n\r\n            behavior.selectIndex(0, true);\r\n\r\n            expect(behavior.selections()).toEqual([true, false, false, false, false, true]);\r\n            expect(getSelectedIds(interactivityService)).toEqual([\r\n                selectableDataPoints[5].identity,\r\n                selectableDataPoints[0].identity,\r\n            ]);\r\n\r\n            expect(host.onSelect).toHaveBeenCalled();\r\n            expect(onSelectSpy.calls.argsFor(0)).toEqual([<powerbi.SelectEventArgs>{\r\n                data: [\r\n                    selectableDataPoints[5].identity.getSelector(),\r\n                    selectableDataPoints[0].identity.getSelector(),\r\n                ]\r\n            }]);\r\n        });\r\n\r\n        it('Slicer selection with default value', () => {\r\n            let propertyIdentifier: powerbi.DataViewObjectPropertyIdentifier = {\r\n                objectName: 'general',\r\n                propertyName: 'property'\r\n            };\r\n            selectableDataPoints[5].selected = true;\r\n            interactivityService.bind(selectableDataPoints, behavior, null, { slicerDefaultValueHandler: new MockDefaultValueHandler() });\r\n            interactivityService.setDefaultValueMode(true);\r\n            let result = (<powerbi.visuals.InteractivityService>interactivityService).createChangeForFilterProperty(propertyIdentifier);\r\n\r\n            expect(powerbi.data.SemanticFilter.isDefaultFilter(<powerbi.data.SemanticFilter>result.merge[0].properties['property'])).toBeTruthy();\r\n        });\r\n\r\n        it('Slicer selection with any value', () => {\r\n            let propertyIdentifier: powerbi.DataViewObjectPropertyIdentifier = {\r\n                objectName: 'general',\r\n                propertyName: 'property'\r\n            };\r\n            interactivityService.bind(selectableDataPoints, behavior, null, { slicerDefaultValueHandler: new MockDefaultValueHandler() });\r\n            interactivityService.setDefaultValueMode(false);\r\n            let result = (<powerbi.visuals.InteractivityService>interactivityService).createChangeForFilterProperty(propertyIdentifier);\r\n\r\n            expect(powerbi.data.SemanticFilter.isAnyFilter(<powerbi.data.SemanticFilter>result.merge[0].properties['property'])).toBeTruthy();\r\n        });\r\n    });\r\n\r\n    function getSelectedIds(interactivityService: powerbi.visuals.IInteractivityService): SelectionId[] {    \r\n        // Accessing a private member.\r\n        return interactivityService['selectedIds'];\r\n    }\r\n\r\n    class MockDefaultValueHandler implements powerbi.visuals.SlicerDefaultValueHandler {\r\n        public getIdentityFields(): powerbi.data.SQExpr[]{\r\n            return [SQExprBuilder.columnRef(SQExprBuilder.entity('s', 'Entity2'), 'Prop2')];\r\n        }\r\n\r\n        public getDefaultValue(): powerbi.data.SQConstantExpr{\r\n            return SQExprBuilder.integer(2);\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}