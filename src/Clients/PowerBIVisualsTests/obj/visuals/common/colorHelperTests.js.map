{"version":3,"sources":["visuals/common/colorHelperTests.ts"],"names":["powerbitests"],"mappings":"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","file":"visuals/common/colorHelperTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import ColorHelper = powerbi.visuals.ColorHelper;\r\n    import SQExprShortSerializer = powerbi.data.SQExprShortSerializer;\r\n\r\n    describe(\"Color Helper\", () => {\r\n        let palette: powerbi.IDataColorPalette;\r\n\r\n        let columnIdentity = powerbi.data.SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"sales\" });\r\n        let columnIdentity2 = powerbi.data.SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"profit\" });\r\n        let fillProp = <powerbi.DataViewObjectPropertyIdentifier>{ objectName: \"dataPoint\", propertyName: \"fill\" };\r\n\r\n        const colors = [\r\n            { value: \"#000000\" },\r\n            { value: \"#000001\" },\r\n            { value: \"#000002\" },\r\n            { value: \"#000003\" }\r\n        ];\r\n\r\n        beforeEach(() => {\r\n            palette = new powerbi.visuals.DataColorPalette(colors);\r\n        });\r\n\r\n        describe(\"getColorForSeriesValue\", () => {\r\n\r\n            it(\"should return fill property value if it exists\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp, \"defaultColor\");\r\n\r\n                let objects: powerbi.DataViewObjects = {\r\n                    dataPoint: {\r\n                        fill: { solid: { color: \"red\" } }\r\n                    }\r\n                };\r\n\r\n                let color = colorHelper.getColorForSeriesValue(objects, [columnIdentity], \"value\");\r\n\r\n                expect(color).toEqual(\"red\");\r\n            });\r\n\r\n            it(\"should return default color if no fill property is defined\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp, \"defaultColor\");\r\n\r\n                let color = colorHelper.getColorForSeriesValue(/* no objects */ undefined, [columnIdentity], \"value\");\r\n\r\n                expect(color).toEqual(\"defaultColor\");\r\n            });\r\n\r\n            it(\"should return scale color if neither fill property nor default color is defined\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp, /* no default color */ undefined);\r\n\r\n                let color = colorHelper.getColorForSeriesValue(/* no objects */ undefined, [columnIdentity], \"value\");\r\n\r\n                let expectedColor = palette.getColorScaleByKey(SQExprShortSerializer.serializeArray([columnIdentity])).getColor(\"value\").value;\r\n                expect(color).toEqual(expectedColor);\r\n            });\r\n\r\n            it(\"should handle undefined identity array\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp);\r\n\r\n                let color = colorHelper.getColorForSeriesValue(undefined, undefined, \"value\");\r\n\r\n                let expectedColor = palette.getColorScaleByKey(SQExprShortSerializer.serializeArray([])).getColor(\"value\").value;\r\n                expect(color).toEqual(expectedColor);\r\n            });\r\n\r\n            it(\"should return the same color for the same series and value\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp);\r\n\r\n                let color1 = colorHelper.getColorForSeriesValue(null, [columnIdentity], \"value\");\r\n                let color2 = colorHelper.getColorForSeriesValue(null, [columnIdentity], \"value\");\r\n\r\n                expect(color1).toEqual(color2);\r\n            });\r\n        });\r\n\r\n        describe(\"getColorScaleForSeries\", () => {\r\n            it(\"same series identity returns the same scale\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp);\r\n\r\n                let scale1 = colorHelper.getColorScaleForSeries([columnIdentity]);\r\n\r\n                scale1.getColor('value1');\r\n                let color2 = scale1.getColor('value2');\r\n\r\n                let scale2 = colorHelper.getColorScaleForSeries([columnIdentity]);\r\n\r\n                expect(scale2.getColor('value2')).toEqual(color2);\r\n            });\r\n\r\n            it(\"different series identities return different scales\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp);\r\n\r\n                let scale1 = colorHelper.getColorScaleForSeries([columnIdentity]);\r\n                let scale2 = colorHelper.getColorScaleForSeries([columnIdentity2]);\r\n\r\n                scale1.getColor('value1');\r\n                let color2 = scale1.getColor('value2');\r\n\r\n                expect(scale2.getColor('value2')).not.toEqual(color2);\r\n            });\r\n        });\r\n\r\n        describe(\"getColorForMeasure\", () => {\r\n            it(\"should return fill property value if it exists\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp, \"defaultColor\");\r\n\r\n                let objects: powerbi.DataViewObjects = {\r\n                    dataPoint: {\r\n                        fill: { solid: { color: \"red\" } }\r\n                    }\r\n                };\r\n\r\n                let color = colorHelper.getColorForMeasure(objects, 0);\r\n\r\n                expect(color).toEqual(\"red\");\r\n            });\r\n\r\n            it(\"should return default color if no fill property is defined\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp, \"defaultColor\");\r\n\r\n                let color = colorHelper.getColorForMeasure(/* no objects */ undefined, 0);\r\n\r\n                expect(color).toEqual(\"defaultColor\");\r\n            });\r\n\r\n            it(\"should return scale color if neither fill property nor default color is defined\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp, /* no default color */ undefined);\r\n\r\n                let color = colorHelper.getColorForMeasure(undefined, 0);\r\n\r\n                expect(color).toEqual(colors[0].value);\r\n            });\r\n\r\n            it(\"should return the nth color for the nth measure even if colors are explicitly set\", () => {\r\n                let colorHelper = new ColorHelper(palette, fillProp);\r\n\r\n                let objects: powerbi.DataViewObjects = {\r\n                    dataPoint: { fill: { solid: { color: \"red\" } } }\r\n                };\r\n\r\n                let color1 = colorHelper.getColorForMeasure(null, 0);\r\n                let color2 = colorHelper.getColorForMeasure(objects, 1);\r\n                let color3 = colorHelper.getColorForMeasure(null, 2);\r\n\r\n                expect(color1).toEqual(colors[0].value);\r\n                expect(color2).toEqual(\"red\");\r\n                expect(color3).toEqual(colors[2].value);\r\n            });\r\n        });\r\n    });\r\n} "],"sourceRoot":"/source/"}