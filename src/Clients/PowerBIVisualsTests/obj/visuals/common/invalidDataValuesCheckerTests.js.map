{"version":3,"sources":["visuals/common/invalidDataValuesCheckerTests.ts"],"names":["powerbitests","powerbitests.DataViewBuilder","powerbitests.DataViewBuilder.constructor","powerbitests.DataViewBuilder.buildCategoryIdentities","powerbitests.DataViewBuilder.build"],"mappings":"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","file":"visuals/common/invalidDataValuesCheckerTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import IVisualWarning = powerbi.IVisualWarning;\r\n\r\n    describe(\"InvalidDataValuesCheckerTests\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n\r\n        const categoryValues = [\"a\", \"b\", \"c\", \"d\", \"e\"];\r\n\r\n        let dataViewMetadata: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: \"stringColumn\",\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                },\r\n                {\r\n                    displayName: \"numberColumn\",\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n                    format: \"0.000\"\r\n                },\r\n                {\r\n                    displayName: \"dateTimeColumn\",\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime)\r\n                }\r\n            ]\r\n        };\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n\r\n            dataViewBuilder.metadata = dataViewMetadata;\r\n            dataViewBuilder.categoryValues = categoryValues;\r\n        });\r\n\r\n        it(\"empty values does not display a warning all supported.\", () => {\r\n            dataViewBuilder.values = [];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"empty values does not display a warning none supported.\", () => {\r\n            dataViewBuilder.values = [];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"single value does not display a warning all supported.\", () => {\r\n            dataViewBuilder.values = [300];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"single value does not display a warning none supported.\", () => {\r\n            dataViewBuilder.values = [300];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"NaN value does not display a warning when supported.\", () => {\r\n            dataViewBuilder.values = [NaN];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"NaN value does not display a warning when others not supported.\", () => {\r\n            dataViewBuilder.values = [NaN];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"NaN value displays a warning when not supported.\", () => {\r\n            dataViewBuilder.values = [NaN];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"NaNNotSupported\");\r\n        });\r\n\r\n        it(\"NaN value displays a warning when not supported but others are supported.\", () => {\r\n            dataViewBuilder.values = [[NaN]];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"NaNNotSupported\");\r\n        });\r\n\r\n        it(\"Negative infinity value does not display a warning when supported.\", () => {\r\n            dataViewBuilder.values = [Number.NEGATIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"Negative infinity value does not display a warning when others not supported.\", () => {\r\n            dataViewBuilder.values = [Number.NEGATIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                true,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"Negative infinity value displays a warning when not supported.\", () => {\r\n            dataViewBuilder.values = [Number.NEGATIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            let i: number = 0;\r\n            expect(warnings[i++].code).toBe(\"InfinityValuesNotSupported\");\r\n        });\r\n\r\n        it(\"Negative infinity value displays a warning when not supported but others are supported.\", () => {\r\n            dataViewBuilder.values = [Number.NEGATIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                false,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"InfinityValuesNotSupported\");\r\n        });\r\n\r\n        it(\"Positive infinity value does not display a warning when supported.\", () => {\r\n            dataViewBuilder.values = [Number.NEGATIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"Positive infinity value does not display a warning when others not supported.\", () => {\r\n            dataViewBuilder.values = [Number.POSITIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"Postive infinity value displays a warning when not supported.\", () => {\r\n            dataViewBuilder.values = [Number.POSITIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"InfinityValuesNotSupported\");\r\n        });\r\n\r\n        it(\"Positive infinity value displays a warning when not supported but others are supported.\", () => {\r\n            dataViewBuilder.values = [Number.POSITIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                true,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"InfinityValuesNotSupported\");\r\n        });\r\n\r\n        it(\"Out of range value displays a warning when others are supported.\", () => {\r\n            dataViewBuilder.values = [1e301];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"Negative out of range value displays a warning when others are supported.\", () => {\r\n            dataViewBuilder.values = [-27e300];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                true,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"Out of range value displays a warning when others are not supported.\", () => {\r\n            dataViewBuilder.values = [1e301];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"Negative out of range value displays a warning when others are not supported.\", () => {\r\n            dataViewBuilder.values = [1e301];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            expect(warnings[0].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"NaN and infinity sends warning for both when all not supported\", () => {\r\n            dataViewBuilder.values = [NaN, Number.POSITIVE_INFINITY];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(2);\r\n            let i: number = 0;\r\n            expect(warnings[i++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[i++].code).toBe(\"InfinityValuesNotSupported\");\r\n        });\r\n\r\n        it(\"NaN and infinity and out of range sends warning for all when all not supported\", () => {\r\n            dataViewBuilder.values = [NaN, Number.POSITIVE_INFINITY, 1e301];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(3);\r\n            let i: number = 0;\r\n            expect(warnings[i++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[i++].code).toBe(\"InfinityValuesNotSupported\");\r\n            expect(warnings[i++].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"NaN and infinity and out of range sends warning for all when all not supported has no duplications\", () => {\r\n            dataViewBuilder.values = [NaN, Number.POSITIVE_INFINITY, 1e301];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(3);\r\n            let index: number = 0;\r\n            expect(warnings[index++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"InfinityValuesNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"NaN and infinity and out of range sends warning for all when Infinity supported has no infinity warning\", () => {\r\n            dataViewBuilder.values = [NaN, Number.POSITIVE_INFINITY, NaN, 1e301];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                true,\r\n                true);\r\n\r\n            expect(warnings.length).toBe(2);\r\n            let index: number = 0;\r\n            expect(warnings[index++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"NaN and infinity and out of range sends warning for all with good values at the beginning\", () => {\r\n            dataViewBuilder.values = [100, 200, 300, 400, NaN, Number.POSITIVE_INFINITY, NaN, 1e301];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(3);\r\n            let index: number = 0;\r\n            expect(warnings[index++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"InfinityValuesNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"NaN and infinity and out of range sends warning for all with good values throughout\", () => {\r\n            dataViewBuilder.values = [100, 200, NaN, 300, Number.POSITIVE_INFINITY, NaN, 400, 1e301, 500];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(3);\r\n            let index: number = 0;\r\n            expect(warnings[index++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"InfinityValuesNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"Multiple dataViews both good does not show a warning\", () => {\r\n            dataViewBuilder.values = [100, 200, 500];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            dataViewBuilder.values = [200, 300, 400];\r\n            let dataView2 = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView, dataView2],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(0);\r\n        });\r\n\r\n        it(\"Multiple dataviews first has invalid shows warnings\", () => {\r\n            dataViewBuilder.values = [100, 200, NaN, undefined];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            dataViewBuilder.values = [100, 200, 300];\r\n            let dataView2 = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView, dataView2],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(1);\r\n            let index: number = 0;\r\n            expect(warnings[index++].code).toBe(\"NaNNotSupported\");\r\n        });\r\n\r\n        it(\"Multiple datasets last has invalid values shows warnings\", () => {\r\n            dataViewBuilder.values = [100, 200, 300, 400];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            dataViewBuilder.values = [100, 200, NaN, 300, Number.POSITIVE_INFINITY, NaN, 400, 1e301, 500];\r\n            let dataView2 = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView, dataView2],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(3);\r\n            let index: number = 0;\r\n            expect(warnings[index++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"InfinityValuesNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"Multiple dataViews both have invalid values shows correct warning\", () => {\r\n            dataViewBuilder.values = [100, 200, Number.NaN, 300, Number.POSITIVE_INFINITY, NaN, 400, 1e301, 500];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            dataViewBuilder.values = [Number.NEGATIVE_INFINITY, Number.NaN, 300, 1e301];\r\n            let dataView2 = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView, dataView2],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(3);\r\n            let index: number = 0;\r\n            expect(warnings[index++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"InfinityValuesNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n\r\n        it(\"Multiple dataViews both have invalid values not overlapping shows correct warning\", () => {\r\n            dataViewBuilder.values = [100, 200, 300, Number.POSITIVE_INFINITY, 400, 1e301, 500];\r\n            let dataView = dataViewBuilder.build();\r\n\r\n            dataViewBuilder.values = [Number.NEGATIVE_INFINITY, Number.NaN, 300];\r\n            let dataView2 = dataViewBuilder.build();\r\n\r\n            let warnings: IVisualWarning[] = powerbi.visuals.getInvalidValueWarnings(\r\n                [dataView, dataView2],\r\n                false,\r\n                false,\r\n                false);\r\n\r\n            expect(warnings.length).toBe(3);\r\n            let index: number = 0;\r\n            expect(warnings[index++].code).toBe(\"NaNNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"InfinityValuesNotSupported\");\r\n            expect(warnings[index++].code).toBe(\"ValuesOutOfRange\");\r\n        });\r\n    });\r\n\r\n    class DataViewBuilder {\r\n        public metadata: powerbi.DataViewMetadata;\r\n\r\n        public categoryValues: any[];\r\n\r\n        public values: any[];\r\n\r\n        private categoryIdentities: powerbi.DataViewScopeIdentity[];\r\n\r\n        private buildCategoryIdentities() {\r\n            if (this.categoryValues) {\r\n                this.categoryIdentities =\r\n                this.categoryValues.map((item) => mocks.dataViewScopeIdentity(item));\r\n            }\r\n        }\r\n\r\n        public build(): powerbi.DataView {\r\n            this.buildCategoryIdentities();\r\n\r\n            return {\r\n                metadata: this.metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: this.metadata.columns[0],\r\n                        values: this.categoryValues,\r\n                        identity: this.categoryIdentities\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: this.metadata.columns[1],\r\n                        values: this.values\r\n                    }])\r\n                }\r\n            };\r\n        }\r\n    }\r\n} "],"sourceRoot":"/source/"}