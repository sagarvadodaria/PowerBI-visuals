{"version":3,"sources":["data/dataView/dataViewCategoricalReaderTests.ts"],"names":["powerbitests","powerbitests.executeAllMethods"],"mappings":"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","file":"data/dataView/dataViewCategoricalReaderTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbitests {\r\n    import IDataViewCategoricalReader = powerbi.data.IDataViewCategoricalReader;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    let createIDataViewCategoricalReader = powerbi.data.createIDataViewCategoricalReader;\r\n\r\n    describe('DataViewCategoricalReader', () => {\r\n        describe('Various nulls and undefined values', () => {\r\n            let dataViewMetadataTwoColumn: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: \"col1\",\r\n                        queryName: \"col1\",\r\n                        type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                    },\r\n                    {\r\n                        displayName: \"col2\",\r\n                        queryName: \"col2\",\r\n                        isMeasure: true,\r\n                        type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                    }\r\n                ],\r\n            };\r\n            let categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"col1\" });\r\n\r\n            xit('Null', () => {\r\n                let reader = createIDataViewCategoricalReader(null);\r\n                executeAllMethods(reader);\r\n            });\r\n\r\n            it('No categorical', () => {\r\n                let reader = createIDataViewCategoricalReader({\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: undefined,\r\n                });\r\n                executeAllMethods(reader);\r\n            });\r\n\r\n            it('No metadata', () => {\r\n                let reader = createIDataViewCategoricalReader({\r\n                    metadata: undefined,\r\n                    categorical: {\r\n                        categories: [],\r\n                        values: undefined\r\n                    }\r\n                });\r\n                executeAllMethods(reader);\r\n            });\r\n\r\n            it('No categorical.values', () => {\r\n                let reader = createIDataViewCategoricalReader({\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: [\"abc\", \"def\"],\r\n                            identity: [mocks.dataViewScopeIdentity(\"abc\"), mocks.dataViewScopeIdentity(\"def\")],\r\n                            identityFields: [categoryColumnRef]\r\n                        }],\r\n                        values: undefined\r\n                    }\r\n                });\r\n                executeAllMethods(reader);\r\n            });\r\n\r\n            describe('No categories', () => {\r\n                let reader = createIDataViewCategoricalReader({\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: undefined,\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataTwoColumn.columns[1],\r\n                                min: 123,\r\n                                max: 123,\r\n                                subtotal: 123,\r\n                                values: [123]\r\n                            }\r\n                        ])\r\n                    }\r\n                });\r\n                executeAllMethods(reader);\r\n            });\r\n\r\n            it('No values', () => {\r\n                let reader = createIDataViewCategoricalReader({\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: [\"abc\", \"def\"],\r\n                            identity: [mocks.dataViewScopeIdentity(\"abc\"), mocks.dataViewScopeIdentity(\"def\")],\r\n                            identityFields: [categoryColumnRef]\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([])\r\n                    }\r\n                });\r\n                executeAllMethods(reader);\r\n            });\r\n\r\n            it('No values.values', () => {\r\n                let reader = createIDataViewCategoricalReader({\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: [\"abc\", \"def\"],\r\n                            identity: [mocks.dataViewScopeIdentity(\"abc\"), mocks.dataViewScopeIdentity(\"def\")],\r\n                            identityFields: [categoryColumnRef]\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataTwoColumn.columns[1],\r\n                                values: []\r\n                            }\r\n                        ])\r\n                    }\r\n                });\r\n                executeAllMethods(reader);\r\n            });\r\n\r\n            it('No categories.values', () => {\r\n                let reader = createIDataViewCategoricalReader({\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: [],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataTwoColumn.columns[1],\r\n                                values: []\r\n                            }\r\n                        ])\r\n                    }\r\n                });\r\n                executeAllMethods(reader);\r\n            });\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Executes all functions on the DataViewCategoricalReader with minimal\r\n     * data to ensure the reader doesn't throw exceptions with its DataView.\r\n     *\r\n     * The constructor is implicitly tested when you create the DataView; all\r\n     * other methods are called here.\r\n     */\r\n    function executeAllMethods(reader: IDataViewCategoricalReader): void {\r\n        // Category methods\r\n        reader.hasCategories();\r\n        reader.getCategoryCount();\r\n        reader.getCategoryValues(\"\");\r\n        reader.getCategoryValue(0, \"\");\r\n        reader.getCategoryColumn(\"\");\r\n        reader.hasCompositeCategories();\r\n        reader.hasCategoryWithRole(\"\");\r\n        reader.getCategoryObjects(0, \"\");\r\n        \r\n        // Value/measure methods\r\n        reader.hasValues(\"\");\r\n        reader.getValues(\"\");\r\n        reader.getValue(\"\", 0);\r\n        reader.getFirstNonNullValueForCategory(\"\", 0);\r\n        reader.getMeasureQueryName(\"\");\r\n        reader.getValueColumn(\"\");\r\n        \r\n        // Series methods\r\n        reader.hasDynamicSeries();\r\n        reader.getSeriesCount();\r\n        reader.getSeriesObjects(0);\r\n        reader.getSeriesColumn(0);\r\n        reader.getSeriesColumns();\r\n        reader.getSeriesSource();\r\n        reader.getSeriesColumnIdentifier();\r\n        reader.getSeriesName(0);\r\n        reader.getSeriesDisplayName();\r\n    }\r\n}"],"sourceRoot":"/source/"}