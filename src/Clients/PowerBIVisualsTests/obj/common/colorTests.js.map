{"version":3,"sources":["common/colorTests.ts"],"names":["powerbitests"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAIH,IAAO,YAAY,CA+JlB;AA/JD,WAAO,YAAY,EAAC,CAAC;IACjBA,IAAOA,KAAKA,GAAGA,QAAQA,CAACA,KAAKA,CAACA;IAE9BA,QAAQA,CAACA,OAAOA,EAAEA;QACdA,QAAQA,CAACA,kBAAkBA,EAAEA;YACzBA,EAAEA,CAACA,aAAaA,EAAEA;gBACdA,IAAIA,cAAcA,GAAGA;oBACjBA,GAAGA;oBACHA,KAAKA;oBACLA,OAAOA;oBACPA,QAAQA;oBACRA,QAAQA;oBACRA,UAAUA;oBACVA,MAAMA;oBACNA,SAASA;iBACZA,CAACA;gBAEFA,CAACA,CAACA,GAAGA,CAACA,cAAcA,EAAEA,UAACA,CAACA,IAAKA,OAAAA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,CAACA,aAAaA,EAAEA,EAAjDA,CAAiDA,CAACA,CAACA;YACpFA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,WAAWA,EAAEA;gBACZA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,MAAMA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBAC3CA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,QAAQA,CAACA,IAAIA,EAAEA,EAAEA,CAACA;oBACrBA,CAACA,EAAEA,QAAQA,CAACA,IAAIA,EAAEA,EAAEA,CAACA;iBACxBA,CAACA,CAACA;gBAEHA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,SAASA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBAC9CA,CAACA,EAAEA,QAAQA,CAACA,IAAIA,EAAEA,EAAEA,CAACA;oBACrBA,CAACA,EAAEA,QAAQA,CAACA,IAAIA,EAAEA,EAAEA,CAACA;oBACrBA,CAACA,EAAEA,QAAQA,CAACA,IAAIA,EAAEA,EAAEA,CAACA;iBACxBA,CAACA,CAACA;YACPA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,eAAeA,EAAEA;gBAChBA,IAAIA,cAAcA,GAAGA;oBACjBA,OAAOA;oBACPA,QAAQA;oBACRA,WAAWA;oBACXA,iBAAiBA;oBACjBA,gBAAgBA;oBAChBA,eAAeA;iBAClBA,CAACA;gBAEFA,CAACA,CAACA,GAAGA,CAACA,cAAcA,EAAEA,UAACA,CAACA,IAAKA,OAAAA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,CAACA,aAAaA,EAAEA,EAAjDA,CAAiDA,CAACA,CAACA;YACpFA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,aAAaA,EAAEA;gBACdA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBACnDA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;iBACPA,CAACA,CAACA;YACPA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,gBAAgBA,EAAEA;gBACjBA,IAAIA,cAAcA,GAAGA;oBACjBA,QAAQA;oBACRA,SAASA;oBACTA,YAAYA;oBACZA,eAAeA;oBACfA,iBAAiBA;oBACjBA,gBAAgBA;iBACnBA,CAACA;gBAEFA,CAACA,CAACA,GAAGA,CAACA,cAAcA,EAAEA,UAACA,CAACA,IAAKA,OAAAA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,CAACA,aAAaA,EAAEA,EAAjDA,CAAiDA,CAACA,CAACA;YACpFA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,cAAcA,EAAEA;gBACfA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,oBAAoBA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBACzDA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,GAAGA;iBACTA,CAACA,CAACA;gBAEHA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,qBAAqBA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBAC1DA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,IAAIA;iBACVA,CAACA,CAACA;gBAEHA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,oBAAoBA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBACzDA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,IAAIA;iBACVA,CAACA,CAACA;gBAEHA,MAAMA,CAACA,KAAKA,CAACA,gBAAgBA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBACvDA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,CAACA;oBACJA,CAACA,EAAEA,GAAGA;iBACTA,CAACA,CAACA;YACPA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,sBAAsBA,EAAEA;YAC7BA,EAAEA,CAACA,YAAYA,EAAEA;gBACbA,MAAMA,CAACA,KAAKA,CAACA,oBAAoBA,CAACA,SAASA,CAACA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;gBACjEA,MAAMA,CAACA,KAAKA,CAACA,oBAAoBA,CAACA,MAAMA,CAACA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;YAClEA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,YAAYA,EAAEA;gBACbA,MAAMA,CAACA,KAAKA,CAACA,oBAAoBA,CAACA,eAAeA,CAACA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;gBACvEA,MAAMA,CAACA,KAAKA,CAACA,oBAAoBA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;YAC5EA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,aAAaA,EAAEA;gBACdA,MAAMA,CAACA,KAAKA,CAACA,oBAAoBA,CAACA,qBAAqBA,CAACA,CAACA,CAACA,OAAOA,CAACA,SAASA,CA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","file":"common/colorTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import Color = jsCommon.Color;\r\n\r\n    describe('Color', () => {\r\n        describe('parseColorString', () => {\r\n            it('invalid hex', () => {\r\n                let invalidStrings = [\r\n                    '#',\r\n                    '#12',\r\n                    '#1234',\r\n                    '#12345',\r\n                    '#12345',\r\n                    '#1234567',\r\n                    '#xxx',\r\n                    '#xxxxxx',\r\n                ];\r\n\r\n                _.all(invalidStrings, (s) => expect(Color.parseColorString(s)).toBeUndefined());\r\n            });\r\n\r\n            it('valid hex', () => {\r\n                expect(Color.parseColorString('#09f')).toEqual({\r\n                    R: 0,\r\n                    G: parseInt('99', 16),\r\n                    B: parseInt('ff', 16),\r\n                });\r\n\r\n                expect(Color.parseColorString('#09afAa')).toEqual({\r\n                    R: parseInt('09', 16),\r\n                    G: parseInt('af', 16),\r\n                    B: parseInt('aa', 16),\r\n                });\r\n            });\r\n\r\n            it('invalid rgb()', () => {\r\n                let invalidStrings = [\r\n                    'rgb()',\r\n                    'rgb(1)',\r\n                    'rgb(1, 2)',\r\n                    'rgb(1, 2, 3, 4)',\r\n                    'rgb(1.0, 2, 3)',\r\n                    'rgb(aa, 2, 3)',\r\n                ];\r\n\r\n                _.all(invalidStrings, (s) => expect(Color.parseColorString(s)).toBeUndefined());\r\n            });\r\n\r\n            it('valid rgb()', () => {\r\n                expect(Color.parseColorString('rgb(1, 2, 3)')).toEqual({\r\n                    R: 1,\r\n                    G: 2,\r\n                    B: 3,\r\n                });\r\n            });\r\n\r\n            it('invalid rgba()', () => {\r\n                let invalidStrings = [\r\n                    'rgba()',\r\n                    'rgba(1)',\r\n                    'rgba(1, 2)',\r\n                    'rgba(1, 2, 3)',\r\n                    'rgba(1.0, 2, 3)',\r\n                    'rgba(aa, 2, 3)',\r\n                ];\r\n\r\n                _.all(invalidStrings, (s) => expect(Color.parseColorString(s)).toBeUndefined());\r\n            });\r\n\r\n            it('valid rgba()', () => {\r\n                expect(Color.parseColorString('rgba(1, 2, 3, 1.0)')).toEqual({\r\n                    R: 1,\r\n                    G: 2,\r\n                    B: 3,\r\n                    A: 1.0,\r\n                });\r\n\r\n                expect(Color.parseColorString('rgba(1, 2, 3, 0.19)')).toEqual({\r\n                    R: 1,\r\n                    G: 2,\r\n                    B: 3,\r\n                    A: 0.19,\r\n                });\r\n\r\n                expect(Color.parseColorString('rgba(1, 2, 3, .19)')).toEqual({\r\n                    R: 1,\r\n                    G: 2,\r\n                    B: 3,\r\n                    A: 0.19,\r\n                });\r\n\r\n                expect(Color.parseColorString('rgba(1, 2, 3, 1)')).toEqual({\r\n                    R: 1,\r\n                    G: 2,\r\n                    B: 3,\r\n                    A: 1.0,\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('normalizeToHexString', () => {\r\n            it('hex -> hex', () => {\r\n                expect(Color.normalizeToHexString('#123456')).toEqual('#123456');\r\n                expect(Color.normalizeToHexString('#123')).toEqual('#112233');\r\n            });\r\n\r\n            it('rgb -> hex', () => {\r\n                expect(Color.normalizeToHexString('rgb(1, 26, 3)')).toEqual('#011A03');\r\n                expect(Color.normalizeToHexString('rgb(1, 500, 3)')).toEqual('#01FF03');\r\n            });\r\n\r\n            it('rgba -> hex', () => {\r\n                expect(Color.normalizeToHexString('rgba(1, 26, 3, 1.0)')).toEqual('#011A03');\r\n                expect(Color.normalizeToHexString('rgba(1, 26, 3, 0.0)')).toEqual('#011A03');\r\n                expect(Color.normalizeToHexString('rgba(1, 500, 3, 1.0)')).toEqual('#01FF03');\r\n            });\r\n        });\r\n\r\n        describe('rotate', () => {\r\n            it(\"zero\", () => {\r\n                var originalColor = \"#45D0E8\";\r\n                expect(Color.rotate(originalColor, 0)).toBe(originalColor);\r\n            });\r\n\r\n            it(\"360 return original\", () => {\r\n                var originalColor = \"#45D0E8\";\r\n                expect(Color.rotate(originalColor, 1)).toBe(originalColor);\r\n            });\r\n\r\n            it(\"multiple times\", () => {\r\n                var originalColor = \"#45D0E8\";\r\n                var color90degrees = Color.rotate(originalColor, 0.25);\r\n                expect(color90degrees).toBe(\"#AE45E8\");\r\n                var color180degrees = Color.rotate(color90degrees, 0.25);\r\n                expect(color180degrees).toBe(\"#E85C45\");\r\n                var color270degrees = Color.rotate(color180degrees, 0.25);\r\n                expect(color270degrees).toBe(\"#7FE845\");\r\n                var color360degrees = Color.rotate(color270degrees, 0.25);\r\n                expect(color360degrees).toBe(originalColor);\r\n            });\r\n        });\r\n\r\n        describe('darken', () => {\r\n            it(\"basic\", () => {\r\n                var originalColorString = \"#FFFFFF\";\r\n                var originalColor = Color.parseColorString(originalColorString);\r\n                var darkenValue = Color.darken(originalColor, 255 * 0.25);\r\n                var darkenValueString = Color.hexString(darkenValue);\r\n                expect(darkenValueString).toBe(\"#C0C0C0\");\r\n            });\r\n\r\n            it(\"edge case\", () => {\r\n                var originalColorString = \"#000000\";\r\n                var originalColor = Color.parseColorString(originalColorString);\r\n                var darkenValue = Color.darken(originalColor, 255 * 0.25);\r\n                var darkenValueString = Color.hexString(darkenValue);\r\n                expect(darkenValueString).toBe(originalColorString);\r\n            });\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}