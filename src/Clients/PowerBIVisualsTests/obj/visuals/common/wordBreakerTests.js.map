{"version":3,"sources":["visuals/common/wordBreakerTests.ts"],"names":["powerbitests","powerbitests.getWordBreakerResultsBetweenIndeces","powerbitests.areAllSame","powerbitests.testWordBreakerBetweenIndeces","powerbitests.testHasBreakers"],"mappings":"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ACA;oBAEvHA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC7BA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;oBACvCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBACtCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACpCA,CAACA,CAACA,CAACA;gBAEHA,EAAEA,CAACA,eAAeA,EAAEA;oBAChBA,KAAKA,GAAGA,WAAWA,CAACA,YAAYA,CAACA,0CAA0CA,EAAEA,cAAcA,EAAEA,iBAAiBA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA;oBAEvHA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC7BA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;oBACvCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBACtCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACpCA,CAACA,CAACA,CAACA;YACPA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,mEAAmEA,EAAEA;gBACpEA,KAAKA,GAAGA,WAAWA,CAACA,YAAYA,CAACA,mCAAmCA,EAAEA,cAAcA,EAAEA,iBAAiBA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA;gBAEhHA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC7BA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,qBAAqBA,CAACA,CAACA;YACjDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,2EAA2EA,EAAEA;gBAC5EA,KAAKA,GAAGA,WAAWA,CAACA,YAAYA,CAACA,mCAAmCA,EAAEA,cAAcA,EAAEA,iBAAiBA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA;gBAEhHA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC7BA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACtCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YACpCA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,eAAeA,EAAEA;gBAChBA,IAAIA,SAASA,GAAGA,UAACA,UAAkCA,EAAEA,QAAgBA;oBACjEA,MAAMA,CAACA,UAAUA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,GAAGA,GAAGA,CAACA;gBAC9CA,CAACA,CAACA;gBAEFA,KAAKA,GAAGA,WAAWA,CAACA,YAAYA,CAACA,mCAAmCA,EAAEA,cAAcA,EAAEA,iBAAiBA,EAAEA,EAAEA,EAAEA,CAACA,EAAEA,SAASA,CAACA,CAACA;gBAE3HA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC7BA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACtCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YACpCA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;IACPA,CAACA,CAACA,CAACA;AACPA,CAACA,EAtPM,YAAY,KAAZ,YAAY,QAsPlB","file":"visuals/common/wordBreakerTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import WordBreaker = jsCommon.WordBreaker;\r\n    \r\n    describe('WordBreaker', () => {\r\n\r\n        describe('finds word when', () => {\r\n            let result: WordBreaker.WordBreakerResult;\r\n\r\n            // Sample strings\r\n            let one = \"nobreakstoseehere\";\r\n            let content = \"abcd efgh\\nijkl mnop\";\r\n\r\n            function getWordBreakerResultsBetweenIndeces(content: string, start: number, end: number): WordBreaker.WordBreakerResult[] {\r\n                return _\r\n                    .chain(_.range(start, end))\r\n                    .map((index) => {\r\n                        return WordBreaker.find(index, content);\r\n                    })\r\n                    .value();\r\n            }\r\n\r\n            function areAllSame(results: WordBreaker.WordBreakerResult[]): boolean {\r\n                let result = results[0];\r\n                return _.every(results, {\r\n                    start: result.start,\r\n                    end: result.end\r\n                });\r\n            }\r\n\r\n            function testWordBreakerBetweenIndeces(content: string, start: number, end: number): WordBreaker.WordBreakerResult {\r\n                let results = getWordBreakerResultsBetweenIndeces(content, start, end);\r\n                expect(areAllSame(results)).toBeTruthy();\r\n                return results[0];\r\n            }\r\n\r\n            it('no breaking characters', () => {\r\n                result = testWordBreakerBetweenIndeces(one, 0, one.length);\r\n                \r\n                expect(result).toEqual({ start: 0, end: one.length });\r\n                expect(one.slice(result.start, result.end)).toBe(one);\r\n            });\r\n\r\n            it('at start of content', () => {\r\n                result = WordBreaker.find(0, content);\r\n                expect(content.slice(result.start, result.end)).toBe('abcd');\r\n            });\r\n\r\n            it('at start of line (immediately after line break)', () => {\r\n                result = WordBreaker.find(10, content);\r\n                expect(content.slice(result.start, result.end)).toBe('ijkl');\r\n            });\r\n\r\n            it('at start of word', () => {\r\n                result = WordBreaker.find(5, content);\r\n                expect(content.slice(result.start, result.end)).toBe('efgh');\r\n            });\r\n\r\n            it('inside word', () => {\r\n                result = testWordBreakerBetweenIndeces(content, 5, 9);\r\n\r\n                expect(result).toEqual({ start: 5, end: 9 });\r\n                expect(content.slice(result.start, result.end)).toBe('efgh');\r\n            });\r\n\r\n            it('at end of word', () => {\r\n                result = WordBreaker.find(14, content);\r\n                expect(content.slice(result.start, result.end)).toBe('ijkl');\r\n            });\r\n\r\n            it('at end of line (before line break)', () => {\r\n                result = WordBreaker.find(9, content);\r\n                expect(content.slice(result.start, result.end)).toBe('efgh');\r\n            });\r\n\r\n            it('at end of content', () => {\r\n                result = WordBreaker.find(content.length, content);\r\n                expect(content.slice(result.start, result.end)).toBe('mnop');\r\n            });\r\n\r\n            it('non-alphanumeric characters', () => {\r\n                let weird = \"weird... !@#$%^&*()_+{}~`\\|/;:'-=<>\";\r\n                result = testWordBreakerBetweenIndeces(weird, 9, weird.length);\r\n\r\n                expect(result).toEqual({ start: 9, end: weird.length });\r\n            });\r\n        });\r\n\r\n        describe('can detect breaker characters', () => {\r\n            it('when content has space', () => {\r\n                testHasBreakers(' ', true);\r\n                testHasBreakers('a ', true);\r\n                testHasBreakers(' a', true);\r\n                testHasBreakers('a b', true);\r\n            });\r\n\r\n            it('when content has tab', () => {\r\n                testHasBreakers('\\t', true);\r\n                testHasBreakers('a\\t', true);\r\n                testHasBreakers('\\ta', true);\r\n                testHasBreakers('a\\tb', true);\r\n            });\r\n\r\n            it('when content has new line', () => {\r\n                testHasBreakers('\\n', true);\r\n                testHasBreakers('a\\n', true);\r\n                testHasBreakers('\\na', true);\r\n                testHasBreakers('a\\nb', true);\r\n            });\r\n\r\n            it('when content does not have breakers', () => {\r\n                testHasBreakers('abc', false);\r\n            });\r\n\r\n            function testHasBreakers(content: string, expected: boolean): void {\r\n                expect(WordBreaker.hasBreakers(content)).toBe(expected);\r\n            }\r\n        });\r\n\r\n        describe('can count words', () => {\r\n            let count;\r\n\r\n            it('when no breakers', () => {\r\n                count = WordBreaker.wordCount('abcdefg');\r\n                expect(count).toBe(1);\r\n            });\r\n\r\n            describe('has two words (one breaker)', () => {\r\n                it('with space', () => {\r\n                    count = WordBreaker.wordCount('abcd efg');\r\n                    expect(count).toBe(2);\r\n                });\r\n\r\n                it('with tab', () => {\r\n                    count = WordBreaker.wordCount('abcd\\tefg');\r\n                    expect(count).toBe(2);\r\n                });\r\n\r\n                it('with new line', () => {\r\n                    count = WordBreaker.wordCount('abcd\\nefg');\r\n                    expect(count).toBe(2);\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('can split into words by width and breakers', () => {\r\n            let words;\r\n            let textWidthMeasurer = powerbi.TextMeasurementService.measureSvgTextWidth;\r\n            let textProperties: powerbi.TextProperties = {\r\n                fontFamily: \"Arial\",\r\n                fontSize: \"10px\"\r\n            };\r\n\r\n            it('when no breakers', () => {\r\n                let content = 'abcdefg';\r\n                words = WordBreaker.splitByWidth(content, textProperties, textWidthMeasurer, 25, 1);\r\n\r\n                expect(words.length).toBe(1);\r\n                expect(words[0]).toBe(content);\r\n            });\r\n\r\n            describe('has two words (one breaker)', () => {\r\n                it('with space', () => {\r\n                    words = WordBreaker.splitByWidth('abcd efg', textProperties, textWidthMeasurer, 25, 2);\r\n\r\n                    expect(words.length).toBe(2);\r\n                    expect(words[0]).toBe('abcd');\r\n                    expect(words[1]).toBe('efg');\r\n                });\r\n\r\n                it('with tab', () => {\r\n                    words = WordBreaker.splitByWidth('abcd\\tefg', textProperties, textWidthMeasurer, 25, 2);\r\n\r\n                    expect(words.length).toBe(2);\r\n                    expect(words[0]).toBe('abcd');\r\n                    expect(words[1]).toBe('efg');\r\n                });\r\n\r\n                it('with new line', () => {\r\n                    words = WordBreaker.splitByWidth('abcd\\nefg', textProperties, textWidthMeasurer, 25, 2);\r\n\r\n                    expect(words.length).toBe(2);\r\n                    expect(words[0]).toBe('abcd');\r\n                    expect(words[1]).toBe('efg');\r\n                });\r\n            });\r\n\r\n            describe('has multiple words per line (by width)', () => {\r\n                it('with space', () => {\r\n                    words = WordBreaker.splitByWidth('abcd efg hijk lmn opqr stu vwx yz', textProperties, textWidthMeasurer, 75, 3);\r\n\r\n                    expect(words.length).toBe(3);\r\n                    expect(words[0]).toBe('abcd efg hijk');\r\n                    expect(words[1]).toBe('lmn opqr stu');\r\n                    expect(words[2]).toBe('vwx yz');\r\n                });\r\n\r\n                it('with tab', () => {\r\n                    words = WordBreaker.splitByWidth('abcd\\tefg\\thijk\\tlmn\\topqr\\tstu\\tvwx\\tyz', textProperties, textWidthMeasurer, 75, 3);\r\n\r\n                    expect(words.length).toBe(3);\r\n                    expect(words[0]).toBe('abcd efg hijk');\r\n                    expect(words[1]).toBe('lmn opqr stu');\r\n                    expect(words[2]).toBe('vwx yz');\r\n                });\r\n\r\n                it('with new line', () => {\r\n                    words = WordBreaker.splitByWidth('abcd\\nefg\\nhijk\\nlmn\\nopqr\\nstu\\nvwx\\nyz', textProperties, textWidthMeasurer, 75, 3);\r\n\r\n                    expect(words.length).toBe(3);\r\n                    expect(words[0]).toBe('abcd efg hijk');\r\n                    expect(words[1]).toBe('lmn opqr stu');\r\n                    expect(words[2]).toBe('vwx yz');\r\n                });\r\n            });\r\n\r\n            it('has multiple words per line (by width) but truncated by max lines', () => {\r\n                words = WordBreaker.splitByWidth('abcd efg hijk lmn opqr stu vwx yz', textProperties, textWidthMeasurer, 75, 2);\r\n\r\n                expect(words.length).toBe(2);\r\n                expect(words[0]).toBe('abcd efg hijk');\r\n                expect(words[1]).toBe('lmn opqr stu vwx yz');\r\n            });\r\n\r\n            it('has multiple words per line (by width) but does not truncate by max lines', () => {\r\n                words = WordBreaker.splitByWidth('abcd efg hijk lmn opqr stu vwx yz', textProperties, textWidthMeasurer, 75, 0);\r\n\r\n                expect(words.length).toBe(3);\r\n                expect(words[0]).toBe('abcd efg hijk');\r\n                expect(words[1]).toBe('lmn opqr stu');\r\n                expect(words[2]).toBe('vwx yz');\r\n            });\r\n\r\n            it('has truncator', () => {\r\n                let truncator = (properties: powerbi.TextProperties, maxWidth: number) => {\r\n                    return properties.text.slice(0, -1) + '…';\r\n                };\r\n\r\n                words = WordBreaker.splitByWidth('abcd efg hijk lmn opqr stu vwx yz', textProperties, textWidthMeasurer, 75, 0, truncator);\r\n\r\n                expect(words.length).toBe(3);\r\n                expect(words[0]).toBe('abcd efg hij…');\r\n                expect(words[1]).toBe('lmn opqr st…');\r\n                expect(words[2]).toBe('vwx y…');\r\n            });\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}