{"version":3,"sources":["customVisuals/sampleDataViews/MekkoChartData.ts"],"names":["powerbitests","powerbitests.customVisuals","powerbitests.customVisuals.sampleDataViews","powerbitests.customVisuals.sampleDataViews.MekkoChartData","powerbitests.customVisuals.sampleDataViews.MekkoChartData.constructor","powerbitests.customVisuals.sampleDataViews.MekkoChartData.getDataView","powerbitests.customVisuals.sampleDataViews.MekkoChartData.dataProperties","powerbitests.customVisuals.sampleDataViews.MekkoChartData.getMetadata","powerbitests.customVisuals.sampleDataViews.MekkoChartData.getRowChilds","powerbitests.customVisuals.sampleDataViews.MekkoChartData.randomize"],"mappings":"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","file":"customVisuals/sampleDataViews/MekkoChartData.js","sourcesContent":["/*\r\n*  Power BI Visualizations\r\n*\r\n*  Copyright (c) Microsoft Corporation\r\n*  All rights reserved. \r\n*  MIT License\r\n*\r\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n*  in the Software without restriction, including without limitation the rights\r\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n*  copies of the Software, and to permit persons to whom the Software is\r\n*  furnished to do so, subject to the following conditions:\r\n*   \r\n*  The above copyright notice and this permission notice shall be included in \r\n*  all copies or substantial portions of the Software.\r\n*   \r\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n*  THE SOFTWARE.\r\n*/\r\n\r\n\r\n\r\nmodule powerbitests.customVisuals.sampleDataViews {\r\n    import DataView = powerbi.DataView;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import DataViewMetadataColumn = powerbi.DataViewMetadataColumn;\r\n    import ValueType = powerbi.ValueType;\r\n    import DataViewMatrix = powerbi.DataViewMatrix;\r\n    import DataViewTreeNode = powerbi.DataViewTreeNode;\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n\r\n    export class MekkoChartData {\r\n\r\n        private sampleDataSales = [\r\n            [13438, 62722, 21356, 50502, 63827, 8984, 5921, 19239, 7489, 58],\r\n            [39559, 208747, 59596, 129009, 153618, 22633, 12742, 51294, 34898, 166],\r\n            [46292, 122965, 62160, 92930, 90940, 24216, 10220, 35798, 75083, 15522],\r\n            [148748, 393446, 174099, 244620, 304140, 66829, 43622, 130262, 193782, 53495],\r\n            [125167, 659662, 176596, 423307, 476365, 66337, 41294, 164091, 81065, 662],\r\n            [485202, 916391, 761667, 610353, 790347, 241163, 124495, 314178, 930288, 276962],\r\n            [452835, 781470, 658360, 543560, 655662, 191357, 114213, 273051, 934784, 285953],\r\n            [33500, 171652, 49714, 110020, 117515, 18193, 10041, 44154, 27382, 193],\r\n            [29348, 154279, 40143, 103909, 100518, 16849, 7661, 46671, 22621, 168],\r\n            [102131, 409566, 146385, 237980, 321628, 55519, 37320, 103045, 120289, 15794],\r\n            [311736, 571521, 555415, 384193, 500341, 140739, 78576, 197475, 625643, 180804]\r\n        ];\r\n\r\n        private sampleDataSalesUnits = [\r\n            [1626, 8636, 3393, 6954, 4414, 2069, 1470, 4314, 1508, 20],\r\n            [5165, 29620, 9895, 18569, 12964, 5444, 3274, 12048, 7126, 42],\r\n            [6578, 16744, 11773, 12973, 6918, 5655, 2834, 8137, 17235, 10507],\r\n            [19176, 54206, 32902, 35402, 22056, 15470, 11787, 25150, 54483, 35426],\r\n            [16553, 89366, 29345, 61281, 37375, 16399, 10802, 37554, 16546, 276],\r\n            [68244, 132250, 148565, 87137, 54099, 56346, 35012, 63132, 238791, 188100],\r\n            [62610, 112793, 129220, 77027, 46945, 43607, 32724, 53859, 248326, 199478],\r\n            [4440, 23933, 8426, 16148, 9508, 4460, 2556, 10548, 5411, 105],\r\n            [3713, 20271, 6779, 14674, 7618, 3834, 1996, 10098, 4851, 71],\r\n            [12965, 56461, 25732, 34168, 24354, 13342, 9038, 22603, 30630, 10530],\r\n            [43763, 80795, 104172, 54402, 32043, 32652, 20399, 37434, 151567, 121176]\r\n        ];\r\n\r\n        private categoryValues = [\"010-Womens\", \"020-Mens\", \"030-Kids\", \"040-Juniors\", \"050-Shoes\", \"060-Intimate\", \"070-Hosiery\", \"080-Accessories\", \"090-Home\", \"100-Groceries\"];\r\n        private territoryValues = [\"DE\", \"GA\", \"KY\", \"MD\", \"NC\", \"OH\", \"PA\", \"SC\", \"TN\", \"VA\", \"WV\"];\r\n        private categoryEntityField = SQExprBuilder.fieldExpr({ column: { schema: undefined, entity: \"Mekko\", name: \"Category\" } });\r\n        private territiryEntityField = SQExprBuilder.fieldExpr({ column: { schema: undefined, entity: \"Mekko\", name: \"Territory\" } });\r\n\r\n        public getDataView(): DataView {\r\n            let categoryIdentities = this.categoryValues.map(value =>\r\n                powerbi.data.createDataViewScopeIdentity(SQExprBuilder.equal(this.categoryEntityField, SQExprBuilder.text(value))));\r\n\r\n            let dataProperties: DataViewMetadataColumn[] = this.dataProperties; \r\n\r\n            let dataViewMetadata = this.getMetadata();\r\n\r\n            let columns = [];\r\n            for (let index = 0, length = this.territoryValues.length; index < length; index++) {\r\n                let columnIdentity = powerbi.data.createDataViewScopeIdentity(\r\n                    SQExprBuilder.equal(this.territiryEntityField, SQExprBuilder.text(this.territoryValues[index])));\r\n\r\n                columns.push(\r\n                    {\r\n                        source: dataViewMetadata.columns[index * 2 + 2],\r\n                        values: this.sampleDataSales[index],\r\n                        identity: columnIdentity\r\n                    });\r\n\r\n                columns.push(\r\n                    {\r\n                        source: dataViewMetadata.columns[index * 2 + 3],\r\n                        values: this.sampleDataSalesUnits[index],\r\n                        identity: columnIdentity\r\n                    });\r\n            }\r\n\r\n            let columnRootChildrens = [];\r\n            for (let index = 0, length = this.territoryValues.length; index < length; index++) {\r\n                columnRootChildrens.push(\r\n                    {\r\n                        children: [\r\n                            { level: 1 },\r\n                            { level: 1, levelSourceIndex: 1 }\r\n                        ],\r\n                        identity: powerbi.data.createDataViewScopeIdentity(\r\n                            SQExprBuilder.equal(this.territiryEntityField, SQExprBuilder.text(this.territoryValues[index]))),\r\n                        level: 0,\r\n                        value: this.territoryValues[index]\r\n                    });\r\n            }\r\n\r\n            let matrixSellData: DataViewMatrix = {\r\n                rows: {\r\n                    root: {\r\n                        childIdentityFields: [this.categoryEntityField],\r\n                        children: this.getRowChilds()\r\n                    },\r\n                    levels: [{\r\n                        sources: [dataProperties[0]]\r\n                    }]\r\n                },\r\n                columns: {\r\n                    root: {\r\n                        children: columnRootChildrens,\r\n                        childIdentityFields: [this.territiryEntityField]\r\n                    },\r\n                    levels: [\r\n                        {\r\n                            sources: [dataProperties[1]]\r\n                        },\r\n                        {\r\n                            sources: [dataProperties[2], dataProperties[3]]\r\n                        }\r\n                    ]\r\n                },\r\n                valueSources: [dataProperties[2], dataProperties[3]]\r\n            };\r\n\r\n            return {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: this.categoryValues,\r\n                        identity: categoryIdentities,\r\n                        identityFields: [this.categoryEntityField]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns(columns, undefined, dataViewMetadata.columns[1])\r\n                },\r\n                matrix: matrixSellData\r\n            };\r\n        }\r\n\r\n        private get dataProperties(): DataViewMetadataColumn[] {\r\n            return [\r\n                {\r\n                    displayName: \"Category\",\r\n                    index: 0,\r\n                    queryName: \"Mekko.Category\",\r\n                    roles: { Category: true },\r\n                    type: ValueType.fromDescriptor({ text: true })\r\n                },\r\n                {\r\n                    displayName: \"Territory\",\r\n                    index: 1,\r\n                    queryName: \"Mekko.Territory\",\r\n                    roles: { Series: true },\r\n                    type: ValueType.fromDescriptor({ text: true })\r\n                },\r\n                {\r\n                    displayName: \"This Year Sales\",\r\n                    format: \"\\\"$\\\"#,##0;\\\\(\\\"$\\\"#,##0\\\\)\",\r\n                    index: 2,\r\n                    roles: { Y: true },\r\n                    queryName: \"Sum(Mekko.This Year Sales)\",\r\n                    isMeasure: true,\r\n                    type: ValueType.fromDescriptor({ numeric: true })\r\n                },\r\n                {\r\n                    displayName: \"Sum Total Units This Year\",\r\n                    format: \"\\\"$\\\"#,##0;\\\\(\\\"$\\\"#,##0\\\\)\",\r\n                    index: 3,\r\n                    roles: { Width: true },\r\n                    queryName: \"CountNonNull(Mekko.Total Units This Year)\",\r\n                    isMeasure: true,\r\n                    type: ValueType.fromDescriptor({ numeric: true })\r\n                }];\r\n        }\r\n\r\n        private getMetadata(): powerbi.DataViewMetadata {\r\n            let metadataColumns: DataViewMetadataColumn[] = [];\r\n            metadataColumns.push(this.dataProperties[0]);\r\n            metadataColumns.push(this.dataProperties[1]);\r\n\r\n            for (let index = 0, length = this.territoryValues.length; index <= length; index++) {\r\n                let salesColumn = this.dataProperties[2];\r\n                if (index < length)\r\n                    salesColumn.groupName = this.territoryValues[index];\r\n                metadataColumns.push(salesColumn);\r\n                \r\n                let totalUnitsColumn = this.dataProperties[3];\r\n                if (index < length)\r\n                    totalUnitsColumn.groupName = this.territoryValues[index];\r\n                metadataColumns.push(totalUnitsColumn);\r\n            }\r\n            return { columns: metadataColumns };\r\n        }\r\n\r\n        private getRowChilds(): DataViewTreeNode[] {\r\n            let rowChilds: DataViewTreeNode[] = [];\r\n\r\n            for (let i = 0, length = this.categoryValues.length; i < length; i++) {\r\n                let children: DataViewTreeNode = {\r\n                    value: this.categoryValues[i],\r\n                    identity: powerbi.data.createDataViewScopeIdentity(SQExprBuilder.equal(\r\n                        this.categoryEntityField, SQExprBuilder.text(this.categoryValues[i]))),\r\n                    level: 0,\r\n                    values: {}\r\n                };\r\n\r\n                for (let j = 0, terLen = this.territoryValues.length; j < terLen; j++) {\r\n                    children.values[2 * j] = { value: this.sampleDataSales[j][i] };\r\n                    children.values[2 * j + 1] = { value: this.sampleDataSalesUnits[j][i], valueSourceIndex: 1 };\r\n                }\r\n\r\n                rowChilds.push(children);\r\n            }\r\n            return rowChilds;\r\n        }\r\n\r\n        public randomize(): void {\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}