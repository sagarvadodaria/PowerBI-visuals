{"version":3,"sources":["customVisuals/sampleDataViews/MatrixData.ts"],"names":["powerbitests","powerbitests.customVisuals","powerbitests.customVisuals.sampleDataViews","powerbitests.customVisuals.sampleDataViews.MatrixData","powerbitests.customVisuals.sampleDataViews.MatrixData.constructor","powerbitests.customVisuals.sampleDataViews.MatrixData.getCountOfMatrixRootColumns","powerbitests.customVisuals.sampleDataViews.MatrixData.getCountOfMatrixRootColumns.getChildrenCount","powerbitests.customVisuals.sampleDataViews.MatrixData.convertMatrixDataToRoot","powerbitests.customVisuals.sampleDataViews.MatrixData.getDataViewTreeNode","powerbitests.customVisuals.sampleDataViews.MatrixData.getDataView"],"mappings":"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","file":"customVisuals/sampleDataViews/MatrixData.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests.customVisuals.sampleDataViews {\r\n    import DataView = powerbi.DataView;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n    import DataViewMatrix = powerbi.DataViewMatrix;\r\n    import data = powerbi.data;\r\n    import DataViewMetadata = powerbi.DataViewMetadata;\r\n    import DataViewMatrixNode = powerbi.DataViewMatrixNode;\r\n    import DataViewTreeNode = powerbi.DataViewTreeNode;\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export class MatrixData {\r\n\r\n         public static getCountOfMatrixRootColumns(root: DataViewMatrixNode): number {\r\n            if (!root || !root.children || !root.children.length){ \r\n                return 0;\r\n            }\r\n\r\n            function getChildrenCount(treeNode: DataViewTreeNode): number {\r\n                return (!treeNode.children || !treeNode.children.length) \r\n                    ? 1 \r\n                    : treeNode.children.map(getChildrenCount).reduce((a,b) => a + b) + 1;\r\n            }\r\n\r\n            return root.children.map(getChildrenCount).reduce((a,b) => a + b);\r\n        }\r\n\r\n        private convertMatrixDataToRoot(data) {\r\n            let rowGroupSource1: SQExpr = SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"t\", name: \"rowgroup1\" } });\r\n            let rowGroupSource2: SQExpr = SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"t\", name: \"rowgroup2\" } });\r\n            let rowGroupSource3: SQExpr = SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"t\", name: \"rowgroup3\" } });\r\n            \r\n            let root = $.extend(true, {}, data);\r\n            for (let firstLevelKey in root.children) {\r\n            let firstLevel = root.children[firstLevelKey];\r\n\r\n                for (let secondLevelKey in firstLevel.children) {\r\n                    let secondLevel = firstLevel.children[secondLevelKey];\r\n\r\n                    for (let thirdLevelKey in secondLevel.children) {\r\n                        let thridLevel = secondLevel.children[thirdLevelKey];\r\n\r\n                        secondLevel.children[thirdLevelKey] =  this.getDataViewTreeNode(secondLevel, rowGroupSource3);\r\n                        secondLevel.children[thirdLevelKey].values = thridLevel.values.map((x, i) => <any>{ value: x, valueSourceIndex: i });\r\n                    }\r\n\r\n                    firstLevel.children[secondLevelKey] = this.getDataViewTreeNode(secondLevel, rowGroupSource2);\r\n                    firstLevel.children[secondLevelKey].children = secondLevel.children;\r\n                    firstLevel.children[secondLevelKey].childIdentityFields = [rowGroupSource3];\r\n                }\r\n\r\n                root.children[firstLevelKey] = this.getDataViewTreeNode(firstLevel, rowGroupSource1);\r\n                root.children[firstLevelKey].children = firstLevel.children;\r\n                root.children[firstLevelKey].childIdentityFields = [rowGroupSource2];\r\n            }\r\n\r\n            root.childIdentityFields = [rowGroupSource1];\r\n            return root;\r\n        }\r\n\r\n        private getDataViewTreeNode(node: any, rowGroupSource: SQExpr): DataViewTreeNode {\r\n            return <DataViewTreeNode> {\r\n                    value: node.value,\r\n                    identity: data.createDataViewScopeIdentity(SQExprBuilder.equal(rowGroupSource, SQExprBuilder.text(node.value)))\r\n                };\r\n        }\r\n\r\n        public getDataView(): DataView {\r\n            let dataTypeNumber = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double);\r\n            let dataTypeString = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text);\r\n\r\n            let dataViewMetadata: DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: 'measure1',\r\n                        type: dataTypeNumber,\r\n                        isMeasure: true,\r\n                        index: 3,\r\n                        objects: {\r\n                             general: { formatString: '#.0' }\r\n                        }\r\n                    },\r\n                    {\r\n                        displayName: 'measure2',\r\n                        type: dataTypeNumber,\r\n                        isMeasure: true,\r\n                        index: 4,\r\n                        objects: {\r\n                             general: { formatString: '#.00' }\r\n                        }\r\n                    },\r\n                    {\r\n                        displayName: 'measure3',\r\n                        type: dataTypeNumber,\r\n                        isMeasure: true,\r\n                        index: 5,\r\n                        objects: {\r\n                             general: { formatString: '#' }\r\n                        }\r\n                    },\r\n                    {\r\n                        displayName: 'RowGroup1',\r\n                        queryName: 'RowGroup1',\r\n                        type: dataTypeString,\r\n                        index: 0\r\n                    },\r\n                    {\r\n                        displayName: 'RowGroup2',\r\n                        queryName: 'RowGroup2',\r\n                        type: dataTypeString,\r\n                        index: 1\r\n                    },\r\n                    {\r\n                        displayName: 'RowGroup3',\r\n                        queryName: 'RowGroup3',\r\n                        type: dataTypeString,\r\n                        index: 2\r\n                    }\r\n                ]\r\n            };\r\n\r\n            let data = {\r\n                children: [\r\n                {\r\n                    value: 'North America',\r\n                    children: [\r\n                        {\r\n                            value: 'Canada',\r\n                            children: [\r\n                                { value: 'Ontario', values: [1000, 1001, 1002] },\r\n                                { value: 'Quebec', values: [1010, 1011, 1012] }\r\n                            ]\r\n                        },\r\n                        {\r\n                            value: 'USA',\r\n                            children: [\r\n                                { value: 'Washington', values: [1100, 1101, 1102] },\r\n                                { value: 'Oregon', values: [1110, 1111, 1112] }\r\n                            ]\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    value: 'South America',\r\n                    children: [\r\n                        {\r\n                            value: 'Brazil',\r\n                            children: [\r\n                                { value: 'Amazonas', values: [2000, 2001, 2002] },\r\n                                { value: 'Mato Grosso', values: [2010, 2011, 2012] }\r\n                            ]\r\n                        },\r\n                        {\r\n                            value: 'Chile',\r\n                            children: [\r\n                                { value: 'Arica', values: [2100, 2101, 2102] },\r\n                                { value: 'Parinacota', values: [2110, 2111, 2112] }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }]\r\n            };\r\n\r\n            var matrixThreeMeasuresThreeRowGroups: DataViewMatrix = {\r\n                rows: {\r\n                    root: this.convertMatrixDataToRoot(data),\r\n                    levels: [\r\n                        { sources: [dataViewMetadata.columns[0]] },\r\n                        { sources: [dataViewMetadata.columns[1]] },\r\n                        { sources: [dataViewMetadata.columns[2]] }\r\n                    ]\r\n                },\r\n                columns: {\r\n                    root: {\r\n                        children: [\r\n                            { level: 0 },\r\n                            { level: 0, levelSourceIndex: 1 },\r\n                            { level: 0, levelSourceIndex: 2 }\r\n                        ]\r\n                    },\r\n                    levels: [{\r\n                        sources: [\r\n                            dataViewMetadata.columns[0],\r\n                            dataViewMetadata.columns[1],\r\n                            dataViewMetadata.columns[2]\r\n                        ]\r\n                    }]\r\n                },\r\n                valueSources: [\r\n                    dataViewMetadata.columns[0],\r\n                    dataViewMetadata.columns[1],\r\n                    dataViewMetadata.columns[2]\r\n                ]\r\n            };\r\n\r\n            return {\r\n                metadata: {\r\n                    columns: [\r\n                        dataViewMetadata.columns[3],\r\n                        dataViewMetadata.columns[4],\r\n                        dataViewMetadata.columns[5]\r\n                    ], segment: {}\r\n                },\r\n                matrix: matrixThreeMeasuresThreeRowGroups\r\n            };\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}