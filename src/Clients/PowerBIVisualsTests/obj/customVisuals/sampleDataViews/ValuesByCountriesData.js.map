{"version":3,"sources":["customVisuals/sampleDataViews/ValuesByCountriesData.ts"],"names":["powerbitests","powerbitests.customVisuals","powerbitests.customVisuals.sampleDataViews","powerbitests.customVisuals.sampleDataViews.ValuesByCountriesData","powerbitests.customVisuals.sampleDataViews.ValuesByCountriesData.constructor","powerbitests.customVisuals.sampleDataViews.ValuesByCountriesData.getDataView"],"mappings":"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","file":"customVisuals/sampleDataViews/ValuesByCountriesData.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests.customVisuals.sampleDataViews {\r\n    import DataViewMetadata = powerbi.DataViewMetadata;\r\n    import DataView = powerbi.DataView;\r\n    import ValueType = powerbi.ValueType;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n\r\n    export class ValuesByCountriesData {\r\n\r\n        public getDataView(): DataView {\r\n            let sourceData: string[] = [\r\n                \"Brazil\", \"Brazil\", \"Brazil\", \"Brazil\", \"Canada\", \"Canada\",\r\n                \"Canada\", \"Mexico\", \"Mexico\", \"Mexico\", \"Mexico\", \"USA\",\r\n                \"USA\", \"USA\", \"USA\", \"Portugal\", \"Portugal\", \"Portugal\"\r\n            ];\r\n\r\n            let destinationData: string[] = [\r\n                \"Portugal\", \"France\", \"Spain\", \"England\", \"Portugal\", \"France\",\r\n                \"England\", \"Portugal\", \"France\", \"Spain\", \"England\", \"Portugal\",\r\n                \"France\", \"Spain\", \"England\", \"Angola\", \"Senegal\", \"Morocco\"\r\n            ];\r\n\r\n            let sampleData: number[] = [\r\n                5, 1, 1, 1, 1, 5, 1, 1, 1,\r\n                5, 1, 1, 1, 1, 5, 2, 1, 1\r\n            ];\r\n\r\n            let dataViewMetadata: DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: \"Source\",\r\n                        queryName: \"Sankey.Source\",\r\n                        type: ValueType.fromDescriptor({ text: true })\r\n                    },\r\n                    {\r\n                        displayName: \"Destination\",\r\n                        queryName: \"Sankey.Destination\",\r\n                        type: ValueType.fromDescriptor({ text: true })\r\n                    },\r\n                    {\r\n                        displayName: \"Value\",\r\n                        queryName: \"Sum(Sankey.Value)\"\r\n                    }]\r\n            };\r\n\r\n            return {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [\r\n                        {\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: sourceData\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: destinationData\r\n                        }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata.columns[2],\r\n                            values: sampleData\r\n                        }\r\n                    ])\r\n                }\r\n            };\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}