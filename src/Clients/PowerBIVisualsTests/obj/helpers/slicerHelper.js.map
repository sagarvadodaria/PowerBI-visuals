{"version":3,"sources":["helpers/slicerHelper.ts"],"names":["powerbitests","powerbitests.slicerHelper","powerbitests.slicerHelper.initSlicer","powerbitests.slicerHelper.createHostServices","powerbitests.slicerHelper.buildDefaultDataView","powerbitests.slicerHelper.buildBooleanValuesDataView","powerbitests.slicerHelper.buildImageDataView","powerbitests.slicerHelper.buildEmptyDataView","powerbitests.slicerHelper.buildSequenceDataView","powerbitests.slicerHelper.buildDefaultDataViewObjects","powerbitests.slicerHelper.buildDefaultDataViewMetadata","powerbitests.slicerHelper.buildBooleanValueDataViewMetadata","powerbitests.slicerHelper.buildDataViewMetadataWithLongName","powerbitests.slicerHelper.buildDefaultDataViewCategorical","powerbitests.slicerHelper.buildBooleanValuesDataViewCategorical","powerbitests.slicerHelper.buildImageDataViewMetadata","powerbitests.slicerHelper.buildImageDataViewCategorical","powerbitests.slicerHelper.buildEmptyDataViewCategorical","powerbitests.slicerHelper.buildSequenceDataViewCategorical","powerbitests.slicerHelper.validateSlicerItem","powerbitests.slicerHelper.validateSelectionState","powerbitests.slicerHelper.isVerticalOrientation","powerbitests.slicerHelper.getContainerToBeValidated","powerbitests.slicerHelper.validateCheckedState","powerbitests.slicerHelper.TestBuilder","powerbitests.slicerHelper.TestBuilder.constructor","powerbitests.slicerHelper.TestBuilder.destroy","powerbitests.slicerHelper.TestBuilder.initializeHelperElements"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAIH,IAAO,YAAY,CA2ZlB;AA3ZD,WAAO,YAAY;IAACA,IAAAA,YAAYA,CA2Z/BA;IA3ZmBA,WAAAA,YAAYA,EAACA,CAACA;QAG9BC,IAAOA,SAASA,GAAGA,OAAOA,CAACA,SAASA,CAACA;QAGxBA,6BAAgBA,GAAGA,YAAYA,CAACA;QAChCA,yBAAYA,GAAGA,QAAQA,CAACA;QACxBA,oCAAuBA,GAAGA,aAAaA,CAACA;QACxCA,yCAA4BA,GAAGA,kBAAkBA,CAACA;QAClDA,sCAAyBA,GAAGA,eAAeA,CAACA;QACzDA,IAAMA,aAAaA,GAAGA,UAAUA,CAACA;QAEpBA,4BAAeA,GAAGA,CAACA,oCAAoCA;YAChEA,qCAAqCA;YACrCA,oCAAoCA,CAACA,CAACA;QASzCA,CAACA;QAEFA,yDAAyDA;QACzDA,oBAA2BA,OAAeA,EAAEA,OAA4BA,EAAEA,KAAaA;YACnFC,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,QAAQA,GAAGA,OAAOA,CAACA,QAAQA,GAAGA,EAAEA,MAAMA,EAAEA,OAAOA,CAACA,MAAMA,EAAEA,EAAEA,KAAKA,EAAEA,OAAOA,CAACA,KAAKA,EAAEA,EAAEA,CAACA;YAC1GA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,QAAQA,GAAGA,OAAOA,CAACA,QAAQA,GAAGA,oBAAoBA,CAACA,KAAKA,CAACA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,mBAAmBA,CAACA,aAAaA,CAACA,EAAEA,CAACA,CAACA,SAASA,CAACA,yBAAYA,CAACA,CAACA,MAAMA,EAAEA,CAACA;YAEpGA,MAAMA,CAACA,IAAIA,CAACA;gBACRA,OAAOA,EAAEA,OAAOA;gBAChBA,IAAIA,EAAEA,OAAOA,CAACA,YAAYA;gBAC1BA,KAAKA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA;gBAC5CA,QAAQA,EAAEA,QAAQA;gBAClBA,aAAaA,EAAEA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;aACrCA,CAACA,CAACA;YAEHA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,OAAOA,CAACA,eAAeA,GAAGA,OAAOA,CAACA,eAAeA,GAAGA,2BAA2BA,CAACA,OAAOA,CAACA,WAAWA,CAACA,CAACA;YACjIA,MAAMA,CAACA,MAAMA,CAACA;QAClBA,CAACA;QAfeD,uBAAUA,aAezBA,CAAAA;QAEDA;YACIE,IAAIA,YAAYA,GAAGA,IAAIA,OAAOA,CAACA,OAAOA,CAACA,yBAAyBA,EAAEA,CAACA;YACnEA,YAAYA,CAACA,SAASA,GAAGA,cAAMA,OAAAA,IAAIA,EAAJA,CAAIA,CAACA;YACpCA,YAAYA,CAACA,aAAaA,GAAGA,UAACA,OAAsCA;gBAChEA,MAAMA,CAACA,IAAIA,kBAAKA,CAACA,kBAAkBA,CAAiBA,OAAOA,CAACA,MAAMA,EAAYA,OAAOA,CAACA,YAAYA,CAACA,CAACA;YACxGA,CAACA,CAACA;YACFA,YAAYA,CAACA,uBAAuBA,GAAGA,UAACA,yBAA4DA,IAAKA,OAAAA,CAACA,CAACA,IAAIA,EAANA,CAAMA,CAACA;YAChHA,YAAYA,CAACA,uBAAuBA,GAAGA,UAACA,UAA2CA;gBAC/EA,IAAIA,yBAA4DA,CAACA;gBAEjEA,yBAAyBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,UAAUA,EAAEA,UAACA,QAAQA;oBACnDA,IAAIA,KAAKA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,eAAeA,CAACA,sBAAsBA,CAACA,QAAQA,CAACA,CAACA;oBAC1EA,MAAMA,CAACA;wBACHA,WAAWA,EAAEA,KAAKA;wBAClBA,QAAQA,EAAEA,QAAQA;qBACrBA,CAACA;gBACNA,CAACA,CAACA,CAACA;gBACHA,MAAMA,CAACA,yBAAyBA,CAACA;YACrCA,CAACA,CAACA;YAEFA,MAAMA,CAACA,YAAYA,CAACA;QACxBA,CAACA;QArBeF,+BAAkBA,qBAqBjCA,CAAAA;QAEDA,8BAAqCA,KAAaA;YAC9CG,IAAIA,gBAAgBA,GAA6BA,4BAA4BA,EAAEA,CAACA;YAChFA,IAAIA,mBAAmBA,GAAgCA,+BAA+BA,CAACA,KAAKA,CAACA,CAACA;YAC9FA,IAAIA,QAAQA,GAAqBA;gBAC7BA,QAAQA,EAAEA,gBAAgBA;gBAC1BA,WAAWA,EAAEA,mBAAmBA;aACnCA,CAACA;YAEFA,MAAMA,CAACA,QAAQA,CAACA;QACpBA,CAACA;QATeH,iCAAoBA,uBASnCA,CAAAA;QAEDA,oCAA2CA,KAAaA;YACpDI,IAAIA,gBAAgBA,GAA6BA,iCAAiCA,EAAEA,CAACA;YACrFA,IAAIA,mBAAmBA,GAAgCA,qCAAqCA,CAACA,KAAKA,CAACA,CAACA;YACpGA,IAAIA,QAAQA,GAAqBA;gBAC7BA,QAAQA,EAAEA,gBAAgBA;gBAC1BA,WAAWA,EAAEA,mBAAmBA;aACnCA,CAACA;YAEFA,MAAMA,CAACA,QAAQA,CAACA;QACpBA,CAACA;QATeJ,uCAA0BA,6BASzCA,CAAAA;QAEDA,4BAAmCA,KAAaA;YAC5CK,IAAIA,gBAAgBA,GAA6BA,0BAA0BA,EAAEA,CAACA;YAC9EA,IAAIA,mBAAmBA,GAAgCA,6BAA6BA,CAACA,KAAKA,CAACA,CAACA;YAC5FA,IAAIA,QAAQA,GAAqBA;gBAC7BA,QAAQA,EAAEA,gBAAgBA;gBAC1BA,WAAWA,EAAEA,mBAAmBA;aACnCA,CAACA;YAEFA,MAAMA,CAACA,QAAQA,CAACA;QACpBA,CAACA;QATeL,+BAAkBA,qBASjCA,CAAAA;QAEDA;YACIM,IAAIA,gBAAgBA,GAA6BA,4BAA4BA,EAAEA,CAACA;YAChFA,IAAIA,mBAAmBA,GAAgCA,6BAA6BA,EAAEA,CAACA;YACvFA,IAAIA,QAAQA,GAAqBA;gBAC7BA,QAAQA,EAAEA,gBAAgBA;gBAC1BA,WAAWA,EAAEA,mBAAmBA;aACnCA,CAACA;YAEFA,MAAMA,CAACA,QAAQA,CAACA;QACpBA,CAACA;QATeN,+BAAkBA,qBASjCA,CAAAA;QAEDA;;;;;;WAMGA;QACHA,+BAAsCA,KAAaA,EAAEA,KAAaA,EAAEA,KAAaA,EAAEA,cAAgCA;YAAhCO,8BAAgCA,GAAhCA,wBAAgCA;YAC/GA,IAAIA,gBAAgBA,GAA6BA,4BAA4BA,EAAEA,CAACA;YAChFA,IAAIA,mBAAmBA,GAAgCA,gCAAgCA,CAACA,KAAKA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,gBAAgBA,EAAEA,cAAcA,CAACA,CAACA;YAC/IA,IAAIA,QAAQA,GAAqBA;gBAC7BA,QAAQA,EAAEA,gBAAgBA;gBAC1BA,WAAWA,EAAEA,mBAAmBA;aACnCA,CAACA;YAEFA,MAAMA,CAACA,QAAQA,CAACA;QACpBA,CAACA;QATeP,kCAAqBA,wBASpCA,CAAAA;QAEDA,qCAA4CA,WAA+BA,EAAEA,wBAAwCA,EAAEA,YAA6BA;YAAvEQ,wCAAwCA,GAAxCA,+BAAwCA;YAAEA,4BAA6BA,GAA7BA,oBAA6BA;YAChJA,MAAMA,CAACA;gBACHA,OAAOA,EAAEA;oBACLA,WAAWA,EAAEA,WAAWA,GAAGA,WAAWA,GAAGA,gBAA0BA;iBACtEA;gBACDA,SAASA,EAAEA;oBACPA,wBAAwBA,EAAEA,wBAAwBA;oBAClDA,YAAYA,EAAEA,YAAYA;iBAC7BA;aACJA,CAACA;QACNA,CAACA;QAVeR,wCAA2BA,8BAU1CA,CAAAA;QAEDA;YACIS,MAAMA,CAACA;gBACHA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,OAAOA,EAAEA,KAAKA,EAAEA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,cAAcA,CAACA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,CAACA,EAAEA,CAACA;aAC3GA,CAACA;QACNA,CAACA;QALeT,yCAA4BA,+BAK3CA,CAAAA;QAEDA;YACIU,MAAMA,CAACA;gBACHA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,OAAOA,EAAEA,KAAKA,EAAEA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,cAAcA,CAACA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,CAACA,EAAEA,CAACA;aAC3GA,CAACA;QACNA,CAACA;QALeV,8CAAiCA,oCAKhDA,CAAAA;QAEDA;YACIW,MAAMA,CAACA;gBACHA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,0CAA0CA,EAAEA,KAAKA,EAAEA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,cAAcA,CAACA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,CAACA,EAAEA,CAACA;aAC9IA,CAACA;QACNA,CAACA;QALeX,8CAAiCA,oCAKhDA,CAAAA;QAEDA,yCAAgDA,KAAaA,EAAEA,sBAAgCA;YAC3FY,IAAIA,gBAAgBA,GAAGA,4BAA4BA,EAAEA,CAACA;YACtDA,IAAIA,UAAUA,GAAGA,CAACA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,OAAOA,CAACA;gBACrEA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,QAAQA,CAACA;gBACxDA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,MAAMA,CAACA;gBACtDA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,QAAQA,CAACA;gBACxDA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,QAAQA,CAACA,CAACA,CAACA;YAE9DA,IAAIA,MAAMA,GAAGA,CAACA,OAAOA,EAAEA,QAAQA,EAAEA,MAAMA,EAAEA,QAAQA,EAAEA,QAAQA,CAACA,CAACA;YAC7DA,IAAIA,WAAWA,GAAaA,CAACA,SAASA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAGA,CAACA;YAEtDA,EAAEA,CAACA,CAACA,sBAAsBA,KAAKA,IAAIA,CAACA,CAACA,CAACA;gBAClCA,UAAUA,CAACA,IAAIA,CAACA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;gBAClFA,MAAMA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACvBA,WAAWA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACxBA,CAACA;YAEDA,IAAIA,QAAQA,GAAmCA;gBAC3CA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;gBACnCA,MAAMA,EAAEA,MAAMA;gBACdA,QAAQA,EAAEA,UAAUA;gBACpBA,cAAcA,EAAEA,CAACA,KAAKA,CAACA;aAC1BA,CAACA;YAEFA,IAAIA,mBAAmBA,GAAGA;gBACtBA,UAAUA,EAAEA,CAACA,QAAQA,CAACA;gBACtBA,MAAMA,EAAEA,OAAOA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;wBACvDA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;wBACnCA,MAAMA,EAAEA,WAAWA;qBACtBA,CAACA,CAACA;aACNA,CAACA;YAEFA,MAAMA,CAACA,mBAAmBA,CAACA;QAC/BA,CAACA;QAjCeZ,4CAA+BA,kCAiC9CA,CAAAA;QAEDA,+CAAsDA,KAAaA;YAC/Da,IAAIA,gBAAgBA,GAAGA,4BAA4BA,EAAEA,CAACA;YACtDA,IAAIA,QAAQA,GAAmCA;gBAC3CA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;gBACnCA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,KAAKA,EAAEA,KAAKA,CAACA;gBAC5BA,QAAQA,EAAEA,CAACA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,IAAIA,CAACA;oBAC3DA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,KAAKA,CAACA;oBACrDA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,CAACA;gBAC1DA,cAAcA,EAAEA,CAACA,KAAKA,CAACA;aAC1BA,CAACA;YAEFA,IAAIA,mBAAmBA,GAAGA;gBACtBA,UAAUA,EAAEA,CAACA,QAAQA,CAACA;gBACtBA,MAAMA,EAAEA,OAAOA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;wBACvDA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;wBACnCA,MAAMA,EAAEA;4BACJA,SAASA;4BACTA,CAACA;4BACDA,CAACA;yBACJA;qBACJA,CAACA,CAACA;aACNA,CAACA;YAEFA,MAAMA,CAACA,mBAAmBA,CAACA;QAC/BA,CAACA;QAxBeb,kDAAqCA,wCAwBpDA,CAAAA;QAEDA;YACIc,MAAMA,CAACA;gBACHA,OAAOA,EAAEA;oBACLA;wBACIA,WAAWA,EAAEA,aAAaA;wBAC1BA,KAAKA,EAAEA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA;wBACzBA,IAAIA,EAAEA,SAASA,CAACA,cAAcA,CAACA;4BAC3BA,IAAIA,EAAEA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA;4BACxBA,YAAYA,EAAEA,OAAOA,CAACA,YAAYA,CAACA,QAAQA;yBAC9CA,CAACA;qBACLA,CAACA;aACTA,CAACA;QACNA,CAACA;QAZed,uCAA0BA,6BAYzCA,CAAAA;QAEDA,uCAA8CA,KAAaA;YACvDe,IAAIA,gBAAgBA,GAAGA,4BAA4BA,EAAEA,CAACA;YACtDA,IAAIA,QAAQA,GAAmCA;gBAC3CA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;gBACnCA,MAAMA,EAAEA,EAAEA;gBACVA,QAAQA,EAAEA,EAAEA;gBACZA,cAAcA,EAAEA,CAACA,KAAKA,CAACA;aAC1BA,CAACA;YACFA,IAAIA,mBAAmBA,GAAGA;gBACtBA,UAAUA,EAAEA,CAACA,QAAQA,CAACA;aACzBA,CAACA;YACFA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,EAAEA,EAAEA,CAACA;gBACrCA,IAAIA,QAAQA,GAAWA,6CAA6CA,GAAGA,KAAKA,GAAGA,MAAMA,CAACA;gBACtFA,QAAQA,CAACA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAC/BA,IAAIA,OAAOA,GAAGA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,QAAQA,CAACA,CAACA;gBACvEA,QAAQA,CAACA,QAAQA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;YACpCA,CAACA;YAEDA,MAAMA,CAACA,mBAAmBA,CAACA;QAC/BA,CAACA;QAnBef,0CAA6BA,gCAmB5CA,CAAAA;QAEDA;YACIgB,IAAIA,gBAAgBA,GAAGA,4BAA4BA,EAAEA,CAACA;YACtDA,IAAIA,mBAAmBA,GAAGA;gBACtBA,UAAUA,EAAEA,CAACA;wBACTA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;wBACnCA,MAAMA,EAAEA,EAAEA;wBACVA,QAAQA,EAAEA,EAAEA;qBACfA,CAACA;aACLA,CAACA;YAEFA,MAAMA,CAACA,mBAAmBA,CAACA;QAC/BA,CAACA;QAXehB,0CAA6BA,gCAW5CA,CAAAA;QAEDA;;;;;;;WAOGA;QACHA,0CAAiDA,KAAaA,EAAEA,KAAaA,EAAEA,KAAaA,EAAEA,gBAA0CA,EAAEA,cAAgCA;YAAhCiB,8BAAgCA,GAAhCA,wBAAgCA;YACtKA,IAAIA,IAAIA,GAAaA,EAAEA,CAACA;YACxBA,IAAIA,IAAIA,GAAaA,EAAEA,CAACA;YACxBA,IAAIA,QAAQA,GAAoCA,EAAEA,CAACA;YACnDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,KAAKA,EAAEA,CAACA,GAAGA,KAAKA,GAAGA,KAAKA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gBACzCA,IAAIA,KAAKA,GAAGA,cAAcA,GAAGA,GAAGA,GAAGA,CAACA,CAACA;gBACrCA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACjBA,QAAQA,CAACA,IAAIA,CAACA,kBAAKA,CAACA,iCAAiCA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,CAACA,CAACA;gBACrEA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,CAACA,CAACA;YAC7BA,CAACA;YAEDA,IAAIA,mBAAmBA,GAAGA;gBACtBA,UAAUA,EAAEA,CAACA;wBACTA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;wBACnCA,MAAMA,EAAEA,IAAIA;wBACZA,QAAQA,EAAEA,QAAQA;wBAClBA,cAAcA,EAAEA,CAACA,KAAKA,CAACA;qBAC1BA,CAACA;aACLA,CAACA;YAEFA,MAAMA,CAACA,mBAAmBA,CAACA;QAC/BA,CAACA;QArBejB,6CAAgCA,mCAqB/CA,CAAAA;QAEDA,4BAAmCA,aAAqBA,EAAEA,KAAiBA;YAAjBkB,qBAAiBA,GAAjBA,SAAiBA;YACvEA,IAAIA,UAAUA,GAAGA,CAACA,CAACA,aAAaA,CAACA,CAACA;YAClCA,MAAMA,CAACA,UAAUA,CAACA,EAAEA,CAACA,KAAKA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;QAC5DA,CAACA;QAHelB,+BAAkBA,qBAGjCA,CAAAA;QAEDA,gCAAuCA,WAA8BA,EAAEA,gBAA0BA,EAAEA,OAAoBA;YACnHmB,IAAIA,cAAcA,GAAaA,EAAEA,CAACA;YAClCA,IAAIA,sBAAsBA,GAAGA,yBAAyBA,CAACA,WAAWA,EAAEA,OAAOA,CAACA,CAACA;YAC7EA,sBAAsBA,CAACA,IAAIA,CAACA,UAACA,KAAaA,EAAEA,OAAyBA;gBACjEA,EAAEA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA,QAAQA,CAACA,aAAaA,CAACA,CAACA;oBAC1CA,cAAcA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACnCA,CAACA,CAACA,CAACA;YAEHA,MAAMA,CAACA,cAAcA,CAACA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,CAACA;YAEjDA,EAAEA,CAACA,CAACA,qBAAqBA,CAACA,WAAWA,CAACA,CAACA;gBACnCA,oBAAoBA,CAACA,gBAAgBA,EAAEA,OAAOA,CAACA,mBAAmBA,CAACA,CAACA;QAC5EA,CAACA;QAZenB,mCAAsBA,yBAYrCA,CAAAA;QAEDA,+BAAsCA,WAA8BA;YAChEoB,MAAMA,CAACA,WAAWA,KAAKA,gBAA0BA,CAACA;QACtDA,CAACA;QAFepB,kCAAqBA,wBAEpCA,CAAAA;QAEDA,mCAAmCA,WAA8BA,EAAEA,OAAoBA;YACnFqB,IAAIA,sBAA8BA,CAACA;YACnCA,EAAEA,CAACA,CAACA,qBAAqBA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA;gBACrCA,sBAAsBA,GAAGA,OAAOA,CAACA,cAAcA,CAACA;YACpDA,CAACA;YACDA,IAAIA,CAACA,CAACA;gBACFA,sBAAsBA,GAAGA,OAAOA,CAACA,UAAUA,CAACA;YAChDA,CAACA;YACDA,MAAMA,CAACA,sBAAsBA,CAACA;QAClCA,CAACA;QAEDrB,8BAA8BA,eAAyBA,EAAEA,mBAA2BA;YAChFsB,IAAIA,aAAaA,GAAaA,EAAEA,CAACA;YAEjCA,mBAAmBA,CAACA,IAAIA,CAACA,UAACA,KAAaA,EAAEA,OAAyBA;gBAC9DA,EAAEA,CAACA,CAACA,OAAOA,CAACA,OAAOA,CAACA;oBAChBA,aAAaA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAClCA,CAACA,CAACA,CAACA;YAEHA,MAAMA,CAACA,aAAaA,CAACA,CAACA,OAAOA,CAACA,eAAeA,CAACA,CAACA;QACnDA,CAACA;QAEDtB;YAuBIuB,qBAAYA,WAA8BA,EAAEA,MAAoBA,EAAEA,KAAmBA;gBAAzCC,sBAAoBA,GAApBA,YAAoBA;gBAAEA,qBAAmBA,GAAnBA,WAAmBA;gBApB9EA,UAAKA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,aAAaA,CAACA,QAAQA,CAACA;oBAC/CA,MAAMA,EAAEA,GAAGA;oBACXA,MAAMA,EAAEA,SAASA;oBACjBA,MAAMA,EAAEA,cAAcA;iBACzBA,CAACA,CAACA;gBACIA,qBAAgBA,GAA6BA,4BAA4BA,EAAEA,CAACA;gBAC5EA,wBAAmBA,GAAgCA,+BAA+BA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBAC/FA,aAAQA,GAAqBA,oBAAoBA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBAC9DA,+BAA0BA,GAAqCA;oBAClEA,SAASA,EAAEA,CAACA,IAAIA,CAACA,QAAQA,CAACA;iBAC7BA,CAACA;gBACKA,oCAA+BA,GAAqCA;oBACvEA,SAASA,EAAEA,CAACA,kBAAkBA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;iBAC9CA,CAACA;gBAQEA,IAAIA,OAAOA,GAAGA,oBAAOA,CAACA,OAAOA,CAACA,MAAMA,CAACA,QAAQA,EAAEA,EAAEA,KAAKA,CAACA,QAAQA,EAAEA,EAAEA,QAAQA,CAACA,CAACA;gBAC7EA,IAAIA,CAACA,YAAYA,GAAGA,kBAAkBA,EAAEA,CAACA;gBACzCA,IAAIA,QAAQA,GAAGA,IAAIA,CAACA,QAAQA,CAACA;gBAC7BA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,2BAA2BA,CAACA,WAAWA,CAACA,CAACA;gBAErEA,IAAIA,mBAAmBA,GAAwBA;oBAC3CA,UAAUA,EAAEA,yBAAYA;oBACxBA,YAAYA,EAAEA,IAAIA,CAACA,YAAYA;oBAC/BA,QAAQA,EAAEA,QAAQA;oBAClBA,eAAeA,EAAEA,QAAQA,CAACA,QAAQA,CAACA,OAAOA;oBAC1CA,WAAWA,EAAEA,WAAWA;iBAC3BA,CAACA;gBAEFA,IAAIA,CAACA,MAAMA,GAAGA,UAAUA,CAACA,OAAOA,EAAEA,mBAAmBA,EAAEA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBAEnEA,IAAIA,CAACA,qCAAqCA,GAAGA,MAAMA,CAACA,qBAAqBA,CAACA;gBAC1EA,MAAMA,CAACA,qBAAqBA,GAAGA,UAACA,QAAoBA;oBAChDA,QAAQA,EAAEA,CAACA;oBACXA,MAAMA,CAACA,CAACA,CAACA;gBACbA,CAACA,CAACA;gBAEFA,OAAOA,CAACA,KAAKA,EAAEA,CAACA,OAAOA,EAAEA,CAACA;gBAE1BA,oBAAOA,CAACA,iBAAiBA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,IAAIA,CAACA,0BAA0BA,CAACA,CAACA;gBACxEA,IAAIA,CAACA,wBAAwBA,EAAEA,CAACA;gBAEhCA,KAAKA,CAACA,IAAIA,CAACA,YAAYA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAC3DA,CAACA;YAEMD,6BAAOA,GAAdA;gBACIE,MAAMA,CAACA,qBAAqBA,GAAGA,IAAIA,CAACA,qCAAqCA,CAACA;gBAC1EA,OAAOA,CAACA,KAAKA,EAAEA,CAACA,SAASA,EAAEA,CAACA;YAChCA,CAACA;YAEMF,8CAAwBA,GAA/BA;gBACIG,IAAIA,CAACA,UAAUA,GAAGA,CAACA,CAACA,aAAaA,CAACA,CAACA;gBACnCA,IAAIA,CAACA,cAAcA,GAAGA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;gBAC3CA,IAAIA,CAACA,mBAAmBA,GAAGA,CAACA,CAACA,iBAAiBA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;YAClEA,CAACA;YACLH,kBAACA;QAADA,CA/DAvB,AA+DCuB,IAAAvB;QA/DYA,wBAAWA,cA+DvBA,CAAAA;IACLA,CAACA,EA3ZmBD,YAAYA,GAAZA,yBAAYA,KAAZA,yBAAYA,QA2Z/BA;AAADA,CAACA,EA3ZM,YAAY,KAAZ,YAAY,QA2ZlB","file":"helpers/slicerHelper.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests.slicerHelper {\r\n    import SlicerOrientation = powerbi.visuals.slicerOrientation.Orientation;\r\n    import SQExpr = powerbi.data.SQExpr;\r\n    import ValueType = powerbi.ValueType;\r\n    import SemanticFilter = powerbi.data.SemanticFilter;\r\n\r\n    export const SelectAllTextKey = 'Select All';\r\n    export const SlicerVisual = 'slicer';\r\n    export const slicerTextClassSelector = \".slicerText\";\r\n    export const slicerCountTextClassSelector = \".slicerCountText\";\r\n    export const slicerHeaderClassSelector = \".slicerHeader\";\r\n    const SelectedClass = 'selected';\r\n\r\n    export const longSlicerItems = [\"First Slicer Long Name for testing\",\r\n        \"Second Slicer Long Name for testing\",\r\n        \"Third Slicer Long Name for testing\"];\r\n\r\n    export interface RenderSlicerOptions {\r\n        visualType: string;\r\n        hostServices: powerbi.IVisualHostServices;\r\n        dataView?: powerbi.DataView;\r\n        dataViewObjects?: powerbi.DataViewObjects;\r\n        viewport?: powerbi.IViewport;\r\n        orientation?: SlicerOrientation;\r\n    };\r\n\r\n    /** Renders the slicer based on the options passed in. */\r\n    export function initSlicer(element: JQuery, options: RenderSlicerOptions, field: SQExpr): powerbi.IVisual {\r\n        let viewport = options.viewport ? options.viewport : { height: element.height(), width: element.width() };\r\n        let dataView = options.dataView ? options.dataView : buildDefaultDataView(field);\r\n        let visual = powerbi.visuals.visualPluginFactory.createMinerva({}).getPlugin(SlicerVisual).create();\r\n\r\n        visual.init({\r\n            element: element,\r\n            host: options.hostServices,\r\n            style: powerbi.visuals.visualStyles.create(),\r\n            viewport: viewport,\r\n            interactivity: { selection: true }\r\n        });\r\n\r\n        dataView.metadata.objects = options.dataViewObjects ? options.dataViewObjects : buildDefaultDataViewObjects(options.orientation);\r\n        return visual;\r\n    }\r\n\r\n    export function createHostServices(): powerbi.IVisualHostServices {\r\n        let hostServices = new powerbi.visuals.DefaultVisualHostServices();\r\n        hostServices.canSelect = () => true;\r\n        hostServices.analyzeFilter = (options: powerbi.FilterAnalyzerOptions) => {\r\n            return new mocks.FilterAnalyzerMock(<SemanticFilter>options.filter, <SQExpr[]>options.fieldSQExprs);\r\n        };\r\n        hostServices.setIdentityDisplayNames = (displayNamesIdentityPairs: powerbi.DisplayNameIdentityPair[]) => _.noop;\r\n        hostServices.getIdentityDisplayNames = (identities: powerbi.DataViewScopeIdentity[]) => {\r\n            let displayNamesIdentityPairs: powerbi.DisplayNameIdentityPair[];\r\n\r\n            displayNamesIdentityPairs = _.map(identities, (identity) => {\r\n                let label = powerbi.data.SQExprConverter.getFirstComparandValue(identity);\r\n                return {\r\n                    displayName: label,\r\n                    identity: identity\r\n                };\r\n            });\r\n            return displayNamesIdentityPairs;\r\n        };\r\n\r\n        return hostServices;\r\n    }\r\n\r\n    export function buildDefaultDataView(field: SQExpr): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDefaultDataViewMetadata();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildDefaultDataViewCategorical(field);\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildBooleanValuesDataView(field: SQExpr): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildBooleanValueDataViewMetadata();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildBooleanValuesDataViewCategorical(field);\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildImageDataView(field: SQExpr): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildImageDataViewMetadata();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildImageDataViewCategorical(field);\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildEmptyDataView(): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDefaultDataViewMetadata();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildEmptyDataViewCategorical();\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    /**\r\n     * Builds a DataView containing only Categorical with 2 Columns: Fruit (Category) ['<catValuePrefix> <start>', .., '<catValuePrefix> <start + count - 1>'] and Price (Measure) [<rand>, .., <rand>].\r\n     * @param {number} start The start.\r\n     * @param {number} count Number of rows to create.\r\n     * @param {string = \"fruit\"} catValuePrefix The prefix for all generated catValuePrefix\r\n     * @returns DataView\r\n     */\r\n    export function buildSequenceDataView(field: SQExpr, start: number, count: number, catValuePrefix: string = \"fruit\"): powerbi.DataView {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = buildDefaultDataViewMetadata();\r\n        let dataViewCategorical: powerbi.DataViewCategorical = buildSequenceDataViewCategorical(field, start, count, dataViewMetadata, catValuePrefix);\r\n        let dataView: powerbi.DataView = {\r\n            metadata: dataViewMetadata,\r\n            categorical: dataViewCategorical\r\n        };\r\n\r\n        return dataView;\r\n    }\r\n\r\n    export function buildDefaultDataViewObjects(orientation?: SlicerOrientation, selectAllCheckboxEnabled: boolean = true, singleSelect: boolean = false): powerbi.DataViewObjects {\r\n        return {\r\n            general: {\r\n                orientation: orientation ? orientation : SlicerOrientation.Vertical,\r\n            },\r\n            selection: {\r\n                selectAllCheckboxEnabled: selectAllCheckboxEnabled,\r\n                singleSelect: singleSelect,\r\n            }\r\n        };\r\n    }\r\n\r\n    export function buildDefaultDataViewMetadata(): powerbi.DataViewMetadata {\r\n        return {\r\n            columns: [\r\n                { displayName: \"Fruit\", roles: { \"Values\": true }, type: ValueType.fromDescriptor({ text: true }) }]\r\n        };\r\n    }\r\n\r\n    export function buildBooleanValueDataViewMetadata(): powerbi.DataViewMetadata {\r\n        return {\r\n            columns: [\r\n                { displayName: \"Fruit\", roles: { \"Values\": true }, type: ValueType.fromDescriptor({ bool: true }) }]\r\n        };\r\n    }\r\n\r\n    export function buildDataViewMetadataWithLongName(): powerbi.DataViewMetadata {\r\n        return {\r\n            columns: [\r\n                { displayName: \"This is a long slicer header for testing\", roles: { \"Values\": true }, type: ValueType.fromDescriptor({ text: true }) }]\r\n        };\r\n    }\r\n\r\n    export function buildDefaultDataViewCategorical(field: SQExpr, containsUndefinedValue?: boolean): powerbi.DataViewCategorical {\r\n        let dataViewMetadata = buildDefaultDataViewMetadata();\r\n        let identities = [mocks.dataViewScopeIdentityWithEquality(field, \"Apple\"),\r\n            mocks.dataViewScopeIdentityWithEquality(field, \"Orange\"),\r\n            mocks.dataViewScopeIdentityWithEquality(field, \"Kiwi\"),\r\n            mocks.dataViewScopeIdentityWithEquality(field, \"Grapes\"),\r\n            mocks.dataViewScopeIdentityWithEquality(field, \"Banana\")];\r\n\r\n        let values = [\"Apple\", \"Orange\", \"Kiwi\", \"Grapes\", \"Banana\"];\r\n        let countValues: number[] = [undefined, 3, 4, 5, 6, ];\r\n\r\n        if (containsUndefinedValue === true) {\r\n            identities.push(mocks.dataViewScopeIdentityWithEquality(field, 'undefinedValue'));\r\n            values.push(undefined);\r\n            countValues.push(1);\r\n        }        \r\n\r\n        let category: powerbi.DataViewCategoryColumn = {\r\n            source: dataViewMetadata.columns[0],\r\n            values: values,\r\n            identity: identities,\r\n            identityFields: [field]\r\n        };\r\n\r\n        let dataViewCategorical = {\r\n            categories: [category],\r\n            values: powerbi.data.DataViewTransform.createValueColumns([{\r\n                source: dataViewMetadata.columns[0],\r\n                values: countValues,\r\n            }])\r\n        };\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    export function buildBooleanValuesDataViewCategorical(field: SQExpr): powerbi.DataViewCategorical {\r\n        let dataViewMetadata = buildDefaultDataViewMetadata();\r\n        let category: powerbi.DataViewCategoryColumn = {\r\n            source: dataViewMetadata.columns[0],\r\n            values: [true, false, false],\r\n            identity: [mocks.dataViewScopeIdentityWithEquality(field, true),\r\n                mocks.dataViewScopeIdentityWithEquality(field, false),\r\n                mocks.dataViewScopeIdentityWithEquality(field, false)],\r\n            identityFields: [field]\r\n        };\r\n\r\n        let dataViewCategorical = {\r\n            categories: [category],\r\n            values: powerbi.data.DataViewTransform.createValueColumns([{\r\n                source: dataViewMetadata.columns[0],\r\n                values: [\r\n                    undefined,\r\n                    3,\r\n                    4,\r\n                ]\r\n            }])\r\n        };\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    export function buildImageDataViewMetadata(): powerbi.DataViewMetadata {\r\n        return {\r\n            columns: [\r\n                {\r\n                    displayName: \"DummyImages\",\r\n                    roles: { \"Values\": true },\r\n                    type: ValueType.fromDescriptor({\r\n                        misc: { imageUrl: true },\r\n                        extendedType: powerbi.ExtendedType.ImageUrl,\r\n                    })\r\n                }]\r\n        };\r\n    }\r\n\r\n    export function buildImageDataViewCategorical(field: SQExpr): powerbi.DataViewCategorical {\r\n        let dataViewMetadata = buildDefaultDataViewMetadata();\r\n        let category: powerbi.DataViewCategoryColumn = {\r\n            source: dataViewMetadata.columns[0],\r\n            values: [],\r\n            identity: [],\r\n            identityFields: [field]\r\n        };\r\n        let dataViewCategorical = {\r\n            categories: [category]\r\n        };\r\n        for (let count = 1; count < 6; count++) {\r\n            let imageUrl: string = \"http://dummyimage.com/600x400/000/fff&text=\" + count + '.png';\r\n            category.values.push(imageUrl);\r\n            let scopeId = mocks.dataViewScopeIdentityWithEquality(field, imageUrl);\r\n            category.identity.push(scopeId);\r\n        }\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    export function buildEmptyDataViewCategorical(): powerbi.DataViewCategorical {\r\n        let dataViewMetadata = buildDefaultDataViewMetadata();\r\n        let dataViewCategorical = {\r\n            categories: [{\r\n                source: dataViewMetadata.columns[0],\r\n                values: [],\r\n                identity: [],\r\n            }]\r\n        };\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    /**\r\n     * Builds a large Categorical Data View with 2 Columns: Fruit (Category) ['<catValuePrefix> <start>', .., '<catValuePrefix> <start + count - 1>'] and Price (Measure) [<Rand>, .., <Rand>]\r\n     * @param {number} start Starting inclusive Index for Category Values\r\n     * @param {number} count Number of Category Values\r\n     * @param {powerbi.DataViewMetadata} dataViewMetadata Metadata associated with the DataView\r\n     * @param {string = \"fruit\"} catValuePrefix The prefix for all generated catValuePrefix\r\n     * @returns Categorical DataView\r\n     */\r\n    export function buildSequenceDataViewCategorical(field: SQExpr, start: number, count: number, dataViewMetadata: powerbi.DataViewMetadata, catValuePrefix: string = \"fruit\"): powerbi.DataViewCategorical {\r\n        let cats: string[] = [];\r\n        let vals: number[] = [];\r\n        let scopeIds: powerbi.DataViewScopeIdentity[] = [];\r\n        for (let i = start; i < start + count; i++) {\r\n            let value = catValuePrefix + \" \" + i;\r\n            cats.push(value);\r\n            scopeIds.push(mocks.dataViewScopeIdentityWithEquality(field, value));\r\n            vals.push(Math.random());\r\n        }\r\n\r\n        let dataViewCategorical = {\r\n            categories: [{\r\n                source: dataViewMetadata.columns[0],\r\n                values: cats,\r\n                identity: scopeIds,\r\n                identityFields: [field],\r\n            }]\r\n        };\r\n\r\n        return dataViewCategorical;\r\n    }\r\n\r\n    export function validateSlicerItem(expectedValue: string, index: number = 0): void {\r\n        let slicerText = $(\".slicerText\");\r\n        expect(slicerText.eq(index).text()).toBe(expectedValue);\r\n    }\r\n\r\n    export function validateSelectionState(orientation: SlicerOrientation, expectedSelected: number[], builder: TestBuilder): void {\r\n        let actualSelected: number[] = [];\r\n        let containerToBeValidated = getContainerToBeValidated(orientation, builder);\r\n        containerToBeValidated.each((index: number, element: HTMLInputElement) => {\r\n            if (element.classList.contains(SelectedClass))\r\n                actualSelected.push(index);\r\n        });\r\n\r\n        expect(actualSelected).toEqual(expectedSelected);\r\n\r\n        if (isVerticalOrientation(orientation))\r\n            validateCheckedState(expectedSelected, builder.slicerCheckboxInput);\r\n    }\r\n\r\n    export function isVerticalOrientation(orientation: SlicerOrientation): boolean {\r\n        return orientation === SlicerOrientation.Vertical;\r\n    }\r\n\r\n    function getContainerToBeValidated(orientation: SlicerOrientation, builder: TestBuilder): JQuery {\r\n        let containerToBeValidated: JQuery;\r\n        if (isVerticalOrientation(orientation)) {\r\n            containerToBeValidated = builder.slicerCheckbox;\r\n        }\r\n        else {\r\n            containerToBeValidated = builder.slicerText;\r\n        }\r\n        return containerToBeValidated;\r\n    }\r\n\r\n    function validateCheckedState(expectedChecked: number[], slicerCheckboxInput: JQuery): void {\r\n        let actualChecked: number[] = [];\r\n\r\n        slicerCheckboxInput.each((index: number, element: HTMLInputElement) => {\r\n            if (element.checked)\r\n                actualChecked.push(index);\r\n        });\r\n\r\n        expect(actualChecked).toEqual(expectedChecked);\r\n    }\r\n\r\n    export class TestBuilder {\r\n        public visual: powerbi.IVisual;\r\n        public hostServices: powerbi.IVisualHostServices;\r\n        public field = powerbi.data.SQExprBuilder.fieldDef({\r\n            schema: 's',\r\n            entity: \"Entity2\",\r\n            column: \"PropertyName\"\r\n        });\r\n        public dataViewMetadata: powerbi.DataViewMetadata = buildDefaultDataViewMetadata();\r\n        public dataViewCategorical: powerbi.DataViewCategorical = buildDefaultDataViewCategorical(this.field);\r\n        public dataView: powerbi.DataView = buildDefaultDataView(this.field);\r\n        public interactiveDataViewOptions: powerbi.VisualDataChangedOptions = {\r\n            dataViews: [this.dataView]\r\n        };\r\n        public interactiveImageDataViewOptions: powerbi.VisualDataChangedOptions = {\r\n            dataViews: [buildImageDataView(this.field)]\r\n        };\r\n        \r\n        public slicerText: JQuery;\r\n        public slicerCheckbox: JQuery;\r\n        public slicerCheckboxInput: JQuery;\r\n        private originalRequestAnimationFrameCallback: (callback: Function) => number;\r\n\r\n        constructor(orientation: SlicerOrientation, height: number = 200, width: number = 300) {\r\n            let element = helpers.testDom(height.toString(), width.toString(), 'visual');\r\n            this.hostServices = createHostServices();\r\n            let dataView = this.dataView;\r\n            dataView.metadata.objects = buildDefaultDataViewObjects(orientation);\r\n\r\n            let slicerRenderOptions: RenderSlicerOptions = {\r\n                visualType: SlicerVisual,\r\n                hostServices: this.hostServices,\r\n                dataView: dataView,\r\n                dataViewObjects: dataView.metadata.objects,\r\n                orientation: orientation,\r\n            };\r\n\r\n            this.visual = initSlicer(element, slicerRenderOptions, this.field);\r\n\r\n            this.originalRequestAnimationFrameCallback = window.requestAnimationFrame;\r\n            window.requestAnimationFrame = (callback: () => void) => {\r\n                callback();\r\n                return 0;\r\n            };\r\n\r\n            jasmine.clock().install();\r\n\r\n            helpers.fireOnDataChanged(this.visual, this.interactiveDataViewOptions);\r\n            this.initializeHelperElements();\r\n\r\n            spyOn(this.hostServices, \"onSelect\").and.callThrough();\r\n        }\r\n\r\n        public destroy(): void {\r\n            window.requestAnimationFrame = this.originalRequestAnimationFrameCallback;\r\n            jasmine.clock().uninstall();\r\n        }\r\n\r\n        public initializeHelperElements(): void {\r\n            this.slicerText = $(\".slicerText\");\r\n            this.slicerCheckbox = $(\".slicerCheckbox\");\r\n            this.slicerCheckboxInput = $(\".slicerCheckbox\").find(\"input\");\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}