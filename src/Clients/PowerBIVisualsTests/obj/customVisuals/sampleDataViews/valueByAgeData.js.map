{"version":3,"sources":["customVisuals/sampleDataViews/valueByAgeData.ts"],"names":["powerbitests","powerbitests.customVisuals","powerbitests.customVisuals.sampleDataViews","powerbitests.customVisuals.sampleDataViews.ValueByAgeData","powerbitests.customVisuals.sampleDataViews.ValueByAgeData.constructor","powerbitests.customVisuals.sampleDataViews.ValueByAgeData.getDataView"],"mappings":"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","file":"customVisuals/sampleDataViews/valueByAgeData.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests.customVisuals.sampleDataViews {\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n\r\n    export class ValueByAgeData {\r\n\r\n        public getDataView(): powerbi.DataView {\r\n            let ages = [10, 11, 12, 15, 16, 20, 21, 25, 26, 27, 28, 29, 30, 31, 40, 50, 60];\r\n\r\n            let frequency = [7, 6, 10, 4, 3, 3, 3, 6, 10, 4, 1, 7, 9, 2, 9, 4, 5];       \r\n        \r\n            let fieldExpr = powerbi.data.SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"table1\", name: \"age\" } });\r\n\r\n            let identities = ages.map(function (value) {\r\n                let expr = powerbi.data.SQExprBuilder.equal(fieldExpr, powerbi.data.SQExprBuilder.decimal(value));\r\n                return powerbi.data.createDataViewScopeIdentity(expr);\r\n            });\r\n\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: 'Age',\r\n                        queryName: 'table1.Age',\r\n                        isMeasure: true,\r\n                        type: powerbi.ValueType.fromDescriptor({ numeric: true }),\r\n                    },\r\n                    {\r\n                        displayName: 'Value',\r\n                        isMeasure: true,\r\n                        queryName: 'Sum(table1.Value)',\r\n                        type: powerbi.ValueType.fromDescriptor({ numeric: true })\r\n                    }\r\n                ]\r\n            };\r\n\r\n            let columns = [\r\n                {\r\n                    source: dataViewMetadata.columns[0],\r\n                    values: ages,\r\n                },\r\n                {\r\n                    source: dataViewMetadata.columns[1],\r\n                    values: frequency,\r\n                }\r\n            ];\r\n\r\n            let dataValues: powerbi.DataViewValueColumns = DataViewTransform.createValueColumns([columns[1]]);\r\n            let tableDataValues = helpers.getTableDataValues(ages, columns);\r\n        \r\n            return {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: ages,\r\n                        identity: identities,\r\n                    }],\r\n                    values: dataValues\r\n                },\r\n                table: {\r\n                    rows: tableDataValues,\r\n                    columns: dataViewMetadata.columns,\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}