{"version":3,"sources":["converters/slicerConverterTests.ts"],"names":["powerbitests","powerbitests.allItemsSelectedSlicerTestHelper","powerbitests.applyDataTransform"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAIH,IAAO,YAAY,CAyPlB;AAzPD,WAAO,YAAY,EAAC,CAAC;IACjBA,IAAOA,IAAIA,GAAGA,OAAOA,CAACA,IAAIA,CAACA;IAC3BA,IAAOA,iBAAiBA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA;IAC1DA,IAAOA,aAAaA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,aAAaA,CAACA;IAElDA,QAAQA,CAACA,iBAAiBA,EAAEA;QACxBA,IAAIA,KAAKA,GAAGA,aAAaA,CAACA,QAAQA,CAACA;YAC/BA,MAAMA,EAAEA,GAAGA;YACXA,MAAMA,EAAEA,SAASA;YACjBA,MAAMA,EAAEA,cAAcA;SACzBA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2CAA2CA,EAAEA;YAC5CA,IAAIA,YAAYA,GAAGA,yBAAYA,CAACA,kBAAkBA,EAAEA,CAACA;YACrDA,IAAIA,oBAAoBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,0BAA0BA,CAACA,YAAYA,CAACA,CAACA;YACpFA,IAAIA,cAAcA,GAAwBA,IAAIA,CAACA,cAAcA,CAACA,UAAUA,CACpEA,aAAaA,CAACA,EAAEA,CACZA,aAAaA,CAACA,OAAOA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,KAAKA,EAAEA,KAAKA,EAAEA,aAAaA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA,EAClGA,aAAaA,CAACA,OAAOA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,KAAKA,EAAEA,KAAKA,EAAEA,aAAaA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC7GA,IAAIA,QAAQA,GAAGA,kBAAkBA,CAACA,yBAAYA,CAACA,oBAAoBA,CAACA,KAAKA,CAACA,EAAEA,cAAcA,CAACA,CAACA;YAC5FA,IAAIA,UAAUA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,OAAOA,CAACA,QAAQA,CAACA,CAACA,CAACA,EAAEA,yBAAYA,CAACA,gBAAgBA,EAAEA,oBAAoBA,EAAEA,YAAYA,CAACA,CAACA;YACxIA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACnDA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;YAC7DA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YAC9DA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YAC5DA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YAC9DA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;YAC9DA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA;YACtEA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA;YACtEA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YAC3DA,MAAMA,CAACA,UAAUA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;QAC/DA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2DAA2DA,EAAEA;YAC5DA,IAAIA,YAAYA,GAAGA,yBAAY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","file":"converters/slicerConverterTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import data = powerbi.data;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n\r\n    describe('SlicerConverter', () => {\r\n        let field = SQExprBuilder.fieldDef({\r\n            schema: 's',\r\n            entity: \"Entity2\",\r\n            column: \"PropertyName\"\r\n        });\r\n\r\n        it(\"retained values doesn't exist in dataView\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            let semanticFilter: data.SemanticFilter = data.SemanticFilter.fromSQExpr(\r\n                SQExprBuilder.or(\r\n                    SQExprBuilder.compare(data.QueryComparisonKind.Equal, field, SQExprBuilder.text('retainedValue1')),\r\n                    SQExprBuilder.compare(data.QueryComparisonKind.Equal, field, SQExprBuilder.text('retainedValue2'))));\r\n            let dataView = applyDataTransform(slicerHelper.buildDefaultDataView(field), semanticFilter);\r\n            let slicerData = powerbi.visuals.DataConversion.convert(dataView[0], slicerHelper.SelectAllTextKey, interactivityService, hostServices);\r\n            expect(slicerData.slicerDataPoints.length).toBe(7);\r\n            expect(slicerData.slicerDataPoints[0].tooltip).toBe('Apple');\r\n            expect(slicerData.slicerDataPoints[1].tooltip).toBe('Orange');\r\n            expect(slicerData.slicerDataPoints[2].tooltip).toBe('Kiwi');\r\n            expect(slicerData.slicerDataPoints[3].tooltip).toBe('Grapes');\r\n            expect(slicerData.slicerDataPoints[4].tooltip).toBe('Banana');\r\n            expect(slicerData.slicerDataPoints[5].tooltip).toBe('retainedValue1');\r\n            expect(slicerData.slicerDataPoints[6].tooltip).toBe('retainedValue2');\r\n            expect(slicerData.slicerDataPoints[5].selected).toBe(true);\r\n            expect(slicerData.slicerDataPoints[6].selected).toBe(true);\r\n        });\r\n\r\n        it(\"one retained value exists in dataView, the other does not\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            let semanticFilter: data.SemanticFilter = data.SemanticFilter.fromSQExpr(\r\n                SQExprBuilder.or(\r\n                    SQExprBuilder.compare(data.QueryComparisonKind.Equal, field, SQExprBuilder.text('Grapes')),\r\n                    SQExprBuilder.compare(data.QueryComparisonKind.Equal, field, SQExprBuilder.text('retainedValue'))));\r\n            let dataView = applyDataTransform(slicerHelper.buildDefaultDataView(field), semanticFilter);\r\n            let spyOnGetLabelForScopeId = <any>spyOn(hostServices, \"getIdentityDisplayNames\").and.callThrough();\r\n            let spyOnSetLabelForScopeId = <any>spyOn(hostServices, \"setIdentityDisplayNames\").and.callThrough();\r\n            let slicerData = powerbi.visuals.DataConversion.convert(dataView[0], slicerHelper.SelectAllTextKey, interactivityService, hostServices);\r\n            expect(slicerData.slicerDataPoints.length).toBe(6);\r\n            expect(slicerData.slicerDataPoints[0].tooltip).toBe('Apple');\r\n            expect(slicerData.slicerDataPoints[1].tooltip).toBe('Orange');\r\n            expect(slicerData.slicerDataPoints[2].tooltip).toBe('Kiwi');\r\n            expect(slicerData.slicerDataPoints[3].tooltip).toBe('Grapes');\r\n            expect(slicerData.slicerDataPoints[4].tooltip).toBe('Banana');\r\n            expect(slicerData.slicerDataPoints[5].tooltip).toBe('retainedValue');\r\n            expect(slicerData.slicerDataPoints[5].selected).toBe(true);\r\n            expect(slicerData.slicerDataPoints[3].selected).toBe(true);\r\n            // Need to call host service to retrive the retainedValue, so the spyOnGetLabelForScopeId call count should be 1.\r\n            expect((<jasmine.Spy>spyOnGetLabelForScopeId).calls.count()).toBe(1);\r\n            expect((<jasmine.Spy>spyOnSetLabelForScopeId).calls.count()).toBe(1);\r\n        });\r\n\r\n        it(\"is not in filter\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            let semanticFilter: data.SemanticFilter = data.SemanticFilter.fromSQExpr(\r\n                SQExprBuilder.not(\r\n                    SQExprBuilder.inExpr(\r\n                        [field],\r\n                        [\r\n                            [SQExprBuilder.text('Apple')],\r\n                            [SQExprBuilder.text('Banana')],\r\n                        ])));\r\n            let dataView = applyDataTransform(slicerHelper.buildDefaultDataView(field), semanticFilter);\r\n            let spyOnGetLabelForScopeId = <any>spyOn(hostServices, \"getIdentityDisplayNames\").and.callThrough();\r\n            let spyOnSetLabelForScopeId = <any>spyOn(hostServices, \"setIdentityDisplayNames\").and.callThrough();\r\n            let slicerData = powerbi.visuals.DataConversion.convert(dataView[0], slicerHelper.SelectAllTextKey, interactivityService, hostServices);\r\n            expect(slicerData.slicerDataPoints.length).toBe(5);\r\n            expect(slicerData.slicerDataPoints[0].tooltip).toBe('Apple');\r\n            expect(slicerData.slicerDataPoints[1].tooltip).toBe('Orange');\r\n            expect(slicerData.slicerDataPoints[2].tooltip).toBe('Kiwi');\r\n            expect(slicerData.slicerDataPoints[3].tooltip).toBe('Grapes');\r\n            expect(slicerData.slicerDataPoints[4].tooltip).toBe('Banana');\r\n            expect(slicerData.slicerDataPoints[0].selected).toBe(true);\r\n            expect(slicerData.slicerDataPoints[4].selected).toBe(true);\r\n            // All the selected items can be found in the dataView, so the spyOnGetLabelForScopeId call count should be 0.\r\n            expect((<jasmine.Spy>spyOnGetLabelForScopeId).calls.count()).toBe(0);\r\n            expect((<jasmine.Spy>spyOnSetLabelForScopeId).calls.count()).toBe(1);\r\n        });\r\n\r\n        it(\"all filter values selected with selectAllCheckbox disabled\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            allItemsSelectedSlicerTestHelper(interactivityService, hostServices, false, false, false);\r\n            expect(interactivityService.isSelectionModeInverted()).toBe(false);\r\n        });\r\n\r\n        it(\"all filter values selected with selectAllCheckbox enabled\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            allItemsSelectedSlicerTestHelper(interactivityService, hostServices, true, false, false);\r\n            expect(interactivityService.isSelectionModeInverted()).toBe(true);\r\n        });\r\n\r\n        it(\"NotFilter - all filter values selected with selectAllCheckbox enabled\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            allItemsSelectedSlicerTestHelper(interactivityService, hostServices, true, false, true);\r\n            expect(interactivityService.isSelectionModeInverted()).toBe(false);\r\n        });\r\n\r\n        it(\"NotFilter - all filter values selected with selectAllCheckbox disabled\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            allItemsSelectedSlicerTestHelper(interactivityService, hostServices, false, false, true);\r\n            expect(interactivityService.isSelectionModeInverted()).toBe(true);\r\n        });\r\n\r\n        it(\"calling host to get display label\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            let semanticFilter: data.SemanticFilter = data.SemanticFilter.fromSQExpr(\r\n                SQExprBuilder.or(\r\n                    SQExprBuilder.compare(data.QueryComparisonKind.Equal, field, SQExprBuilder.text('Grapes')),\r\n                    SQExprBuilder.compare(data.QueryComparisonKind.Equal, field, SQExprBuilder.text('retainedValue'))));\r\n            let dataView = applyDataTransform(slicerHelper.buildDefaultDataView(field), semanticFilter);\r\n            let spyOnGetLabelForScopeId = <any> spyOn(hostServices, \"getIdentityDisplayNames\").and.callThrough();\r\n            let spyOnSetLabelForScopeId = <any> spyOn(hostServices, \"setIdentityDisplayNames\").and.callThrough();\r\n            let slicerData = powerbi.visuals.DataConversion.convert(dataView[0], slicerHelper.SelectAllTextKey, interactivityService, hostServices);\r\n            expect((<jasmine.Spy> spyOnGetLabelForScopeId).calls.count()).toBe(1);\r\n            expect((<jasmine.Spy> spyOnSetLabelForScopeId).calls.count()).toBe(1);\r\n        });\r\n\r\n\r\n        it(\"isInvertedSelectionMode persisted for undefined filter\", () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            interactivityService.setSelectionModeInverted(true);\r\n            let dataView = applyDataTransform(slicerHelper.buildDefaultDataView(field), undefined);\r\n            let spyOnGetLabelForScopeId = spyOn(hostServices, \"getIdentityDisplayNames\").and.callThrough();\r\n            let spyOnSetLabelForScopeId = spyOn(hostServices, \"setIdentityDisplayNames\").and.callThrough();\r\n            powerbi.visuals.DataConversion.convert(dataView[0], slicerHelper.SelectAllTextKey, interactivityService, hostServices);\r\n            expect(interactivityService.isSelectionModeInverted()).toBe(true);\r\n        });\r\n\r\n        function allItemsSelectedSlicerTestHelper(\r\n            interactivityService: powerbi.visuals.IInteractivityService,\r\n            hostServices: powerbi.IVisualHostServices,\r\n            selectAllEnabled: boolean,\r\n            singleSelectEnabled: boolean,\r\n            isNotFilter: boolean): void {\r\n            let inExpr = SQExprBuilder.inExpr(\r\n                [field],\r\n                [\r\n                    [SQExprBuilder.text('Apple')],\r\n                    [SQExprBuilder.text('Orange')],\r\n                    [SQExprBuilder.text('Kiwi')],\r\n                    [SQExprBuilder.text('Grapes')],\r\n                    [SQExprBuilder.text('Banana')],\r\n                ]);\r\n            let semanticFilter: data.SemanticFilter = isNotFilter ? data.SemanticFilter.fromSQExpr(SQExprBuilder.not(inExpr)) : data.SemanticFilter.fromSQExpr(inExpr);\r\n\r\n            let dataView = applyDataTransform(slicerHelper.buildDefaultDataView(field), semanticFilter);\r\n            dataView[0].metadata.objects[\"selection\"] = { selectAllCheckboxEnabled: selectAllEnabled, singleSelect: singleSelectEnabled };\r\n            let slicerData = powerbi.visuals.DataConversion.convert(dataView[0], slicerHelper.SelectAllTextKey, interactivityService, hostServices);\r\n\r\n            if (selectAllEnabled) {\r\n                expect(slicerData.slicerDataPoints[0].tooltip).toBe('Select All');\r\n                expect(slicerData.slicerDataPoints[0].isSelectAllDataPoint).toBe(true);\r\n                expect(slicerData.slicerDataPoints[0].selected).toBe(!isNotFilter);\r\n            }\r\n\r\n            let index: number = selectAllEnabled ? 0 : -1;\r\n            expect(slicerData.slicerDataPoints[index + 1].tooltip).toBe('Apple');\r\n            expect(slicerData.slicerDataPoints[index + 2].tooltip).toBe('Orange');\r\n            expect(slicerData.slicerDataPoints[index + 3].tooltip).toBe('Kiwi');\r\n            expect(slicerData.slicerDataPoints[index + 4].tooltip).toBe('Grapes');\r\n            expect(slicerData.slicerDataPoints[index + 5].tooltip).toBe('Banana');\r\n\r\n            let selected = selectAllEnabled ? false : true;\r\n            expect(slicerData.slicerDataPoints[index + 1].selected).toBe(selected);\r\n            expect(slicerData.slicerDataPoints[index + 2].selected).toBe(selected);\r\n            expect(slicerData.slicerDataPoints[index + 3].selected).toBe(selected);\r\n            expect(slicerData.slicerDataPoints[index + 4].selected).toBe(selected);\r\n            expect(slicerData.slicerDataPoints[index + 5].selected).toBe(selected);\r\n        }\r\n\r\n        it('slicer convert boolean values', () => {\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            let descriptor: powerbi.ValueTypeDescriptor = { bool: true };\r\n            let dataView = applyDataTransform(slicerHelper.buildBooleanValuesDataView(field), undefined, descriptor);\r\n            let slicerData = powerbi.visuals.DataConversion.convert(dataView[0], slicerHelper.SelectAllTextKey, interactivityService, hostServices);\r\n            expect(slicerData.slicerDataPoints.length).toBe(3);\r\n            expect(slicerData.slicerDataPoints[0].value).toBe('True');\r\n            expect(slicerData.slicerDataPoints[1].value).toBe('False');\r\n            expect(slicerData.slicerDataPoints[2].value).toBe('False');\r\n            expect(slicerData.slicerDataPoints[0].count).toBeUndefined();\r\n            expect(slicerData.slicerDataPoints[1].count).toBe(3);\r\n            expect(slicerData.slicerDataPoints[2].count).toBe(4);\r\n        });\r\n\r\n        it('slicer convert dataview contains blank value', () => {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = slicerHelper.buildDefaultDataViewMetadata();\r\n            let dataViewCategoricalWithUndefinedValue: powerbi.DataViewCategorical = slicerHelper.buildDefaultDataViewCategorical(field, true);\r\n            let dataView: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: dataViewCategoricalWithUndefinedValue\r\n            };\r\n\r\n            let hostServices = slicerHelper.createHostServices();\r\n            let interactivityService = powerbi.visuals.createInteractivityService(hostServices);\r\n            let descriptor: powerbi.ValueTypeDescriptor = { bool: true };\r\n            let dataViews = applyDataTransform(dataView, undefined, descriptor);\r\n            let slicerData = powerbi.visuals.DataConversion.convert(dataViews[0], slicerHelper.SelectAllTextKey, interactivityService, hostServices);\r\n            expect(slicerData.slicerDataPoints.length).toBe(6);\r\n            expect(slicerData.slicerDataPoints[5].value).toBe('(Blank)');\r\n            expect(slicerData.slicerDataPoints[5].count).toBe(1);\r\n        });\r\n\r\n        function applyDataTransform(dataView: powerbi.DataView, semanticFilter: data.SemanticFilter, descriptor?: powerbi.ValueTypeDescriptor): powerbi.DataView[]{\r\n            if (descriptor == null)\r\n                descriptor = { text: true };\r\n\r\n            let transforms: data.DataViewTransformActions = {\r\n                selects: [\r\n                    {\r\n                        type: powerbi.ValueType.fromDescriptor(descriptor),\r\n                        roles: { 'Category': true },\r\n                        queryName: 'queryName',\r\n                    }\r\n                ],\r\n            };\r\n\r\n            if (semanticFilter != null) {\r\n                transforms.objects = {\r\n                    general: [{ properties: { filter: semanticFilter } }],\r\n                };\r\n            }\r\n\r\n            return DataViewTransform.apply({\r\n                prototype: dataView,\r\n                objectDescriptors: {\r\n                    general: powerbi.visuals.slicerCapabilities.objects.general,\r\n                    selection: powerbi.visuals.slicerCapabilities.objects['selection'],\r\n                },\r\n                transforms: transforms,\r\n                colorAllocatorFactory: powerbi.visuals.createColorAllocatorFactory(),\r\n                dataViewMappings: powerbi.visuals.capabilities.slicer.dataViewMappings,\r\n                dataRoles: [{ name: 'queryName', kind: powerbi.VisualDataRoleKind.Grouping}],\r\n            });\r\n        }\r\n    });\r\n}"],"sourceRoot":"/source/"}