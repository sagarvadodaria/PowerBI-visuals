{"version":3,"sources":["visuals/common/converterHelperTests.ts"],"names":["powerbitests","powerbitests.validateEmptyCategoryInfo","powerbitests.formatStringProp","powerbitests.DataViewBuilder","powerbitests.DataViewBuilder.constructor","powerbitests.DataViewBuilder.roles","powerbitests.DataViewBuilder.createCategoryIdentities","powerbitests.DataViewBuilder.createMetadata","powerbitests.DataViewBuilder.buildWithUpdateRoles","powerbitests.DataViewBuilder.build"],"mappings":"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","file":"visuals/common/converterHelperTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import converterHelper = powerbi.visuals.converterHelper;\r\n\r\n    describe(\"converterHelper tests\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n        let dataView: powerbi.DataViewCategorical;\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder([\"a\", \"b\"], [100, 200]);\r\n            dataView = dataViewBuilder.build();\r\n        });\r\n\r\n        it(\"categoryIsAlsoSeriesRole default\", () => {\r\n            expect(converterHelper.categoryIsAlsoSeriesRole(dataView, \"Series\", \"Category\")).toBeFalsy();\r\n\r\n            // Only a \"Series\" role prevents us from using the Default strategy\r\n            dataViewBuilder.buildWithUpdateRoles({ \"Category\": true });\r\n            expect(converterHelper.categoryIsAlsoSeriesRole(dataView, \"Series\", \"Category\")).toBeFalsy();\r\n\r\n            dataView = dataViewBuilder.buildWithUpdateRoles({ \"E === mc^2\": true });\r\n            expect(converterHelper.categoryIsAlsoSeriesRole(dataView, \"Series\", \"Category\")).toBeFalsy();\r\n        });\r\n\r\n        it(\"categoryIsAlsoSeriesRole series and category\", () => {\r\n            dataView = dataViewBuilder.buildWithUpdateRoles({ \"Series\": true, \"Category\": true });\r\n            expect(converterHelper.categoryIsAlsoSeriesRole(dataView, \"Series\", \"Category\")).toBe(true);\r\n\r\n            dataView = dataViewBuilder.buildWithUpdateRoles({ \"Series\": true, \"F === ma\": true, \"Category\": true });\r\n            expect(converterHelper.categoryIsAlsoSeriesRole(dataView, \"Series\", \"Category\")).toBe(true);\r\n        });\r\n\r\n        it(\"getPivotedCategories default\", () => {\r\n            let categoryInfo = converterHelper.getPivotedCategories(dataView, formatStringProp());\r\n\r\n            // Note: Since the result includes a function property we can\"t perform a toEqual directly on the result, so check each part individually.\r\n            expect(categoryInfo.categories).toEqual([\"a\", \"b\"]);\r\n            expect(categoryInfo.categoryIdentities).toEqual([dataView.categories[0].identity[0], dataView.categories[0].identity[1]]);\r\n        });\r\n\r\n        it(\"getPivotedCategories empty categories\", () => {\r\n            // Empty the categories array\r\n            dataView.categories = [];\r\n\r\n            let categoryInfo = converterHelper.getPivotedCategories(dataView, formatStringProp());\r\n            validateEmptyCategoryInfo(categoryInfo);\r\n        });\r\n\r\n        it(\"getPivotedCategories empty category values\", () => {\r\n            // Empty the category values array\r\n            dataView.categories[0].values = [];\r\n\r\n            let categoryInfo = converterHelper.getPivotedCategories(dataView, formatStringProp());\r\n            expect(categoryInfo.categories).toEqual([]);\r\n            expect(categoryInfo.categoryIdentities).toBeUndefined();\r\n        });\r\n\r\n        it('isWebUrlColumn', () => {\r\n            let webUrlColumnMetadata: powerbi.DataViewMetadataColumn = {\r\n                displayName: \"webUrl\",\r\n                type: new powerbi.ValueType(powerbi.ExtendedType.WebUrl, \"WebUrl\")\r\n            };\r\n\r\n            converterHelper.isWebUrlColumn(webUrlColumnMetadata);\r\n        });\r\n\r\n        it('isImageUrlColumn', () => {\r\n            let imageColumnMetadata: powerbi.DataViewMetadataColumn = {\r\n                displayName: \"imageUrl\",\r\n                type: new powerbi.ValueType(powerbi.ExtendedType.ImageUrl, \"ImageUrl\")\r\n            };\r\n\r\n            converterHelper.isImageUrlColumn(imageColumnMetadata);\r\n        });\r\n\r\n        function validateEmptyCategoryInfo(categoryInfo: powerbi.visuals.PivotedCategoryInfo): void {\r\n            // Note: Since the result includes a function property we can\"t perform a toEqual directly on the result, so check each part individually.\r\n            expect(categoryInfo.categories).toEqual([null]);\r\n            expect(categoryInfo.categoryIdentities).toBeUndefined();\r\n        }\r\n\r\n        function formatStringProp(): powerbi.DataViewObjectPropertyIdentifier {\r\n            return { objectName: \"general\", propertyName: \"formatString\" };\r\n        }\r\n    });\r\n\r\n    class DataViewBuilder {\r\n        private _roles: any;\r\n\r\n        public get roles(): any {\r\n            return this._roles;\r\n        }\r\n\r\n        public set roles(value) {\r\n            this._roles = value;\r\n            this.createMetadata();\r\n        }\r\n\r\n        private categoriesValues: any[];\r\n\r\n        private metadata: powerbi.DataViewMetadata;\r\n\r\n        private categoryIdentities: powerbi.DataViewScopeIdentity[];\r\n\r\n        private values: any[];\r\n\r\n        constructor(categoriesValues: any[], values: any[], roles: any = {}) {\r\n            this.categoriesValues = categoriesValues;\r\n            this.values = values;\r\n            this.roles = roles;\r\n\r\n            this.createMetadata();\r\n            this.createCategoryIdentities();\r\n        }\r\n\r\n        private createCategoryIdentities() {\r\n            let categoryIdentities: any[] = [];\r\n\r\n            for (let i = 0; i < this.categoriesValues.length; i++) {\r\n                categoryIdentities.push(mocks.dataViewScopeIdentity(this.categoriesValues[i]));\r\n            }\r\n\r\n            this.categoryIdentities = categoryIdentities;\r\n        }\r\n\r\n        private createMetadata() {\r\n            this.metadata = {\r\n                columns: [\r\n                    { displayName: \"col1\", roles: this.roles },\r\n                    { displayName: \"col2\", isMeasure: true, roles: { \"Y\": true } }\r\n                ]\r\n            };\r\n        }\r\n\r\n        public buildWithUpdateRoles(roles): powerbi.DataViewCategorical {\r\n            this.roles = roles;\r\n            return this.build();\r\n        }\r\n\r\n        public build(): powerbi.DataViewCategorical {\r\n            return {\r\n                categories: [{\r\n                    source: this.metadata.columns[0],\r\n                    values: this.categoriesValues,\r\n                    identity: this.categoryIdentities\r\n                }],\r\n                values: powerbi.data.DataViewTransform.createValueColumns([\r\n                    {\r\n                        source: this.metadata.columns[1],\r\n                        values: this.values\r\n                    }])\r\n            };\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}