{"version":3,"sources":["visuals/common/selectionManagerTests.ts"],"names":["powerbitests"],"mappings":"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AiBA,EAAEA,CAACA;YAEzBA,MAAMA,CAACA,EAAEA,CAACA,eAAeA,EAAEA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAE5CA,EAAEA,CAACA,MAAMA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,UAACA,GAAGA;gBAC5BA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC3BA,gBAAgBA,CAACA,qBAAqBA,GAAGA,cAAMA,OAAAA,IAAIA,EAAJA,CAAIA,CAACA;gBACpDA,EAAEA,CAACA,MAAMA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,UAACA,GAAGA;oBAC5BA,MAAMA,CAACA,GAAGA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC3BA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,CAACA,CAACA;YACPA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;IACPA,CAACA,CAACA,CAACA;AACPA,CAACA,EArJM,YAAY,KAAZ,YAAY,QAqJlB","file":"visuals/common/selectionManagerTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import SelectionIdBuilder = powerbi.visuals.SelectionIdBuilder;\r\n    import SelectionManager = powerbi.visuals.utility.SelectionManager;\r\n\r\n    describe(\"Selection Manager tests\", () => {\r\n        let categoryA = mocks.dataViewScopeIdentity(\"A\");\r\n        let categoryQueryName = \"categoryA\";\r\n        let categoryColumn: powerbi.DataViewCategoryColumn = {\r\n            source: {\r\n                queryName: categoryQueryName,\r\n                displayName: 'testDisplayName'\r\n            },\r\n            identity: [categoryA],\r\n            values: []\r\n        };\r\n\r\n        it(\"single select - select one\", (done) => {\r\n            let sm = new SelectionManager({ hostServices: powerbitests.mocks.createVisualHostServices() });\r\n            let selectionId = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .createSelectionId();\r\n\r\n            expect(sm.getSelectionIds().length).toBe(0);\r\n\r\n            sm.select(selectionId).then((ids) => {\r\n                expect(ids.length).toBe(1);\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"single select - select one then select the same\", (done) => {\r\n            let sm = new SelectionManager({ hostServices: powerbitests.mocks.createVisualHostServices() });\r\n            let selectionId = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .createSelectionId();\r\n\r\n            expect(sm.getSelectionIds().length).toBe(0);\r\n\r\n            sm.select(selectionId).then((ids) => {\r\n                expect(ids.length).toBe(1);\r\n                sm.select(selectionId).then((ids) => {\r\n                    expect(ids.length).toBe(0);\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n\r\n        it(\"single select - select one, then another\", (done) => {\r\n            let sm = new SelectionManager({ hostServices: powerbitests.mocks.createVisualHostServices() });\r\n            let selectionId1 = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .createSelectionId();\r\n\r\n            let selectionId2 = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 1)\r\n                .createSelectionId();\r\n\r\n            expect(sm.getSelectionIds().length).toBe(0);\r\n\r\n            sm.select(selectionId1).then((ids) => {\r\n                expect(ids.length).toBe(1);\r\n                sm.select(selectionId2).then((ids) => {\r\n                    expect(ids.length).toBe(1);\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n\r\n        it(\"single select - select one, then select the same\", (done) => {\r\n            let sm = new SelectionManager({ hostServices: powerbitests.mocks.createVisualHostServices() });\r\n            let selectionId1 = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .createSelectionId();\r\n\r\n            expect(sm.getSelectionIds().length).toBe(0);\r\n\r\n            sm.select(selectionId1).then((ids) => {\r\n                expect(ids.length).toBe(1);\r\n                sm.select(selectionId1).then((ids) => {\r\n                    expect(ids.length).toBe(0);\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n\r\n        it(\"multi select - select one, then another\", (done) => {\r\n            let sm = new SelectionManager({ hostServices: powerbitests.mocks.createVisualHostServices() });\r\n            let selectionId1 = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .createSelectionId();\r\n\r\n            let selectionId2 = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 1)\r\n                .createSelectionId();\r\n\r\n            expect(sm.getSelectionIds().length).toBe(0);\r\n\r\n            sm.select(selectionId1, true).then((ids) => {\r\n                expect(ids.length).toBe(1);\r\n                sm.select(selectionId2, true).then((ids) => {\r\n                    expect(ids.length).toBe(2);\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n\r\n        it(\"multi select - select one, then another & clear\", (done) => {\r\n            let sm = new SelectionManager({ hostServices: powerbitests.mocks.createVisualHostServices() });\r\n            let selectionId1 = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .createSelectionId();\r\n\r\n            let selectionId2 = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 1)\r\n                .createSelectionId();\r\n\r\n            expect(sm.getSelectionIds().length).toBe(0);\r\n\r\n            sm.select(selectionId1, true).then((ids) => {\r\n                expect(ids.length).toBe(1);\r\n                sm.select(selectionId2, true).then((ids) => {\r\n                    expect(ids.length).toBe(2);\r\n                    sm.clear().then(() => {\r\n                        expect(sm.getSelectionIds().length).toBe(0);\r\n                        done();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n\r\n        it(\"single select - when host in drill down\", (done) => {\r\n            let mockHostServices = powerbitests.mocks.createVisualHostServices();\r\n            let sm = new SelectionManager({ hostServices: mockHostServices });\r\n            let selectionId = SelectionIdBuilder.builder()\r\n                .withCategory(categoryColumn, 0)\r\n                .createSelectionId();\r\n\r\n            expect(sm.getSelectionIds().length).toBe(0);\r\n\r\n            sm.select(selectionId).then((ids) => {\r\n                expect(ids.length).toBe(1);\r\n                mockHostServices.shouldRetainSelection = () => true;\r\n                sm.select(selectionId).then((ids) => {\r\n                    expect(ids.length).toBe(1);\r\n                    done();\r\n                });\r\n            });\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}