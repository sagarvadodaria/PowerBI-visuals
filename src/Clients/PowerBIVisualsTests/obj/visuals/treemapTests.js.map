{"version":3,"sources":["visuals/treemapTests.ts"],"names":["powerbitests","powerbitests.getOptionsForValueWarnings","powerbitests.treemapDomValidation"],"mappings":"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AAIA,CAACA,CAACA,CAACA,CAACA;gBACxCA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,CAACA;gBAClEA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,WAAWA,EAAEA,CAACA;gBAC7DA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,UAAUA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,WAAWA,EAAEA,CAACA;gBAC7DA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;IACPA,CAACA,CAACA,CAACA;IAEHA,8BAA8BA,eAAwBA;QAClDE,IAAIA,CAAkBA,CAACA;QACvBA,IAAIA,OAAeA,CAACA;QACpBA,IAAIA,YAAyCA,CAACA;QAE9CA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;YAClBA,qCAAqCA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,EAAEA,CAACA;QAC/EA,CAACA;QACDA,IAAIA,CAACA,CAACA;YACFA,qCAAqCA,CAACA,OAAOA,GAAGA,SAASA,CAACA;QAC9DA,CAACA;QAEDA,UAAUA,CAACA;YACPA,YAAYA,GAAGA,kBAAKA,CAACA,wBAAwBA,EAAEA,CAACA;YAChDA,OAAOA,GAAGA,YAAYA,CAACA,OAAOA,CAACA,OAAOA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,CAACA;YACrDA,CAACA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,mBAAmBA,CAACA,MAAMA,EAAEA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA,MAAMA,EAAEA,CAACA;YAC/EA,CAACA,CAACA,IAAIA,CAACA;gBACHA,OAAOA,EAAEA,OAAOA;gBAChBA,IAAIA,EAAEA,YAAYA;gBAClBA,KAAKA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA;gBAC5CA,QAAQA,EAAEA;oBACNA,MAAMA,EAAEA,OAAOA,CAACA,MAAMA,EAAEA;oBACxBA,KAAKA,EAAEA,OAAOA,CAACA,KAAKA,EAAEA;iBACzBA;gBACDA,SAASA,EAAEA,EAAEA,mBAAmBA,EAAEA,IAAIA,EAAEA;aAC3CA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,8CAA8CA,EAAEA,UAACA,IAAIA;YACpDA,qCAAqCA,CAACA,OAAOA,GAAGA;gBAC5CA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA;gBACvBA,cAAcA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA;aACjCA,CAACA;YAEFA,IAAIA,kBAAkBA,GAAGA;gBACrBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;oCACtCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,gBAAgBA,CAACA;wCAC7CA,kBAAKA,CAACA,qBAAqBA,CAACA,UAAUA,CAACA;qCAC1CA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YACFA,CAACA,CAACA,aAAaA,CAACA,kBAAkBA,CAACA,CAACA;YAEpCA,IAAIA,YAAYA,GAAGA,qCAAqCA,CAACA,OAAOA,IAAIA,qCAAqCA,CAACA,OAAOA,CAACA,QAAQA,CAACA,CAACA;YAE5HA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,I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AAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;qBACxDA;iBACJA,CAACA,CAACA;YACHA,CAACA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,gBAAgBA,EAAEA,CAACA,CAACA;YAEjDA,IAAIA,YAAYA,GAAGA,qCAAqCA,CAACA,OAAOA,IAAIA,qCAAqCA,CAACA,OAAOA,CAACA,QAAQA,CAACA,CAACA;YAE5HA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBACzEA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACvEA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;oBACfA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC1CA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA;oBACjEA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;oBAC1DA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACrDA,CAACA;gBACDA,CAACA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,gBAAgBA,EAAEA,CAACA,CAACA;gBACjDA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA;oBAC1EA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;oBACvEA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;wBACfA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA;wBACjEA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA;wBAC3DA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;oBACrDA,CAACA;oBACDA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,iFAAiFA,EAAEA,UAACA,IAAIA;YACvFA,IAAIA,oBAAoBA,GAAGA;gBACvBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;oCACtCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;qCACnCA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;iCAClDA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;iCAClDA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;iCAClDA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YACFA,CAACA,CAACA,aAAaA,CAACA,oBAAoBA,CAACA,CAACA;YAEtCA,CAACA,CAACA,UAAUA,CAACA;gBACTA,MAAMA,EAAEA,GAAGA;gBACXA,KAAKA,EAAEA,GAAGA;aACbA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,CAACA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAC1CA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,+CAA+CA,EAAEA,UAACA,IAAIA;YACrDA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,8BAA8BA;wBACxCA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,OAAOA,EAAEA,QAAQA,EAAEA,aAAaA,CAACA;oCAC1CA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;qCACnCA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;iCAC1BA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC5EA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,mDAAmDA,EAAEA,UAACA,IAAIA;YACzDA,KAAKA,CAACA,YAAYA,EAAEA,aAAaA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAErDA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,8BAA8BA;wBACxCA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,OAAOA,EAAEA,QAAQA,EAAEA,aAAaA,CAACA;oCAC1CA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;qCACnCA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,WAAWA,CAACA;iCAClCA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACvEA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,+DAA+DA,EAAEA,UAACA,IAAIA;YACrEA,IAAIA,kBAAkBA,GAAGA;gBACrBA,kBAAKA,CAACA,qBAAqBA,CAACA,OAAOA,CAACA;gBACpCA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;gBACrCA,kBAAKA,CAACA,qBAAqBA,CAACA,aAAaA,CAACA;aAC7CA,CAACA;YACFA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,8BAA8BA;wBACxCA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,OAAOA,EAAEA,QAAQA,EAAEA,aAAaA,CAACA;oCAC1CA,QAAQA,EAAEA,kBAAkBA;oCAC5BA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;oCACvBA,UAAUA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA,EAAEA,CAACA;iCAC3BA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,oDAAoDA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/EA,MAAMA,CAACA,CAACA,CAACA,kDAAkDA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC7EA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC5EA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2EAA2EA,EAAEA,UAACA,IAAIA;YACjFA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,8BAA8BA;wBACxCA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,OAAOA,EAAEA,QAAQA,EAAEA,aAAaA,CAACA;oCAC1CA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;qCACnCA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;oCACvBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;iCAC9BA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,oDAAoDA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/EA,MAAMA,CAACA,CAACA,CAACA,kDAAkDA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC7EA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC5EA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEH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AOA,CAACA,CAACA,CAACA;gCACjDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;6BAC1BA,CAACA,CAACA;qBACVA;iBACJA,CAACA,CAACA;YACHA,IAAIA,gBAAgBA,GAAeA,CAACA;oBAChCA,QAAQA,EAAEA,8BAA8BA;oBACxCA,WAAWA,EAAEA;wBACTA,UAAUA,EAAEA,CAACA;gCACTA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;gCACjDA,MAAMA,EAAEA,CAACA,QAAQA,EAAEA,aAAaA,CAACA;gCACjCA,QAAQA,EAAEA;oCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;oCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;iCACnCA;gCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;6BACtCA,CAACA;wBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;4BACzCA;gCACIA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;gCACjDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;6BACrBA,CAACA,CAACA;qBACVA;iBACJA,CAACA,CAACA;YAEHA,CAACA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,gBAAgBA,EAAEA,CAACA,CAACA;YAEjDA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACvEA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,CAACA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,gBAAgBA,EAAEA,CAACA,CAACA;gBACjDA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;oBACxEA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,kFAAkFA,EAAEA,UAACA,IAAIA;YACxFA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,8BAA8BA;wBACxCA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,OAAOA,EAAEA,QAAQA,EAAEA,aAAaA,CAACA;oCAC1CA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;wCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;qCACnCA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,8BAA8BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACjDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;iCAC1BA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,CAACA,CAACA,UAAUA,CAACA;gBACTA,MAAMA,EAAEA,GAAGA;gBACXA,KAAKA,EAAEA,GAAGA;aACbA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,CAACA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAC1CA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,kDAAkDA,EAAEA,UAACA,IAAIA;YACxDA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,yCAAyCA;wBACnDA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,yCAAyCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCAC5DA,MAAMA,EAAEA,CAACA,sBAAsBA,CAACA;oCAChCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;qCACnCA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,yCAAyCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCAC5DA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;iCAChBA,EAAEA;oCACCA,MAAMA,EAAEA,yCAAyCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCAC5DA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;iCAChBA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,CAACA,CAACA,UAAUA,CAACA;gBACTA,MAAMA,EAAEA,EAAEA;gBACVA,KAAKA,EAAEA,GAAGA;aACbA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,CAACA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,EAAEA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBACzCA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,MAAMA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;oBACnFA,CAACA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,EAAEA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;oBACzCA,UAAUA,CAACA;wBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,MAAMA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;wBACnFA,CAACA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,EAAEA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;wBACzCA,UAAUA,CAACA;4BACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;4BACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;4BAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;4BACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;4BACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,MAAMA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;4BACnFA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;4BACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,MAAMA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;4BACnFA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,MAAMA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;4BAClFA,IAAIA,EAAEA,CAACA;wBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;oBAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;gBAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,iDAAiDA,EAAEA,UAACA,IAAIA;YACvDA,qCAAqCA,CAACA,OAAOA,GAAGA;gBAC5CA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA;gBACvBA,cAAcA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA;aACjCA,CAACA;YACFA,IAAIA,kBAAkBA,GAAoCA;gBACtDA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;gBACrCA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;aACxCA,CAACA;YACFA,IAAIA,gBAAgBA,GAAoCA;gBACpDA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;gBACrCA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;aACxCA,CAACA;YAEFA,IAAIA,oBAAoBA,GAAGA;gBACvBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,QAAQA,EAAEA,QAAQA,CAACA;oCAC5BA,QAAQA,EAAEA,kBAAkBA;oCAC5BA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,IAAIA,CAACA;oCACnBA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;iCAChCA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,GAAGA,CAACA;oCACnBA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;iCAChCA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YACFA,CAACA,CAACA,aAAaA,CAACA,oBAAoBA,CAACA,CAACA;YAEtCA,IAAIA,YAAYA,GAAGA,qCAAqCA,CAACA,OAAOA,IAAIA,qCAAqCA,CAACA,OAAOA,CAACA,QAAQA,CAACA,CAACA;YAE5HA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,4BAA4BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,+BAA+BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,CAACA,CAACA,6BAA6BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACvEA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACvEA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;oBACfA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC1CA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACrDA,CAACA;gBACDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;YAClBA,EAAEA,CAACA,mBAAmBA,EAAEA,UAACA,IAAIA;gBAEzBA,IAAIA,QAAQA,GAAGA;oBACXA,QAAQA,EAAEA,qCAAqCA;oBAC/CA,WAAWA,EAAEA;wBACTA,UAAUA,EAAEA,CAACA;gCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;gCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;gCACtCA,QAAQA,EAAEA;oCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,gBAAgBA,CAACA;oCAC7CA,kBAAKA,CAACA,qBAAqBA,CAACA,UAAUA,CAACA;iCAC1CA;gCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;6BACtCA,CAACA;wBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;4BACzCA;gCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;gCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;gCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;6BAC3EA,EAAEA;gCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;gCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;gCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;6BAC3EA,EAAEA;gCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;gCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;gCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;6BAC3EA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;qBACxDA;iBACJA,CAACA;gBAEFA,iDAAiDA;gBACjDA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,EAAEA,CAACA;gBAE3CA,CAACA,CAACA,aAAaA,CAACA;oBACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;iBACxBA,CAACA,CAACA;gBAEHA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;oBAErCA,wBAAwBA;oBACxBA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,EAAEA,CAACA;oBACvDA,CAACA,CAACA,aAAaA,CAACA;wBACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;qBACxBA,CAACA,CAACA;oBAEHA,UAAUA,CAACA;wBACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;wBAErCA,wBAAwBA;wBACxBA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,OAAOA,EAAEA,EAAEA,CAACA;wBAC1EA,CAACA,CAACA,aAAaA,CAACA;4BACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;yBACxBA,CAACA,CAACA;wBAEHA,UAAUA,CAACA;4BACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;4BAErCA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,WAAWA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,EAAEA,CAACA;4BAC/FA,CAACA,CAACA,aAAaA,CAACA;gCACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;6BACxBA,CAACA,CAACA;4BACHA,UAAUA,CAACA;gCACPA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA,WAAWA,EAAEA,CAACA;gCAE1DA,WAAWA;gCACXA,IAAIA,SAASA,GAAGA,YAAYA,CAACA;gCAC7BA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,OAAOA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,EAAEA,CAACA;gCACjHA,CAACA,CAACA,aAAaA,CAACA;oCACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;iCACxBA,CAACA,CAACA;gCACHA,UAAUA,CAACA;oCAEPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;oCACrCA,MAAMA,CAACA,oBAAOA,CAACA,eAAeA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;oCACnEA,MAAMA,CAACA,oBAAOA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;oCACpEA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;oCAE9DA,aAAaA;oCACbA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,QAAQA,EAAEA,OAAOA,EAAEA,EAAEA,CAACA;oCAC3EA,CAACA,CAACA,aAAaA,CAACA;wCACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;qCACxBA,CAACA,CAACA;oCACHA,UAAUA,CAACA;wCACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,GAAGA,CAACA,SAASA,EAAEA,CAACA;wCACzCA,IAAIA,EAAEA,CAACA;oCACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;gCAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;4BAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;wBAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;oBAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;gBAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,CAACA,CAACA;QACPA,CAACA;IACLA,CAACA;IAAAF,CAACA;IAEFA,QAAQA,CAACA,wBAAwBA,EAAEA,cAAMA,OAAAA,oBAAoBA,CAACA,KAAKA,CAACA,EAA3BA,CAA2BA,CAACA,CAACA;IACtEA,QAAQA,CAACA,sCAAsCA,EAAEA,cAAMA,OAAAA,oBAAoBA,CAACA,IAAIA,CAACA,EAA1BA,CAA0BA,CAACA,CAACA;IAEnFA,QAAQA,CAACA,uBAAuBA,EAACA;QAC7BA,IAAIA,CAAkBA,EAAEA,OAAeA,CAACA;QAExCA,UAAUA,CAACA;YACPA,OAAOA,GAAGA,YAAYA,CAACA,OAAOA,CAACA,OAAOA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,CAACA;YACrDA,CAACA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,mBAAmBA,CAACA,aAAaA,CAACA,EAAEA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA,MAAMA,EAAEA,CAACA;YACxFA,CAACA,CAACA,IAAIA,CAACA;gBACHA,OAAOA,EAAEA,OAAOA;gBAChBA,IAAIA,EAAEA,YAAYA,CAACA,KAAKA,CAACA,wBAAwBA,EAAEA;gBACnDA,KAAKA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA;gBAC5CA,QAAQA,EAAEA;oBACNA,MAAMA,EAAEA,OAAOA,CAACA,MAAMA,EAAEA;oBACxBA,KAAKA,EAAEA,OAAOA,CAACA,KAAKA,EAAEA;iBACzBA;gBACDA,SAASA,EAAEA,EAAEA,mBAAmBA,EAAEA,IAAIA,EAAEA;aAC3CA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6BAA6BA,EAAEA,UAACA,IAAIA;YACnCA,IAAIA,qBAAqBA,GAAGA;gBACxBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;oCACtCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,gBAAgBA,CAACA;wCAC7CA,kBAAKA,CAACA,qBAAqBA,CAACA,UAAUA,CAACA;qCAC1CA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YAEFA,IAAIA,oBAAoBA,GAAGA;gBACvBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;oCACtCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,gBAAgBA,CAACA;wCAC7CA,kBAAKA,CAACA,qBAAqBA,CAACA,UAAUA,CAACA;qCAC1CA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA;oCACpBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCACtBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCACtBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YAEFA,IAAIA,oBAAoBA,GAAGA;gBACvBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;oCACtCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,gBAAgBA,CAACA;wCAC7CA,kBAAKA,CAACA,qBAAqBA,CAACA,UAAUA,CAACA;qCAC1CA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA;oCACpBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCACtBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCACtBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YAEFA,CAACA,CAACA,aAAaA,CAACA,qBAAqBA,CAACA,CAACA;YACvCA,UAAUA,CAACA;gBACPA,IAAIA,OAAOA,GAAGA,CAACA,CAACA,UAAUA,CAACA,CAACA;gBAC5BA,IAAIA,aAAaA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,QAAQA,CAACA,EAAEA,YAAYA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAEjFA,IAAIA,QAAQA,GAAiDA,CAAEA,CAACA,QAAQA,CAACA;gBACzEA,KAAKA,CAACA,QAAQA,EAAEA,SAASA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAE7CA,CAACA,CAACA,aAAaA,CAACA,oBAAoBA,CAACA,CAACA;gBACtCA,CAACA,CAACA,aAAaA,CAACA,oBAAoBA,CAACA,CAACA;gBACtCA,CAACA,CAACA,aAAaA,CAACA,qBAAqBA,CAACA,CAACA;gBAEvCA,MAAMA,CAACA,QAAQA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAC9BA,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBAE5CA,UAAUA,CAACA;oBACPA,IAAIA,GAAGA,GAAGA,CAACA,CAACA,UAAUA,CAACA,CAACA;oBACxBA,MAAMA,CAACA,GAAGA,CAACA,CAACA,SAASA,EAAEA,CAACA;oBAExBA,MAAMA,CAACA,GAAGA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;oBAC/CA,MAAMA,CAACA,GAAGA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;oBAE7CA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,kDAAkDA,EAAEA,UAACA,IAAIA;YACxDA,IAAIA,qBAAqBA,GAAGA;gBACxBA,kBAAkBA,EAAEA,IAAIA;gBACxBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;oCACtCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,gBAAgBA,CAACA;wCAC7CA,kBAAKA,CAACA,qBAAqBA,CAACA,UAAUA,CAACA;qCAC1CA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YAEFA,IAAIA,oBAAoBA,GAAGA;gBACvBA,kBAAkBA,EAAEA,IAAIA;gBACxBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;oCACtCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,gBAAgBA,CAACA;wCAC7CA,kBAAKA,CAACA,qBAAqBA,CAACA,UAAUA,CAACA;qCAC1CA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA;oCACpBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCACtBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCACtBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YAEFA,IAAIA,oBAAoBA,GAAGA;gBACvBA,kBAAkBA,EAAEA,IAAIA;gBACxBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,gBAAgBA,EAAEA,UAAUA,CAACA;oCACtCA,QAAQA,EAAEA;wCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,gBAAgBA,CAACA;wCAC7CA,kBAAKA,CAACA,qBAAqBA,CAACA,UAAUA,CAACA;qCAC1CA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA;oCACpBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCACtBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCACtBA,QAAQA,EAAEA,IAAIA,CAACA,2BAA2BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;iCAC3EA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YAEFA,CAACA,CAACA,aAAaA,CAACA,qBAAqBA,CAACA,CAACA;YACvCA,UAAUA,CAACA;gBACPA,IAAIA,OAAOA,GAAGA,CAACA,CAACA,UAAUA,CAACA,CAACA;gBAC5BA,IAAIA,aAAaA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,QAAQA,CAACA,EAAEA,YAAYA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAEjFA,IAAIA,QAAQA,GAAiDA,CAAEA,CAACA,QAAQA,CAACA;gBACzEA,KAAKA,CAACA,QAAQA,EAAEA,SAASA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAE7CA,CAACA,CAACA,aAAaA,CAACA,oBAAoBA,CAACA,CAACA;gBACtCA,CAACA,CAACA,aAAaA,CAACA,oBAAoBA,CAACA,CAACA;gBACtCA,CAACA,CAACA,aAAaA,CAACA,qBAAqBA,CAACA,CAACA;gBAEvCA,MAAMA,CAACA,QAAQA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAC9BA,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,GAAGA,CAACA,gBAAgBA,EAAEA,CAACA;gBAEhDA,UAAUA,CAACA;oBACPA,IAAIA,GAAGA,GAAGA,CAACA,CAACA,UAAUA,CAACA,CAACA;oBACxBA,MAAMA,CAACA,GAAGA,CAACA,CAACA,SAASA,EAAEA,CAACA;oBAExBA,MAAMA,CAACA,GAAGA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;oBAC/CA,MAAMA,CAACA,GAAGA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;oBAE7CA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;IACPA,CAACA,CAACA,CAACA;IAEHA,QAAQA,CAACA,uBAAuBA,EAACA;QAC7BA,IAAIA,CAAkBA,EAAEA,OAAeA,CAACA;QACxCA,IAAIA,YAAyCA,CAACA;QAC9CA,IAAIA,cAAcA,GAAGA,EAAEA,CAACA;QACxBA,IAAIA,aAAaA,GAAGA,OAAOA,CAACA,kBAAkBA,CAACA,QAAQA,EAAEA,CAACA;QAE1DA,UAAUA,CAACA;YACPA,OAAOA,GAAGA,YAAYA,CAACA,OAAOA,CAACA,OAAOA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,CAACA;YACrDA,YAAYA,GAAGA,kBAAKA,CAACA,wBAAwBA,EAAEA,CAACA;YAChDA,CAACA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,mBAAmBA,CAACA,aAAaA,CAACA,EAAEA,mBAAmBA,EAAEA,KAAKA,EAAEA,OAAOA,EAAEA,KAAKA,GAAEA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA,MAAMA,EAAEA,CAACA;YACpIA,CAACA,CAACA,IAAIA,CAACA;gBACHA,OAAOA,EAAEA,OAAOA;gBAChBA,IAAIA,EAAEA,YAAYA;gBAClBA,KAAKA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA;gBAC5CA,QAAQA,EAAEA;oBACNA,MAAMA,EAAEA,OAAOA,CAACA,MAAMA,EAAEA;oBACxBA,KAAKA,EAAEA,OAAOA,CAACA,KAAKA,EAAEA;iBACzBA;gBACDA,SAASA,EAAEA,EAAEA,mBAAmBA,EAAEA,IAAIA,EAAEA;gBACxCA,aAAaA,EAAEA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;aACrCA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,+CAA+CA,EAAEA,UAACA,IAAIA;YACrDA,IAAIA,kBAAkBA,GAAoCA;gBACtDA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;aACnCA,CAACA;YACFA,IAAIA,gBAAgBA,GAAoCA;gBACpDA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;gBACrCA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;gBACrCA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;aACxCA,CAACA;YACFA,IAAIA,oBAAoBA,GAAGA;gBACvBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,kBAAkBA;oCAC5BA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;iCAChCA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;iCAChCA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;iCAChCA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YACFA,CAACA,CAACA,aAAaA,CAACA,oBAAoBA,CAACA,CAACA;YAEtCA,UAAUA,CAACA;gBACPA,IAAIA,SAASA,GAAGA,CAACA,CAACA,4BAA4BA,CAACA,CAACA;gBAChDA,IAAIA,MAAMA,GAAGA,CAACA,CAACA,+BAA+BA,CAACA,CAACA;gBAChDA,IAAIA,YAAYA,GAAGA,CAACA,CAACA,6BAA6BA,CAACA,CAACA;gBAEpDA,KAAKA,CAACA,YAAYA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAElDA,uBAAuBA;gBACjBA,CAACA,CAACA,aAAaA,CAAEA,CAACA,KAAKA,EAAEA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC9CA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CAC9CA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA;yBAChCA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA,EAAEA,SAASA,EAAEA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA;yBAChDA;qBACJA;iBACJA,CAACA,CAACA;gBACDA,CAACA,CAACA,aAAaA,CAAEA,CAACA,KAAKA,EAAEA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAE9CA,gCAAgCA;gBAC1BA,CAACA,CAACA,YAAYA,CAAEA,CAACA,KAAKA,EAAEA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7CA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CAC9CA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA,CAACA;yBACrDA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA,EAAEA,SAASA,EAAEA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA,SAASA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA,EAAEA;yBAChFA;qBACJA;iBACJA,CAACA,CAACA;gBAEPA,8BAA8BA;gBACxBA,CAACA,CAACA,aAAaA,CAAEA,CAACA,IAAIA,EAAEA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7CA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CAC9CA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA,CAACA;yBACrDA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA,EAAEA,SAASA,EAAEA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA,SAASA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA,EAAEA;yBAChFA;qBACJA;iBACJA,CAACA,CAACA;gBAEDA,CAACA,CAACA,aAAaA,CAAEA,CAACA,IAAIA,EAAEA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7CA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CAACA,EAAEA,IAAIA,EAAEA,EAAEA,EAAEA,CAACA,CAACA;gBAEjEA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,mGAAmGA,EAAEA,UAACA,IAAIA;YACzGA,IAAIA,UAAUA,GAAoCA;gBAC9CA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;aACnCA,CAACA;YACFA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,mCAAmCA;wBAC7CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,mCAAmCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACtDA,MAAMA,EAAEA,CAACA,WAAWA,EAAEA,UAAUA,CAACA;oCACjCA,QAAQA,EAAEA,UAAUA;oCACpBA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,mCAAmCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACtDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;iCACrBA,EAAEA;oCACCA,MAAMA,EAAEA,mCAAmCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACtDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;iCACrBA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,IAAIA,SAASA,GAAGA,CAACA,CAACA,4BAA4BA,CAACA,CAACA;gBAChDA,IAAIA,MAAMA,GAAGA,CAACA,CAACA,+BAA+BA,CAACA,CAACA;gBAChDA,IAAIA,YAAYA,GAAGA,CAACA,CAACA,6BAA6BA,CAACA,CAACA;gBAEpDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,GAAGA,CAACA,IAAIA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA;gBACpEA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,GAAGA,CAACA,IAAIA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA;gBACpEA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,GAAGA,CAACA,IAAIA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA;gBACpEA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,GAAGA,CAACA,IAAIA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA;gBAEpEA,KAAKA,CAACA,YAAYA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAElDA,oDAAoDA;gBAC9CA,CAACA,CAACA,cAAcA,CAAEA,CAACA,IAAIA,EAAEA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC9CA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,QAAQA,C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CA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CAC9CA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA;yBAChCA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA,EAAEA,SAASA,EAAEA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA;yBAChDA;qBACJA;iBACJA,CAACA,CAACA;gBAEPA,CAACA,CAACA,UAAUA,CAACA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAE1CA,UAAUA,CAACA;oBACPA,uBAAuBA;oBACvBA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBAC5DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;oBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;oBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;oBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;oBAE9DA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,mCAAmCA,EAAEA,UAACA,IAAIA;YACzCA,IAAIA,kBAAkBA,GAAGA;gBACrBA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;aACnCA,CAACA;YACFA,IAAIA,gBAAgBA,GAAGA;gBACnBA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;gBACrCA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;gBACrCA,kBAAKA,CAACA,qBAAqBA,CAACA,QAAQA,CAACA;aACxCA,CAACA;YACFA,IAAIA,oBAAoBA,GAAGA;gBACvBA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,qCAAqCA;wBAC/CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA;wCACNA,kBAAkBA,CAACA,CAACA,CAACA;wCACrBA,kBAAkBA,CAACA,CAACA,CAACA;qCACxBA;oCACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;iCAChCA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;iCAChCA,EAAEA;oCACCA,MAAMA,EAAEA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACxDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;oCAClBA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;iCAChCA,CAACA,EACFA,SAASA,EACTA,qCAAqCA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;yBACxDA;qBACJA,CAACA;aACLA,CAACA;YACFA,CAACA,CAACA,aAAaA,CAACA,oBAAoBA,CAACA,CAACA;YAEtCA,UAAUA,CAACA;gBACPA,IAAIA,SAASA,GAAGA,CAACA,CAACA,4BAA4BA,CAACA,CAACA;gBAChDA,IAAIA,MAAMA,GAAGA,CAACA,CAACA,+BAA+BA,CAACA,CAACA;gBAChDA,IAAIA,YAAYA,GAAGA,CAACA,CAACA,6BAA6BA,CAACA,CAACA;gBAEpDA,KAAKA,CAACA,YAAYA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAE5CA,CAACA,CAACA,YAAYA,CAAEA,CAACA,KAAKA,EAAEA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAC7CA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CAC9CA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA,CAACA;yBACrDA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA,EAAEA,SAASA,EAAEA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA,SAASA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA,EAAEA;yBAChFA;qBACJA;iBACJA,CAACA,CAACA;gBAEPA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBACrBA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAC/DA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;IACPA,CAACA,CAACA,CAACA;IAEHA,QAAQA,CAACA,8BAA8BA,EAACA;QAEpCA,IAAIA,QAAQA,GAAsBA;YAC9BA,KAAKA,EAAEA,GAAGA;YACVA,MAAMA,EAAEA,GAAGA;SACdA,CAACA;QAEFA,EAAEA,CAACA,gCAAgCA,EAACA;YAChCA,IAAIA,QAAQA,GAA6BA;gBACrCA,OAAOA,EAAEA;oBACLA;wBACIA,WAAWA,EAAEA,YAAYA;wBACzBA,SAASA,EAAEA,YAAYA;wBACvBA,SAASA,EAAEA,IAAIA;wBACfA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA;wBACzBA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA;wBAClEA,OAAOA,EAAEA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,EAAEA,EAAEA,EAAEA;qBAChEA;oBACDA;wBACIA,WAAWA,EAAEA,YAAYA;wBACzBA,SAASA,EAAEA,YAAYA;wBACvBA,SAASA,EAAEA,IAAIA;wBACfA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA;wBACzBA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA;qBACrEA;iBACJA;aACJA,CAACA;YAEFA,IAAIA,QAAQA,GAAGA;gBACXA,QAAQA,EAAEA,QAAQA;gBAClBA,WAAWA,EAAEA;oBACTA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;yBAChBA,EAAEA;4BACCA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;yBAChBA,CAACA,CAACA;iBACVA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,WAAWA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;YACzFA,IAAIA,QAAQA,GAAGA,WAAWA,CAACA,IAAIA,CAACA;YAChCA,IAAIA,YAAYA,GAAkBA;gBAC9BA,WAAWA,CAACA,iBAAiBA,CAACA,YAAYA,CAACA;gBAC3CA,WAAWA,CAACA,iBAAiBA,CAACA,YAAYA,CAACA;aAC9CA,CAACA;YAEFA,IAAIA,KAAKA,GAAGA,QAAQA,CAACA,QAAQA,CAACA;YAC9BA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC7BA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;YACzCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAChCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAC5CA,MAAMA,CAAeA,KAAKA,CAACA,CAACA,CAAEA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,CAACA,CAACA;YAEnEA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;YACzCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAChCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAC5CA,MAAMA,CAAeA,KAAKA,CAACA,CAACA,CAAEA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,CAACA,CAACA;YAEnEA,IAAIA,WAAWA,GAAGA,KAAKA,CAACA,GAAGA,CAACA,UAAAA,CAACA,IAAIA,OAAcA,CAAEA,CAACA,KAAKA,EAAtBA,CAAsBA,CAACA,CAACA;YACzDA,MAAMA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,eAAeA,CAACA,QAAQA,CAACA,WAAWA,CAACA,CAACA,CAACA;YACnEA,MAAMA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;YAEtCA,SAASA;YACTA,MAAMA,CAACA,WAAWA,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AAQA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YACpCA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACrCA,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,EAAEA,OAAOA,EAAEA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAEvFA,IAAIA,GAAgBA,KAAKA,CAACA,CAACA,CAACA,CAACA;YAC7BA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;YACxCA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAC5BA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YACpCA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACrCA,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,EAAEA,OAAOA,EAAEA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAEvFA,IAAIA,QAAQA,GAAGA;gBACXA,WAAWA,CAACA,sBAAsBA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA,SAASA,CAACA;gBACpEA,WAAWA,CAACA,sBAAsBA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,EAAEA,SAASA,CAACA;aACvEA,CAACA;YAEFA,IAAIA,SAASA,GAA6BA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,MAAMA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,Y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A,QAAQA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YACxCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACzCA,MAAMA,CAAeA,KAAKA,CAACA,CAACA,CAAEA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,EAAEA,OAAOA,EAAEA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAE1GA,IAAIA,QAAQA,GAAiBA,KAAKA,CAACA,CAACA,CAAEA,CAACA;YACvCA,MAAMA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;YAC5CA,MAAMA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAChCA,MAAMA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YACxCA,MAAMA,CAACA,QAAQA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACzCA,MAAMA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,EAAEA,OAAOA,EAAEA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAE3FA,IAAIA,UAAUA,GAAGA,QAAQA,CAACA,QAAQA,CAACA;YACnCA,MAAMA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YACxCA,MAAMA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YACrCA,MAAMA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YACjDA,MAAMA,CAAeA,UAAUA,CAACA,CAACA,CAAEA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,EAAEA,OAAOA,EAAEA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAC/GA,UAAUA,CAACA,OAAOA,CAACA,UAAAA,CAACA,IAAIA,OAAAA,MAAMA,CAAeA,CAAEA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,CAACA,EAAnDA,CAAmDA,CAACA,CAACA;YAE7EA,IAAIA,WAAWA,GAAGA,KAAKA,CAACA,GAAGA,CAACA,UAAAA,CAACA,IAAIA,OAAcA,CAAEA,CAACA,KAAKA,EAAtBA,CAAsBA,CAACA,CAACA;YACzDA,MAAMA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,eAAeA,CAACA,QAAQA,CAACA,WAAWA,CAACA,CAACA,CAACA;YAEnEA,SAASA;YACTA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA;YACvDA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;QACtEA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,yCAAyCA,EAAEA;YAE1CA,IAAIA,QAAQA,GAA6BA;gBACrCA,OAAOA,EAAEA;oBACLA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,UAAUA,EAAEA,EAAEA,UAAUA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,EAAEA;oBACtJA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,UAAUA,EAAEA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBACjJA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBAC9KA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBAC9KA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;iBACjLA;aACJA,CAACA;YACFA,IAAIA,kBAAkBA,GAAGA;gBACrBA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;aACnCA,CAACA;YACFA,IAAIA,gBAAgBA,GAAGA;gBACnBA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;gBACjCA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;gBACjCA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;aACpCA,CAACA;YAEFA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,QAAQA;gBAClBA,WAAWA,EAAEA;oBACTA,UAAUA,EAAEA,CAACA;4BACTA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,WAAWA,EAAEA,QAAQA,EAAEA,eAAeA,CAACA;4BAClEA,QAAQA,EAAEA,kBAAkBA;4BAC5BA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;yBACtCA,CAACA;oBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;4BACjCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,EAAEA;4BACCA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;4BACjCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,EAAEA;4BACCA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;4BACjCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,CAACA,EACFA,SAASA,EACTA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBAC3BA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAE3EA,IAAIA,oBAAoBA,GAAyCA,OAAOA,CAACA,OAAOA,CAACA,0BAA0BA,CAACA,YAAYA,CAACA,KAAKA,CAACA,wBAAwBA,EAAEA,CAACA,CAACA;YAC3JA,IAAIA,mBAAmBA,GAAGA,WAAWA,CAACA,YAAYA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC1EA,oBAAoBA,CAACA,aAAaA,CAACA,GAAGA,CAACA,mBAAmBA,CAACA,CAACA;YAE5DA,IAAIA,WAAWA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,oBAAoBA,EAAEA,QAAQA,CAACA,CAACA;YAEzGA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAClEA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACjEA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAClEA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAClEA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAElEA,IAAIA,YAAYA,GAAgBA,WAAWA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC7DA,MAAMA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACzCA,GAAGA,CAACA,CAAiBA,UAAqBA,EAArBA,KAAAA,YAAYA,CAACA,QAAQA,EAArCA,cAAYA,EAAZA,IAAqCA,CAACA;gBAAtCA,IAAIA,QAAQA,SAAAA;gBACbA,MAAMA,CAAeA,QAASA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;aACvDA;YAEDA,IAAIA,WAAWA,GAAkBA,EAAEA,CAACA,MAAMA,CAACA,WAAWA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,EAAEA,WAAWA,CAACA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC7GA,GAAGA,CAACA,CAAsBA,UAAWA,EAAhCA,uBAAiBA,EAAjBA,IAAgCA,CAACA;gBAAjCA,IAAIA,aAAaA,GAAIA,WAAWA,IAAfA;gBAClBA,MAAMA,CAACA,aAAaA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBAC3CA,GAAGA,CAACA,CAAiBA,UAAsBA,EAAtBA,KAAAA,aAAaA,CAACA,QAAQA,EAAtCA,cAAYA,EAAZA,IAAsCA,CAACA;oBAAvCA,IAAIA,QAAQA,SAAAA;oBACbA,MAAMA,CAAeA,QAASA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;iBACxDA;aACJA;QACLA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,yDAAyDA,EAACA;YACzDA,IAAIA,QAAQA,GAA6BA;gBACrCA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,UAAUA,EAAEA,EAAEA,UAAUA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,EAAEA;oBACtJA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,UAAUA,EAAEA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBAC3HA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBACxJA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBACxJA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;iBAC3JA;aACJA,CAACA;YACFA,IAAIA,kBAAkBA,GAAGA;gBACrBA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;gBACjCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;aACnCA,CAACA;YACFA,IAAIA,gBAAgBA,GAAGA;gBACnBA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;gBACjCA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;gBACjCA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;aACpCA,CAACA;YAEFA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,QAAQA;gBAClBA,WAAWA,EAAEA;oBACTA,UAAUA,EAAEA,CAACA;4BACTA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,MAAMA,EAAEA,WAAWA,EAAEA,QAAQA,EAAEA,eAAeA,CAACA;4BAC9DA,QAAQA,EAAEA,kBAAkBA;4BAC5BA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;yBACtCA,CAACA;oBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,IAAIA,CAACA;4BACnCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,EAAEA;4BACCA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,GAAGA,EAAEA,IAAIA,CAACA;4BACnCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,EAAEA;4BACCA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,IAAIA,CAACA;4BACnCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,CAACA,CAACA;iBACVA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,WAAWA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;YACzFA,IAAIA,QAAQA,GAAGA,WAAWA,CAACA,IAAIA,CAACA;YAEhCA,IAAIA,KAAKA,GAAGA,QAAQA,CAACA,QAAQA,CAACA;YAC9BA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC7BA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YACtCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAChCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YACxCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACzCA,MAAMA,CAAeA,KAAKA,CAACA,CAACA,CAAEA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,CAACA,EAAEA,OAAOA,EAAEA,WAAWA,CAACA,YAAYA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YAE1IA,IAAIA,WAAWA,GAAGA,KAAKA,CAACA,GAAGA,CAACA,UAAAA,CAACA,IAAIA,OAAcA,CAAEA,CAACA,KAAKA,EAAtBA,CAAsBA,CAACA,CAACA;YACzDA,MAAMA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,eAAeA,CAACA,QAAQA,CAACA,WAAWA,CAACA,CAACA,CAACA;YAEnEA,SAASA;YACTA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA;YACvDA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YACnEA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;QACpEA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2EAA2EA,EAACA;YAC3EA,IAAIA,QAAQA,GAA6BA;gBACrCA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,UAAUA,EAAEA,EAAEA,UAAUA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,IAAIA,CAACA,EAAEA;oBAChIA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,UAAUA,EAAEA,EAAEA,QAAQA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBAC3HA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBACxJA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBACxJA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;iBAC3JA;aACJA,CAACA;YACFA,IAAIA,kBAAkBA,GAAGA;gBACrBA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;gBACjCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gBAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;aACnCA,CAACA;YACFA,IAAIA,gBAAgBA,GAAGA;gBACnBA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;gBACjCA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;gBACjCA,kBAAKA,CAACA,qBAAqBA,CAACA,IAAIA,CAACA;aACpCA,CAACA;YAEFA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,QAAQA;gBAClBA,WAAWA,EAAEA;oBACTA,UAAUA,EAAEA,CAACA;4BACTA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,MAAMA,EAAEA,WAAWA,EAAEA,QAAQA,EAAEA,eAAeA,CAACA;4BAC9DA,QAAQA,EAAEA,kBAAkBA;4BAC5BA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;yBACtCA,CAACA;oBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,IAAIA,CAACA;4BACnCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,EAAEA;4BACCA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,GAAGA,EAAEA,IAAIA,CAACA;4BACnCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,EAAEA;4BACCA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,IAAIA,CAACA;4BACnCA,QAAQA,EAAEA,gBAAgBA,CAACA,CAACA,CAACA;yBAChCA,CAACA,CAACA;iBACVA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,CAACA,CAACA,IAAIA,CAACA;YAE3FA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,MAAMA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YACxEA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAE3DA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,SAASA,EAAEA,CAACA,CAACA,CAACA;YACpFA,MAAMA,CAACA,MAAMA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,SAASA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAE1HA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,MAAMA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAEtHA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,WAAWA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAC3HA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,QAAQA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;QAC5HA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2DAA2DA,EAACA;YAC3DA,IAAIA,gBAAgBA,GAA6BA;gBAC7CA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;oBACrDA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;oBACrDA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;iBACxDA;aACJA,CAACA;YAEFA,IAAIA,QAAQA,GAAqBA;gBAC7BA,QAAQA,EAAEA,gBAAgBA;gBAC1BA,WAAWA,EAAEA;oBACTA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACnCA,MAAMA,EAAEA,CAACA,CAACA,CAACA;yBACdA;wBACDA;4BACIA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACnCA,MAAMA,EAAEA,CAACA,CAACA,CAACA;yBACdA;wBACDA;4BACIA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACnCA,MAAMA,EAAEA,CAACA,CAACA,CAACA;yBACdA;qBACJA,CAACA;iBACLA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,CAACA,CAACA,IAAIA,CAACA;YAE3FA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAE3DA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA,CAACA;YACtEA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA,CAACA;YACtEA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA,CAACA;QAC1EA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,oEAAoEA,EAAEA;YACrEA,IAAIA,gBAAgBA,GAA6BA;gBAC7CA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;oBACrDA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;oBACrDA,EAAEA,WAAWA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,GAAGA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;iBACxDA;aACJA,CAACA;YAEFA,IAAIA,QAAQA,GAAqBA;gBAC7BA,QAAQA,EAAEA,gBAAgBA;gBAC1BA,WAAWA,EAAEA;oBACTA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACnCA,MAAMA,EAAEA,CAACA,CAACA,CAACA;yBACdA;wBACDA;4BACIA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACnCA,MAAMA,EAAEA,CAACA,CAACA,CAACA;yBACdA;wBACDA;4BACIA,MAAMA,EAAEA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACnCA,MAAMA,EAAEA,CAACA,CAACA,CAACA;yBACdA;qBACJA,CAACA;iBACLA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,SAASA,EAAEA,KAAKA,CAACA,CAACA,IAAIA,CAACA;YAE7GA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAE3DA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,aAAaA,EAAEA,CAACA;YAC1CA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,aAAaA,EAAEA,CAACA;YAC1CA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,aAAaA,EAAEA,CAACA;QAC9CA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,gCAAgCA,EAACA;YAChCA,IAAIA,QAAQA,GAA6BA;gBACrCA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,YAAYA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;oBACnKA,EAAEA,WAAWA,EAAEA,YAAYA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;iBACtKA;aACJA,CAACA;YACFA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,QAAQA;gBAClBA,WAAWA,EAAEA;oBACTA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;yBAChBA,EAAEA;4BACCA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;yBAChBA,CAACA,CAACA;iBACVA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,WAAWA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;YACzFA,IAAIA,QAAQA,GAAGA,WAAWA,CAACA,IAAIA,CAACA;YAEhCA,IAAIA,YAAYA,GAAkBA,QAAQA,CAACA,OAAOA,CAACA,GAAGA,CAACA,UAACA,OAAOA,IAAKA,OAAAA,WAAWA,CAACA,iBAAiBA,CAACA,OAAOA,CAACA,SAASA,CAACA,EAAhDA,CAAgDA,CAACA,CAACA;YAEtHA,IAAIA,KAAKA,GAAGA,QAAQA,CAACA,QAAQA,CAACA;YAC9BA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAE7BA,IAAIA,IAAIA,GAA6BA,KAAKA,CAACA,CAACA,CAACA,CAACA;YAC9CA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;YACrCA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAC5BA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YACxCA,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,CAACA,CAACA;YAEhDA,IAAIA,GAAgBA,KAAKA,CAACA,CAACA,CAACA,CAACA;YAC7BA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;YACrCA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAC5BA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YACxCA,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,CAACA,CAACA;YAEhDA,IAAIA,WAAWA,GAAGA,KAAKA,CAACA,GAAGA,CAACA,UAAAA,CAACA,IAAIA,OAAcA,CAAEA,CAACA,KAAKA,EAAtBA,CAAsBA,CAACA,CAACA;YACzDA,MAAMA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,eAAeA,CAACA,QAAQA,CAACA,WAAWA,CAACA,CAACA,CAACA;YAEnEA,SAASA;YACTA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;YAC9CA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;YACtEA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;QAC1EA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,iCAAiCA,EAACA;YACjCA,IAAIA,QAAQA,GAA6BA;gBACrCA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,YAAYA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,IAAIA,EAAEA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,CAACA,EAAEA;iBACtKA;aACJA,CAACA;YACFA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,QAAQA;gBAClBA,WAAWA,EAAEA;oBACTA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3BA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;yBAChBA;qBACJA,CAACA;iBACLA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,WAAWA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;YACzFA,IAAIA,QAAQA,GAAGA,WAAWA,CAACA,IAAIA,CAACA;YAEhCA,IAAIA,YAAYA,GAAkBA,QAAQA,CAACA,OAAOA,CAACA,GAAGA,CAACA,UAACA,OAAOA,IAAKA,OAAAA,WAAWA,CAACA,iBAAiBA,CAACA,OAAOA,CAACA,SAASA,CAACA,EAAhDA,CAAgDA,CAACA,CAACA;YAEtHA,IAAIA,KAAKA,GAAGA,QAAQA,CAACA,QAAQA,CAACA;YAC9BA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAE7BA,IAAIA,IAAIA,GAA6BA,KAAKA,CAACA,CAACA,CAACA,CAACA;YAC9CA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;YACrCA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAC5BA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YACxCA,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,MAAMA,EAAEA,CAACA,CAACA;YAEhDA,IAAIA,WAAWA,GAAGA,KAAKA,CAACA,GAAGA,CAACA,UAAAA,CAACA,IAAIA,OAAcA,CAAEA,CAACA,KAAKA,EAAtBA,CAAsBA,CAACA,CAACA;YACzDA,MAAMA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,eAAeA,CAACA,QAAQA,CAACA,WAAWA,CAACA,CAACA,CAACA;YAEnEA,SAASA;YACTA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;YAC9CA,MAAMA,CAACA,WAAWA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;QAC1EA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,mEAAmEA,EAAEA;YACpEA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,mCAAmCA;gBAC7CA,WAAWA,EAAEA;oBACTA,UAAUA,EAAEA,CAACA;4BACTA,MAAMA,EAAEA,mCAAmCA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACtDA,MAAMA,EAAEA,CAACA,WAAWA,EAAEA,UAAUA,CAACA;4BACjCA,QAAQA,EAAEA;gCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;6BACnCA;4BACDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;yBACtCA,CAACA;oBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,mCAAmCA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACtDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;4BAClBA,UAAUA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA;yBACvBA,EAAEA;4BACCA,MAAMA,EAAEA,mCAAmCA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACtDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;4BAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;yBACzBA,CAACA,CAACA;iBACVA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,CAACA,CAACA,IAAIA,CAACA;YAC3FA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YACvEA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YACvEA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YACvEA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAEvEA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,WAAWA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAC7HA,MAAMA,CAACA,KAAKA,CAACA,sBAAsBA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,WAAWA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,mBAAmBA,CAACA,2BAA2BA,EAAEA,KAAKA,EAAEA,IAAIA,EAAEA,CAACA,CAACA,CAACA;YAExPA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,WAAWA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAC7HA,MAAMA,CAACA,KAAKA,CAACA,sBAAsBA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,WAAWA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,mBAAmBA,CAACA,2BAA2BA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAEzPA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,UAAUA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAC5HA,MAAMA,CAACA,KAAKA,CAACA,sBAAsBA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,UAAUA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,mBAAmBA,CAACA,2BAA2BA,EAAEA,KAAKA,EAAEA,IAAIA,EAAEA,CAACA,CAACA,CAACA;YAEvPA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,UAAUA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAC5HA,MAAMA,CAACA,KAAKA,CAACA,sBAAsBA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,UAAUA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,WAAWA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,mBAAmBA,CAACA,2BAA2BA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;QAC5PA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6BAA6BA,EAACA;YAC7BA,IAAIA,eAAeA,GAAGA,CAACA,SAASA,EAAEA,SAASA,EAAEA,SAASA,CAACA,CAACA;YACxDA,IAAIA,iBAAiBA,GAA8BA;gBAC/CA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;gBACjEA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;gBACjEA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;aACpEA,CAACA;YAEFA,IAAIA,wBAAwBA,GAA6BA;gBACrDA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA;oBACvBA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;oBACxCA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,EAAEA,UAAUA,EAAEA,IAAIA,EAAEA,EAAEA;iBACxEA;aACJA,CAACA;YAEFA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,wBAAwBA;gBAClCA,WAAWA,EAAEA;oBACTA,UAAUA,EAAEA,CAACA;4BACTA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,WAAWA,EAAEA,UAAUA,CAACA;4BACjCA,OAAOA,EAAEA,iBAAiBA;4BAC1BA,QAAQA,EAAEA;gCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;6BACnCA;yBACJA,CAACA;oBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;4BAClBA,UAAUA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA;yBACvBA,EAAEA;4BACCA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;4BAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;yBACzBA,CAACA,CAACA;iBACVA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,IAAIA,CAACA,CAACA,IAAIA,CAACA;YACjGA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAE3DA,oBAAOA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC3DA,oBAAOA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA;QAC/DA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,iDAAiDA,EAAEA;YAClDA,IAAIA,eAAeA,GAAGA,CAACA,SAASA,EAAEA,SAASA,EAAEA,SAASA,CAACA,CAACA;YACxDA,IAAIA,iBAAiBA,GAA8BA;gBAC/CA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;gBACjEA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;gBACjEA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;aACpEA,CAACA;YAEFA,IAAIA,wBAAwBA,GAA6BA;gBACrDA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA;oBACvBA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;oBACxCA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,EAAEA,UAAUA,EAAEA,IAAIA,EAAEA,EAAEA;iBACvDA;aACJA,CAACA;YAEFA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,wBAAwBA;gBAClCA,WAAWA,EAAEA;oBACTA,UAAUA,EAAEA,CAACA;4BACTA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,WAAWA,EAAEA,UAAUA,CAACA;4BACjCA,OAAOA,EAAEA,iBAAiBA;4BAC1BA,QAAQA,EAAEA;gCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;6BACnCA;yBACJA,CAACA;oBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;yBACrBA,EAAEA;4BACCA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;yBACrBA,CAACA,CAACA;iBACVA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,IAAIA,CAACA,CAACA,IAAIA,CAACA;YACjGA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YACvEA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YACvEA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YACvEA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAEvEA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,WAAWA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAC/JA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,WAAWA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YACxHA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,UAAUA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YAC9JA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,UAAUA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;QAC3HA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2DAA2DA,EAAEA;YAC5DA,IAAIA,eAAeA,GAAGA,CAACA,SAASA,EAAEA,SAASA,EAAEA,SAASA,CAACA,CAACA;YACxDA,IAAIA,iBAAiBA,GAA8BA;gBAC/CA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;gBACjEA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;gBACjEA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,EAAEA,EAAEA,EAAEA,EAAEA;aACpEA,CAACA;YAEFA,IAAIA,wBAAwBA,GAA6BA;gBACrDA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA;oBACvBA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,IAAIA,EAAEA,EAAEA;oBAChFA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA;iBAC3CA;aACJA,CAACA;YAEFA,IAAIA,QAAQA,GAAaA;gBACrBA,QAAQA,EAAEA,wBAAwBA;gBAClCA,WAAWA,EAAEA;oBACTA,UAAUA,EAAEA,CAACA;4BACTA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,WAAWA,EAAEA,UAAUA,CAACA;4BACjCA,OAAOA,EAAEA,iBAAiBA;4BAC1BA,QAAQA,EAAEA;gCACNA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;gCAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;6BACnCA;yBACJA,CAACA;oBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;4BAClBA,UAAUA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA;yBACvBA,EAAEA;4BACCA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;4BAClBA,UAAUA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;yBACzBA,CAACA,CAACA;iBACVA;aACJA,CAACA;YAEFA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,IAAIA,CAACA,CAACA,IAAIA,CAACA;YACjGA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAE3DA,oBAAOA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC3DA,oBAAOA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC3DA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,WAAWA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;YACxHA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,CAACA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,UAAUA,EAAEA,EAAEA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,KAAKA,EAAEA,CAACA,CAACA,CAACA;QAC3HA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,iDAAiDA,EAAEA;YAClDA,IAAIA,gBAAgBA,GAA6BA;gBAC7CA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,MAAMA,GAAGA;oBAC3CA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,CAACA;aACnEA,CAACA;YAEFA,IAAIA,wBAAwBA,GAA6BA;gBACrDA,OAAOA,EAAEA;oBACLA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,GAAGA;oBAC5DA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,GAAGA;oBAC5DA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,IAAIA,GAAGA,CAACA;aACpEA,CAACA;YAEFA,IAAIA,QAAQA,GAAqBA;gBAC7BA,WAAWA,EAAEA;oBACTA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;wBACzCA;4BACIA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;4BACbA,QAAQA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,MAAMA,CAACA;yBAChDA,EAAEA;4BACCA,MAAMA,EAAEA,wBAAwBA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BAC3CA,MAAMA,EAAEA,CAACA,GAAGA,CAACA;4BACbA,QAAQA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,MAAMA,CAACA;yBAChDA;qBACJA,EACGA,CAACA,iBAAiBA,CAACA,EACnBA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACnCA;gBACDA,QAAQA,EAAEA,gBAAgBA;aAC7BA,CAACA;YAEFA,IAAIA,aAAaA,GAAGA,QAAQA,CAACA,WAAWA,CAACA,MAAMA,CAACA,OAAOA,EAAEA,CAACA;YAC1DA,aAAaA,CAACA,CAACA,CAACA,CAACA,OAAOA,GAAGA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,SAASA,EAAEA,EAAEA,EAAEA,EAAEA,CAACA;YACpFA,aAAaA,CAACA,CAACA,CAACA,CAACA,OAAOA,GAAGA,EAAEA,SAASA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,KAAKA,EAAEA,EAAEA,KAAKA,EAAEA,SAASA,EAAEA,EAAEA,EAAEA,EAAEA,CAACA;YACpFA,QAAQA,CAACA,WAAWA,CAACA,MAAMA,CAACA,OAAOA,GAAGA,cAAMA,OAAAA,aAAaA,EAAbA,CAAaA,CAACA;YAE1DA,IAAIA,iBAAiBA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,cAAcA,CAACA,uBAAuBA,EAAEA,CAACA;YACjFA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,YAAYA,CAACA,UAAUA,CAACA;YAC3EA,IAAIA,QAAQA,GAAGA,OAAOA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,iBAAiBA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,IAAIA,CAACA,CAACA,IAAIA,CAACA;YACjGA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAC3DA,IAAIA,KAAKA,GAA6BA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;YAE3DA,oBAAOA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,SAASA,CAACA,CAACA;YAClDA,oBAAOA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,SAASA,CAAEA,CAACA;QACvDA,CAACA,CAACA,CAACA;IACPA,CAACA,CAACA,CAACA;AACPA,CAACA,EAj6HM,YAAY,KAAZ,YAAY,QAi6HlB","file":"visuals/treemapTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import CssConstants = jsCommon.CssConstants;\r\n    import data = powerbi.data;\r\n    import DataViewAnalysis = powerbi.DataViewAnalysis;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import DataView = powerbi.DataView;\r\n    import QueryProjectionCollection = powerbi.data.QueryProjectionCollection;\r\n    import QueryProjectionsByRole = powerbi.data.QueryProjectionsByRole;\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n    import Treemap = powerbi.visuals.Treemap;\r\n    import TreemapNode = powerbi.visuals.TreemapNode;\r\n    import SelectionId = powerbi.visuals.SelectionId;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import VisualObjectInstanceEnumerationObject = powerbi.VisualObjectInstanceEnumerationObject;\r\n\r\n    const dataTypeNumber = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double);\r\n    const dataTypeString = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text);\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    const dataViewMetadataCategorySeriesColumns: powerbi.DataViewMetadata = {\r\n        columns: [\r\n            { displayName: 'Squad', queryName: 'select0', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n            { displayName: 'Period', queryName: 'select1', properties: { \"Series\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n            { displayName: null, queryName: 'select2', groupName: '201501', isMeasure: true, properties: { \"Values\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n            { displayName: null, queryName: 'select2', groupName: '201502', isMeasure: true, properties: { \"Values\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n            { displayName: null, queryName: 'select2', groupName: '201503', isMeasure: true, properties: { \"Values\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n        ]\r\n    };\r\n    const categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'Squad' });\r\n    const seriesColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'Period' });\r\n\r\n    let dataViewMetadataCategoryColumn: powerbi.DataViewMetadata = {\r\n        columns: [\r\n            { displayName: 'Genre', queryName: 'select0', properties: { \"Category\": true }, type: dataTypeString },\r\n            { displayName: 'TotalSales', queryName: 'select1', isMeasure: true, properties: { \"Values\": true }, type: dataTypeNumber }\r\n        ]\r\n    };\r\n\r\n    let dataViewMetadataCategoryColumnAndLongText: powerbi.DataViewMetadata = {\r\n        columns: [\r\n            { displayName: 'Category group', queryName: 'select0', properties: { \"Category\": true }, type: dataTypeString },\r\n            { displayName: 'Measure with long name', queryName: 'select1', isMeasure: true, properties: { \"Values\": true }, type: dataTypeNumber },\r\n            { displayName: 'Measure', queryName: 'select2', isMeasure: true, properties: { \"Values\": true }, type: dataTypeNumber }\r\n        ]\r\n    };\r\n\r\n    let dataViewMetadataCategoryAndMeasures: powerbi.DataViewMetadata = {\r\n        columns: [\r\n            { displayName: 'Area', queryName: 'select0', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n            { displayName: 'BugsFiled', queryName: 'select1', isMeasure: true, properties: { \"Values\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n            { displayName: 'BugsFixed', queryName: 'select2', isMeasure: true, properties: { \"Values\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n        ]\r\n    };\r\n\r\n    describe(\"Treemap\",() => {\r\n        let categoryColumn: powerbi.DataViewMetadataColumn = { displayName: 'year', queryName: 'select0', type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) };\r\n        let measureColumn: powerbi.DataViewMetadataColumn = { displayName: 'sales', queryName: 'select1', isMeasure: true, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) };\r\n\r\n        it('Treemap registered capabilities',() => {\r\n            expect(powerbi.visuals.visualPluginFactory.create().getPlugin('treemap').capabilities).toBe(powerbi.visuals.treemapCapabilities);\r\n        });\r\n\r\n        it('Capabilities should include dataViewMappings',() => {\r\n            expect(powerbi.visuals.treemapCapabilities.dataViewMappings).toBeDefined();\r\n        });\r\n\r\n        it('Capabilities should include dataRoles',() => {\r\n            expect(powerbi.visuals.treemapCapabilities.dataRoles).toBeDefined();\r\n        });\r\n\r\n        it('Capabilities should include objects',() => {\r\n            expect(powerbi.visuals.treemapCapabilities.objects).toBeDefined();\r\n        });\r\n\r\n        it('Capabilities should include implicitSort',() => {\r\n            expect(powerbi.visuals.treemapCapabilities.sorting.implicit).toBeDefined();\r\n        });\r\n\r\n        it('FormatString property should match calculated',() => {\r\n            expect(powerbi.data.DataViewObjectDescriptors.findFormatString(powerbi.visuals.treemapCapabilities.objects)).toEqual(powerbi.visuals.treemapProps.general.formatString);\r\n        });\r\n\r\n        it('preferred capability does not support zero rows',() => {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Year' },\r\n                    { displayName: 'Value', isMeasure: true }],\r\n            };\r\n\r\n            let dataView: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: categoryColumn,\r\n                        values: []\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: measureColumn,\r\n                        values: []\r\n                    }]),\r\n                }\r\n            };\r\n\r\n            expect(DataViewAnalysis.supports(dataView, powerbi.visuals.treemapCapabilities.dataViewMappings[0], true))\r\n                .toBe(false);\r\n        });\r\n\r\n        it('preferred capability does not support one row',() => {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Year' },\r\n                    { displayName: 'Value', isMeasure: true }],\r\n            };\r\n\r\n            let dataView: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: categoryColumn,\r\n                        values: [2012, 2013]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: measureColumn,\r\n                        values: [200]\r\n                    }]),\r\n                }\r\n            };\r\n\r\n            expect(DataViewAnalysis.supports(dataView, powerbi.visuals.treemapCapabilities.dataViewMappings[0], true))\r\n                .toBe(false);\r\n        });\r\n\r\n        it ('Capabilities should only allow one measure if there are group and detail',() => {\r\n            let allowedProjections: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '0' }]),\r\n                    'Details': new QueryProjectionCollection([{ queryRef: '1' }]),\r\n                    'Values': new QueryProjectionCollection([{ queryRef: '2' }]),\r\n                };\r\n            let disallowedProjections1: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '0' }]),\r\n                    'Details': new QueryProjectionCollection([{ queryRef: '1' }]),\r\n                    'Values': new QueryProjectionCollection([\r\n                        { queryRef: '2' },\r\n                        { queryRef: '3' }\r\n                    ])\r\n                };\r\n            let disallowedProjections2: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '0' }]),\r\n                    'Details': new QueryProjectionCollection([{ queryRef: '1' }]),\r\n                    'Values': new QueryProjectionCollection([\r\n                        { queryRef: '2' },\r\n                        { queryRef: '3' },\r\n                        { queryRef: '4' }\r\n                    ])\r\n                };\r\n\r\n            var dataViewMappings = powerbi.visuals.treemapCapabilities.dataViewMappings;\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections1, dataViewMappings, {}).supportedMappings).toBe(null);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections2, dataViewMappings, {}).supportedMappings).toBe(null);\r\n        });\r\n\r\n        it('Capabilities should only allow one measure if is a detail group',() => {\r\n            let allowedProjections: QueryProjectionsByRole =\r\n                {\r\n                    'Details': new QueryProjectionCollection([{ queryRef: '1' }]),\r\n                    'Values': new QueryProjectionCollection([{ queryRef: '0' }]),\r\n                };\r\n            let disallowedProjections: QueryProjectionsByRole =\r\n                {\r\n                    'Details': new QueryProjectionCollection([{ queryRef: '1' }]),\r\n                    'Values': new QueryProjectionCollection([\r\n                        { queryRef: '2' },\r\n                        { queryRef: '0' }\r\n                    ]),\r\n                };\r\n\r\n            var dataViewMappings = powerbi.visuals.treemapCapabilities.dataViewMappings;\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections, dataViewMappings, {}).supportedMappings).toBe(null);\r\n        });\r\n\r\n        it('Capabilities should allow multiple measures if there is no detail group',() => {\r\n            let allowedProjections1: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '2' }]),\r\n                    'Values': new QueryProjectionCollection([\r\n                        { queryRef: '1' },\r\n                        { queryRef: '0' }\r\n                    ])\r\n                };\r\n\r\n            let allowedProjections2: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '1' }]),\r\n                    'Values': new QueryProjectionCollection([\r\n                        { queryRef: '2' },\r\n                        { queryRef: '0' },\r\n                        { queryRef: '3' }\r\n                    ]),\r\n                };\r\n\r\n            let allowedProjections3: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '1' }]),\r\n                    'Values': new QueryProjectionCollection([{ queryRef: '0' }]),\r\n                };\r\n\r\n            let allowedProjections4: QueryProjectionsByRole =\r\n                {\r\n                    'Values': new QueryProjectionCollection([\r\n                        { queryRef: '0' },\r\n                        { queryRef: '1' }\r\n                    ]),\r\n                };\r\n\r\n            var dataViewMappings = powerbi.visuals.treemapCapabilities.dataViewMappings;\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections1, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections2, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections3, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections4, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n        });\r\n\r\n        it('Capabilities should not allow multiple category groups',() => {\r\n            let disallowedProjections1: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([\r\n                        { queryRef: '0' },\r\n                        { queryRef: '1' }\r\n                    ]),\r\n                };\r\n\r\n            let disallowedProjections2: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([\r\n                        { queryRef: '0' },\r\n                        { queryRef: '1' }\r\n                    ]),\r\n                    'Values': new QueryProjectionCollection([{ queryRef: '2' }]),\r\n                };\r\n\r\n            let disallowedProjections3: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([\r\n                        { queryRef: '0' },\r\n                        { queryRef: '1' }\r\n                    ]),\r\n                    'Details': new QueryProjectionCollection([{ queryRef: '2' }]),\r\n                    'Values': new QueryProjectionCollection([{ queryRef: '3' }]),\r\n                };\r\n\r\n            var dataViewMappings = powerbi.visuals.treemapCapabilities.dataViewMappings;\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections1, dataViewMappings, {}).supportedMappings).toBe(null);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections2, dataViewMappings, {}).supportedMappings).toBe(null);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections3, dataViewMappings, {}).supportedMappings).toBe(null);\r\n        });\r\n\r\n        it('Capabilities should not allow multiple detail groups',() => {\r\n            let disallowedProjections1: QueryProjectionsByRole =\r\n                {\r\n                    'Details': new QueryProjectionCollection([\r\n                        { queryRef: '0' },\r\n                        { queryRef: '1' }\r\n                    ])\r\n                };\r\n\r\n            let disallowedProjections2: QueryProjectionsByRole =\r\n                {\r\n                    'Details': new QueryProjectionCollection([\r\n                        { queryRef: '0' },\r\n                        { queryRef: '1' }\r\n                    ]),\r\n                    'Values': new QueryProjectionCollection([{ queryRef: '2' }])\r\n                };\r\n\r\n            let disallowedProjections3: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '0' }]),\r\n                    'Details': new QueryProjectionCollection([\r\n                        { queryRef: '1' },\r\n                        { queryRef: '2' }\r\n                    ]),\r\n                    'Values': new QueryProjectionCollection([{ queryRef: '3' }]),\r\n                };\r\n\r\n            var dataViewMappings = powerbi.visuals.treemapCapabilities.dataViewMappings;\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections1, dataViewMappings, {}).supportedMappings).toBe(null);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections2, dataViewMappings, {}).supportedMappings).toBe(null);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(disallowedProjections3, dataViewMappings, {}).supportedMappings).toBe(null);\r\n        });\r\n\r\n        it('Capabilities should allow one category and/or one detail groups',() => {\r\n            let allowedProjections1: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '0' }])\r\n                };\r\n\r\n            let allowedProjections2: QueryProjectionsByRole =\r\n                {\r\n                    'Detail': new QueryProjectionCollection([{ queryRef: '0' }])\r\n                };\r\n\r\n            let allowedProjections3: QueryProjectionsByRole =\r\n                {\r\n                    'Group': new QueryProjectionCollection([{ queryRef: '0' }]),\r\n                    'Detail': new QueryProjectionCollection([{ queryRef: '1' }]),\r\n                };\r\n\r\n            let allowedProjections4: QueryProjectionsByRole =\r\n                {\r\n                    'Values': new QueryProjectionCollection([{ queryRef: '0' }]),\r\n                };\r\n\r\n            var dataViewMappings = powerbi.visuals.treemapCapabilities.dataViewMappings;\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections1, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections2, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections3, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n            expect(DataViewAnalysis.chooseDataViewMappings(allowedProjections4, dataViewMappings, {}).supportedMappings).toEqual(dataViewMappings);\r\n        });\r\n    });\r\n\r\n    describe(\"treemap data labels validation\",() => {\r\n        let v: powerbi.IVisual, element: JQuery;\r\n        let hostServices: powerbi.IVisualHostServices;\r\n\r\n        beforeEach(() => {\r\n            hostServices = powerbitests.mocks.createVisualHostServices();\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            v = powerbi.visuals.visualPluginFactory.create().getPlugin('treemap').create();\r\n            v.init({\r\n                element: element,\r\n                host: hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true }\r\n            });\r\n        });\r\n\r\n        it(\"check color for legend title and legend items treemap chart\", (done) => {\r\n            let labelColor = \"#002121\";\r\n\r\n            let dataViewGradientMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1' },\r\n                    { displayName: 'col2', isMeasure: true },\r\n                    { displayName: 'col3', isMeasure: true, roles: { 'Gradient': true } }\r\n                ],\r\n                objects: {\r\n                    legend:\r\n                    {\r\n                        titleText: 'my title text',\r\n                        show: true,\r\n                        showTitle: true,\r\n                        labelColor: { solid: { color: labelColor } },\r\n                    }\r\n                }\r\n            };\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewGradientMetadata,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewGradientMetadata.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewGradientMetadata.columns[1],\r\n                            values: [5, 990, 5],\r\n                        }])\r\n                    }\r\n                }],\r\n            });\r\n\r\n            let legend = element.find('.legend');\r\n            let legendGroup = legend.find('#legendGroup');\r\n            let legendTitle = legendGroup.find('.legendTitle');\r\n            let legendText = legendGroup.find('.legendItem').find('.legendText');\r\n\r\n            setTimeout(() => {\r\n                helpers.assertColorsMatch(legendTitle.css('fill'), labelColor);\r\n                helpers.assertColorsMatch(legendText.first().css('fill'), labelColor);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"check default legend font size\", (done) => {\r\n            let labelFontSize = powerbi.visuals.SVGLegend.DefaultFontSizeInPt;\r\n\r\n            let dataViewGradientMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1' },\r\n                    { displayName: 'col2', isMeasure: true },\r\n                    { displayName: 'col3', isMeasure: true, roles: { 'Gradient': true } }\r\n                ],\r\n                objects: {\r\n                    legend:\r\n                    {\r\n                        titleText: 'my title text',\r\n                        show: true,\r\n                        showTitle: true,\r\n                    }\r\n                }\r\n            };\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewGradientMetadata,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewGradientMetadata.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewGradientMetadata.columns[1],\r\n                            values: [5, 990, 5],\r\n                        }])\r\n                    }\r\n                }],\r\n            });\r\n\r\n            let legend = element.find('.legend');\r\n            let legendGroup = legend.find('#legendGroup');\r\n            let legendTitle = legendGroup.find('.legendTitle');\r\n            let legendText = legendGroup.find('.legendItem').find('.legendText');\r\n\r\n            setTimeout(() => {\r\n                helpers.assertFontSizeMatch(legendTitle.css('font-size'), labelFontSize);\r\n                helpers.assertFontSizeMatch(legendText.css('font-size'), labelFontSize);\r\n                \r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"check color for legend title and legend items treemap chart\", (done) => {\r\n            let labelFontSize = 13;\r\n\r\n            let dataViewGradientMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1' },\r\n                    { displayName: 'col2', isMeasure: true },\r\n                    { displayName: 'col3', isMeasure: true, roles: { 'Gradient': true } }\r\n                ],\r\n                objects: {\r\n                    legend:\r\n                    {\r\n                        titleText: 'my title text',\r\n                        show: true,\r\n                        showTitle: true,\r\n                        fontSize :labelFontSize,\r\n                    }\r\n                }\r\n            };\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewGradientMetadata,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewGradientMetadata.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewGradientMetadata.columns[1],\r\n                            values: [5, 990, 5],\r\n                        }])\r\n                    }\r\n                }],\r\n            });\r\n\r\n            let legend = element.find('.legend');\r\n            let legendGroup = legend.find('#legendGroup');\r\n            let legendTitle = legendGroup.find('.legendTitle');\r\n            let legendText = legendGroup.find('.legendItem').find('.legendText');\r\n\r\n            setTimeout(() => {\r\n                helpers.assertFontSizeMatch(legendTitle.css('font-size'), labelFontSize);\r\n                helpers.assertFontSizeMatch(legendText.css('font-size'), labelFontSize);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('NaN in values shows a warning', (done) => {\r\n            let warningSpy = jasmine.createSpy('warning');\r\n            hostServices.setWarnings = warningSpy;\r\n\r\n            let dataChangedOptions = getOptionsForValueWarnings([NaN, 120]);\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                expect(warningSpy.calls.argsFor(0)[0][0].code).toBe('NaNNotSupported');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Negative Infinity in values shows a warning', (done) => {\r\n            let warningSpy = jasmine.createSpy('warning');\r\n            hostServices.setWarnings = warningSpy;\r\n\r\n            let dataChangedOptions = getOptionsForValueWarnings([Number.NEGATIVE_INFINITY, 120]);\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                expect(warningSpy.calls.argsFor(0)[0][0].code).toBe('InfinityValuesNotSupported');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Positive Infinity in values shows a warning', (done) => {\r\n            let warningSpy = jasmine.createSpy('warning');\r\n            hostServices.setWarnings = warningSpy;\r\n\r\n            let dataChangedOptions = getOptionsForValueWarnings([Number.POSITIVE_INFINITY, 120]);\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Out of range value in values shows a warning', (done) => {\r\n            let warningSpy = jasmine.createSpy('warning');\r\n            hostServices.setWarnings = warningSpy;\r\n\r\n            let dataChangedOptions = getOptionsForValueWarnings([1e301, 120]);\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('All okay in values does not show a warning', (done) => {\r\n            let warningSpy = jasmine.createSpy('warning');\r\n            hostServices.setWarnings = warningSpy;\r\n\r\n            let dataChangedOptions = getOptionsForValueWarnings([300, 120]);\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalledWith([]);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        function getOptionsForValueWarnings(values: number[]) {\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef]\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: values,\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }],\r\n                            [seriesColumnRef],\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            return dataChangedOptions;\r\n        }\r\n\r\n        it('labels should be visible by default',(done) => {\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef]\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            [seriesColumnRef],\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .minorLabel').css('opacity')).toBe('1');\r\n                expect($('.treemap .labels .majorLabel').css('opacity')).toBe('1');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('labels should be visible',(done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: true },\r\n                categoryLabels: { show: true }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields:[categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .minorLabel').css('opacity')).toBe('1');\r\n                expect($('.treemap .labels .majorLabel').css('opacity')).toBe('1');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('labels should be hidden',(done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: false },\r\n                categoryLabels: { show: false }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .minorLabel').length).toEqual(0);\r\n                expect($('.treemap .labels .majorLabel').length).toEqual(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Verify values when labels are on and categoryLabels are on', (done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: true, labelPrecision: 0 },\r\n                categoryLabels: { show: true } // in progress\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryColumn.columns[1],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .majorLabel').length).toEqual(2);\r\n                expect($('.treemap .labels .minorLabel').first().text()).toBe('110');\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('120');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Verify values when labels are on and categoryLabels are on with slices', (done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: true, labelPrecision: 0 },\r\n                categoryLabels: { show: true }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .majorLabel').length).toEqual(2);\r\n                expect($('.treemap .labels .minorLabel').first().text()).toBe('201501 110');\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('201503 320');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Verify values when labels are on and categoryLabels are off', (done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: true, labelPrecision: 0 },\r\n                categoryLabels: { show: false }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .majorLabel').length).toEqual(0);\r\n                expect($('.treemap .labels .minorLabel').first().text()).toBe('110');\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('320');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Verify values when labels are off and categoryLabels are on', (done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: false },\r\n                categoryLabels: { show: true }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .majorLabel').length).toEqual(2);\r\n                expect($('.treemap .labels .minorLabel').first().text()).toBe('201501');\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('201503');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Verify values for labels with display units and precision', (done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: true, labelDisplayUnits: 1000000, labelPrecision: 3 },\r\n                categoryLabels: { show: false }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110000, 120000],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210000, 220000],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310000, 320000],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .minorLabel').length).toEqual(6);\r\n                expect($('.treemap .labels .minorLabel').first().text()).toBe('0.110M');\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('0.320M');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Verify values for labels with display units and no precision', (done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: true, labelDisplayUnits: 1000000, labelPrecision: 0 },\r\n                categoryLabels: { show: false }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110000, 120000],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210000, 220000],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310000, 320000],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .minorLabel').length).toEqual(6);\r\n                expect($('.treemap .labels .minorLabel').first().text()).toBe('0M');\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('0M');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Verify values for labels without display units and precision', (done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: true, labelDisplayUnits: 0, labelPrecision: 2 },\r\n                categoryLabels: { show: false }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110.123, 120.123],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210.234, 220.234],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310.345, 320.345],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .minorLabel').length).toEqual(6);\r\n                expect($('.treemap .labels .minorLabel').first().text()).toBe('110.12');\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('320.35');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Verify values for labels without display units and no precision', (done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: true, labelDisplayUnits: 0, labelPrecision: 0 },\r\n                categoryLabels: { show: false }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .minorLabel').length).toEqual(6);\r\n                expect($('.treemap .labels .minorLabel').first().text()).toBe('110');\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('320');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('hidden labels with highlights dom validation',(done) => {\r\n\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: false },\r\n                categoryLabels: { show: false }\r\n            };\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity(\"Drama\"),\r\n                mocks.dataViewScopeIdentity(\"Comedy\"),\r\n                mocks.dataViewScopeIdentity(\"Documentary\"),\r\n            ];\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['Drama', 'Comedy', 'Documentary'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[1],\r\n                                values: [110, 120, 130],\r\n                                highlights: [60, 80, 20]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .labels .majorLabel').length).toBe(0);\r\n                expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('labels color should changed from settings',(done) => {\r\n\r\n            let colorRgb = 'rgb(120,110,100)';\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: {\r\n                    color: { solid: { color: colorRgb } },\r\n                    show: true,\r\n                },\r\n                categoryLabels: { show: true }\r\n            };\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                let minorActualColor = $('.treemap .labels .minorLabel').css('fill');\r\n                let majorActualColor = $('.treemap .labels .majorLabel').css('fill');\r\n\r\n                helpers.assertColorsMatch(minorActualColor, colorRgb);\r\n                helpers.assertColorsMatch(majorActualColor, colorRgb);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"Enumerate Objects\",() => {\r\n        let v: powerbi.IVisual, element: JQuery;\r\n        \r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            v = powerbi.visuals.visualPluginFactory.create().getPlugin('treemap').create();\r\n            v.init({\r\n                element: element,\r\n                host: powerbitests.mocks.createVisualHostServices(),\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true }\r\n            });\r\n        });\r\n\r\n        it('Check basic enumeration',(done) => {\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                let points = <VisualObjectInstanceEnumerationObject>v.enumerateObjectInstances({ objectName: 'dataPoint' });\r\n                expect(points.instances.length).toBe(2);\r\n                expect(points.instances[0].displayName).toEqual('The Nuthatches');\r\n                expect(points.instances[0].properties['fill']).toBeDefined();\r\n                expect(points.instances[1].displayName).toEqual('Skylarks');\r\n                expect(points.instances[1].properties['fill']).toBeDefined();\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    function treemapDomValidation(hasLegendObject: boolean) {\r\n        let v: powerbi.IVisual;\r\n        let element: JQuery;\r\n        let hostServices: powerbi.IVisualHostServices;\r\n\r\n        if (hasLegendObject) {\r\n            dataViewMetadataCategorySeriesColumns.objects = { legend: { show: true } };\r\n        }\r\n        else {\r\n            dataViewMetadataCategorySeriesColumns.objects = undefined;\r\n        }\r\n\r\n        beforeEach(() => {\r\n            hostServices = mocks.createVisualHostServices();\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            v = powerbi.visuals.visualPluginFactory.create().getPlugin('treemap').create();\r\n            v.init({\r\n                element: element,\r\n                host: hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true }\r\n            });\r\n        });\r\n\r\n        it('treemap categories and series dom validation', (done) => {\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: false },\r\n                categoryLabels: { show: true }\r\n            };\r\n\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            let renderLegend = dataViewMetadataCategorySeriesColumns.objects && dataViewMetadataCategorySeriesColumns.objects['legend'];\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(6);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                expect($('.treemap .labels .majorLabel').last().text()).toBe('Skylarks');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(6);\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('201503');\r\n                if (renderLegend) {\r\n                    expect($('.legend .item').length).toBe(2);\r\n                    expect($('.legend .item').first().text()).toBe('The Nuthatches');\r\n                    expect($('.legend .title').text()).toBe('Squad');\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and series onDataChanged dom validation', (done) => {\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: false },\r\n                categoryLabels: { show: true }\r\n            };\r\n\r\n            let initialDataViews: DataView[] = [{\r\n                metadata: dataViewMetadataCategorySeriesColumns,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                        values: ['The Nuthatches', 'Skylarks'],\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentity('a'),\r\n                            mocks.dataViewScopeIdentity('b'),\r\n                        ],\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                            values: [110, 120],\r\n                            identity: mocks.dataViewScopeIdentity('201501'),\r\n                        }, {\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                            values: [210, 220],\r\n                            identity: mocks.dataViewScopeIdentity('201502'),\r\n                        }, {\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                            values: [310, 320],\r\n                            identity: mocks.dataViewScopeIdentity('201503'),\r\n                        }],\r\n                        undefined,\r\n                        dataViewMetadataCategorySeriesColumns.columns[1])\r\n                }\r\n            }];\r\n            let updatedMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Squad', queryName: 'select0', properties: { \"Category\": true }, type: dataTypeString },\r\n                    { displayName: 'Period', queryName: 'select0', properties: { \"Series\": true }, type: dataTypeNumber },\r\n                    { displayName: null, groupName: '201503', isMeasure: true, properties: { \"Y\": true }, type: dataTypeNumber },\r\n                    { displayName: null, groupName: '201504', isMeasure: true, properties: { \"Y\": true }, type: dataTypeNumber }\r\n                ]\r\n            };\r\n\r\n            updatedMetadata.objects = {\r\n                labels: { show: false },\r\n                categoryLabels: { show: true }\r\n            };\r\n\r\n            let updatedDataViews: DataView[] = [{\r\n                metadata: updatedMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: updatedMetadata.columns[0],\r\n                        values: ['The Nuthatches', 'OddOneOut'],\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentity('a'),\r\n                            mocks.dataViewScopeIdentity('b'),\r\n                        ],\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: updatedMetadata.columns[2],\r\n                            values: [210, 220],\r\n                            identity: mocks.dataViewScopeIdentity('201503'),\r\n                        }, {\r\n                            source: updatedMetadata.columns[3],\r\n                            values: [310, 320],\r\n                            identity: mocks.dataViewScopeIdentity('201504'),\r\n                        }],\r\n                        undefined,\r\n                        dataViewMetadataCategorySeriesColumns.columns[1])\r\n                }\r\n            }];\r\n            v.onDataChanged({ dataViews: initialDataViews });\r\n\r\n            let renderLegend = dataViewMetadataCategorySeriesColumns.objects && dataViewMetadataCategorySeriesColumns.objects['legend'];\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(6);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                expect($('.treemap .labels .majorLabel').last().text()).toBe('Skylarks');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(6);\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('201503');\r\n                if (renderLegend) {\r\n                    expect($('.legend .item').length).toBe(2);\r\n                    expect($('.legend .item').first().text()).toBe('The Nuthatches');\r\n                    expect($('.legend .item').last().text()).toBe('Skylarks');\r\n                    expect($('.legend .title').text()).toBe('Squad');\r\n                }\r\n                v.onDataChanged({ dataViews: updatedDataViews });\r\n                setTimeout(() => {\r\n                    expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                    expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                    expect($('.treemap .shapes .nodeGroup').length).toBe(4);\r\n                    expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                    expect($('.treemap .labels .majorLabel').last().text()).toBe('OddOneOut');\r\n                    expect($('.treemap .labels .minorLabel').length).toBe(4);\r\n                    expect($('.treemap .labels .minorLabel').last().text()).toBe('201504');\r\n                    if (renderLegend) {\r\n                        expect($('.legend .item').first().text()).toBe('The Nuthatches');\r\n                        expect($('.legend .item').last().text()).toBe('OddOneOut');\r\n                        expect($('.legend .title').text()).toBe('Squad');\r\n                    }\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and series onResize from small to medium tile dom validation', (done) => {\r\n            let onDataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('a'),\r\n                                mocks.dataViewScopeIdentity('b'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: mocks.dataViewScopeIdentity('201501'),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: mocks.dataViewScopeIdentity('201502'),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: mocks.dataViewScopeIdentity('201503'),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(onDataChangedOptions);\r\n\r\n            v.onResizing({\r\n                height: 100,\r\n                width: 200\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(6);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                expect($('.treemap .labels .minorLabel').length).toBe(4);\r\n                v.onResizing({ height: 300, width: 300 });\r\n                setTimeout(() => {\r\n                    expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                    expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                    expect($('.treemap .shapes .nodeGroup').length).toBe(6);\r\n                    expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                    expect($('.treemap .labels .minorLabel').length).toBe(6);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and measure dom validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategoryColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategoryColumn.columns[0],\r\n                            values: ['Drama', 'Comedy', 'Documentary'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('a'),\r\n                                mocks.dataViewScopeIdentity('b'),\r\n                                mocks.dataViewScopeIdentity('c'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryColumn.columns[1],\r\n                                values: [110, 120, 130]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(3);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(0);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(3);\r\n                expect($('.treemap .labels .majorLabel').last().text()).toBe('Documentary');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap culls invisible rectangles dom validation', (done) => {\r\n            spyOn(hostServices, 'setWarnings').and.callThrough();\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategoryColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategoryColumn.columns[0],\r\n                            values: ['Drama', 'Comedy', 'Documentary'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('a'),\r\n                                mocks.dataViewScopeIdentity('b'),\r\n                                mocks.dataViewScopeIdentity('c'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryColumn.columns[1],\r\n                                values: [110, 120, 0.000000001]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(0);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                expect($('.treemap .labels .majorLabel').last().text()).toBe('Comedy');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and measure with highlights dom validation', (done) => {\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity(\"Drama\"),\r\n                mocks.dataViewScopeIdentity(\"Comedy\"),\r\n                mocks.dataViewScopeIdentity(\"Documentary\"),\r\n            ];\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategoryColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategoryColumn.columns[0],\r\n                            values: ['Drama', 'Comedy', 'Documentary'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryColumn.columns[1],\r\n                                values: [110, 120, 130],\r\n                                highlights: [60, 80, 20]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(6);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(0);\r\n                expect($('.treemap .shapes .parentGroup.treemapNodeHighlight').length).toBe(3);\r\n                expect($('.treemap .shapes .nodeGroup.treemapNodeHighlight').length).toBe(0);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(3);\r\n                expect($('.treemap .labels .majorLabel').last().text()).toBe('Documentary');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and measure with overflowing highlights dom validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategoryColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategoryColumn.columns[0],\r\n                            values: ['Drama', 'Comedy', 'Documentary'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('a'),\r\n                                mocks.dataViewScopeIdentity('b'),\r\n                                mocks.dataViewScopeIdentity('c'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryColumn.columns[1],\r\n                                values: [110, 120, 130],\r\n                                highlights: [140, 160, 135]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(3);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(0);\r\n                expect($('.treemap .shapes .parentGroup.treemapNodeHighlight').length).toBe(0);\r\n                expect($('.treemap .shapes .nodeGroup.treemapNodeHighlight').length).toBe(0);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(3);\r\n                expect($('.treemap .labels .majorLabel').last().text()).toBe('Documentary');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and measures with highlights dom validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategoryAndMeasures,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategoryAndMeasures.columns[0],\r\n                            values: ['Front end', 'Back end'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('f'),\r\n                                mocks.dataViewScopeIdentity('b'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryAndMeasures.columns[1],\r\n                                values: [110, 120],\r\n                                highlights: [60, 60]\r\n                            }, {\r\n                                source: dataViewMetadataCategoryAndMeasures.columns[2],\r\n                                values: [210, 220],\r\n                                highlights: [140, 200]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(8);\r\n                expect($('.treemap .shapes .parentGroup.treemapNodeHighlight').length).toBe(0);\r\n                expect($('.treemap .shapes .nodeGroup.treemapNodeHighlight').length).toBe(4);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                expect($('.treemap .labels .majorLabel').last().text()).toBe('Back end');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(4);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and measure onDataChanged dom validation', (done) => {\r\n            let initialDataViews: DataView[] = [{\r\n                metadata: dataViewMetadataCategoryColumn,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataCategoryColumn.columns[0],\r\n                        values: ['Drama', 'Comedy', 'Documentary'],\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentity('a'),\r\n                            mocks.dataViewScopeIdentity('b'),\r\n                            mocks.dataViewScopeIdentity('c'),\r\n                        ],\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataCategoryColumn.columns[1],\r\n                            values: [110, 120, 130]\r\n                        }])\r\n                }\r\n            }];\r\n            let updatedDataViews: DataView[] = [{\r\n                metadata: dataViewMetadataCategoryColumn,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataCategoryColumn.columns[0],\r\n                        values: ['Comedy', 'Documentary'],\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentity('b'),\r\n                            mocks.dataViewScopeIdentity('c'),\r\n                        ],\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataCategoryColumn.columns[1],\r\n                            values: [120, 130]\r\n                        }])\r\n                }\r\n            }];\r\n\r\n            v.onDataChanged({ dataViews: initialDataViews });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(3);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(0);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(3);\r\n                expect($('.treemap .labels .majorLabel').first().text()).toBe('Drama');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                v.onDataChanged({ dataViews: updatedDataViews });\r\n                setTimeout(() => {\r\n                    expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                    expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                    expect($('.treemap .shapes .nodeGroup').length).toBe(0);\r\n                    expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                    expect($('.treemap .labels .majorLabel').first().text()).toBe('Comedy');\r\n                    expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and measure onResize from small to medium tile dom validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategoryColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategoryColumn.columns[0],\r\n                            values: ['Drama', 'Comedy', 'Documentary'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('a'),\r\n                                mocks.dataViewScopeIdentity('b'),\r\n                                mocks.dataViewScopeIdentity('c'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryColumn.columns[1],\r\n                                values: [110, 120, 130]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            v.onResizing({\r\n                height: 100,\r\n                width: 200\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(3);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(0);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(3);\r\n                expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                v.onResizing({ height: 300, width: 300 });\r\n                setTimeout(() => {\r\n                    expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                    expect($('.treemap .shapes .parentGroup').length).toBe(3);\r\n                    expect($('.treemap .shapes .nodeGroup').length).toBe(0);\r\n                    expect($('.treemap .labels .majorLabel').length).toBe(3);\r\n                    expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap category and measure labeling validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategoryColumnAndLongText,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategoryColumnAndLongText.columns[0],\r\n                            values: ['Very very long value'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('a'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryColumnAndLongText.columns[1],\r\n                                values: [100]\r\n                            }, {\r\n                                source: dataViewMetadataCategoryColumnAndLongText.columns[2],\r\n                                values: [100]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            v.onResizing({\r\n                height: 12,\r\n                width: 100\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(1);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(2);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(0);\r\n                expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                v.onResizing({ height: 24, width: 100 });\r\n                setTimeout(() => {\r\n                    expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                    expect($('.treemap .shapes .parentGroup').length).toBe(1);\r\n                    expect($('.treemap .shapes .nodeGroup').length).toBe(2);\r\n                    expect($('.treemap .labels .majorLabel').length).toBe(1);\r\n                    expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                    expect($('.treemap .labels .majorLabel').first().text().length).toBeGreaterThan(0);\r\n                    v.onResizing({ height: 32, width: 200 });\r\n                    setTimeout(() => {\r\n                        expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                        expect($('.treemap .shapes .parentGroup').length).toBe(1);\r\n                        expect($('.treemap .shapes .nodeGroup').length).toBe(2);\r\n                        expect($('.treemap .labels .majorLabel').length).toBe(1);\r\n                        expect($('.treemap .labels .minorLabel').length).toBe(0);\r\n                        expect($('.treemap .labels .majorLabel').first().text().length).toBeGreaterThan(0);\r\n                        v.onResizing({ height: 64, width: 200 });\r\n                        setTimeout(() => {\r\n                            expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                            expect($('.treemap .shapes .parentGroup').length).toBe(1);\r\n                            expect($('.treemap .shapes .nodeGroup').length).toBe(2);\r\n                            expect($('.treemap .labels .majorLabel').length).toBe(1);\r\n                            expect($('.treemap .labels .majorLabel').first().text().length).toBeGreaterThan(0);\r\n                            expect($('.treemap .labels .minorLabel').length).toBe(2);\r\n                            expect($('.treemap .labels .minorLabel').first().text().length).toBeGreaterThan(0);\r\n                            expect($('.treemap .labels .minorLabel').last().text().length).toBeGreaterThan(0);\r\n                            done();\r\n                        }, DefaultWaitForRender);\r\n                    }, DefaultWaitForRender);\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap same category and series dom validation', (done) => {\r\n            dataViewMetadataCategorySeriesColumns.objects = {\r\n                labels: { show: false },\r\n                categoryLabels: { show: true }\r\n            };\r\n            let categoryIdentities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('201501'),\r\n                mocks.dataViewScopeIdentity('201502'),\r\n            ];\r\n            let seriesIdentities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('201501'),\r\n                mocks.dataViewScopeIdentity('201502'),\r\n            ];\r\n\r\n            let onDataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['201501', '201502'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, null],\r\n                                identity: seriesIdentities[0],\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [null, 220],\r\n                                identity: seriesIdentities[1],\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(onDataChangedOptions);\r\n\r\n            let renderLegend = dataViewMetadataCategorySeriesColumns.objects && dataViewMetadataCategorySeriesColumns.objects['legend'];\r\n\r\n            setTimeout(() => {\r\n                expect($('.treemap .shapes .rootNode').length).toBe(1);\r\n                expect($('.treemap .shapes .parentGroup').length).toBe(2);\r\n                expect($('.treemap .shapes .nodeGroup').length).toBe(2);\r\n                expect($('.treemap .labels .majorLabel').length).toBe(2);\r\n                expect($('.treemap .labels .majorLabel').last().text()).toBe('201502');\r\n                expect($('.treemap .labels .minorLabel').length).toBe(2);\r\n                expect($('.treemap .labels .minorLabel').last().text()).toBe('201502');\r\n                if (renderLegend) {\r\n                    expect($('.legend .item').length).toBe(2);\r\n                    expect($('.legend .item').first().text()).toBe('201502');\r\n                    expect($('.legend .title').text()).toBe('Squad');\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        if (hasLegendObject) {\r\n            it('legend formatting', (done) => {\r\n\r\n                let dataView = {\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                };\r\n\r\n                // Check legend should show, if show is undefined\r\n                dataView.metadata.objects = { legend: {} };\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [dataView]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    expect($('.legendItem')).toBeInDOM();\r\n                    \r\n                    //change legend position\r\n                    dataView.metadata.objects = { legend: { show: true } };\r\n                    v.onDataChanged({\r\n                        dataViews: [dataView]\r\n                    });\r\n\r\n                    setTimeout(() => {\r\n                        expect($('.legendItem')).toBeInDOM();\r\n                        \r\n                        //change legend position\r\n                        dataView.metadata.objects = { legend: { show: true, position: 'Right' } };\r\n                        v.onDataChanged({\r\n                            dataViews: [dataView]\r\n                        });\r\n\r\n                        setTimeout(() => {\r\n                            expect($('.legendItem')).toBeInDOM();\r\n\r\n                            dataView.metadata.objects = { legend: { show: true, position: 'TopCenter', showTitle: true } };\r\n                            v.onDataChanged({\r\n                                dataViews: [dataView]\r\n                            });\r\n                            setTimeout(() => {\r\n                                expect($('#legendGroup').attr('transform')).toBeDefined();\r\n\r\n                                //set title\r\n                                let testTitle = 'Test Title';\r\n                                dataView.metadata.objects = { legend: { show: true, position: 'Right', showTitle: true, titleText: testTitle } };\r\n                                v.onDataChanged({\r\n                                    dataViews: [dataView]\r\n                                });\r\n                                setTimeout(() => {\r\n\r\n                                    expect($('.legendItem')).toBeInDOM();\r\n                                    expect(helpers.findElementText($('.legendTitle'))).toBe(testTitle);\r\n                                    expect(helpers.findElementTitle($('.legendTitle'))).toBe(testTitle);\r\n                                    expect($('#legendGroup').attr('transform')).not.toBeDefined();\r\n\r\n                                    //hide legend\r\n                                    dataView.metadata.objects = { legend: { show: false, position: 'Right' } };\r\n                                    v.onDataChanged({\r\n                                        dataViews: [dataView]\r\n                                    });\r\n                                    setTimeout(() => {\r\n                                        expect($('.legendItem')).not.toBeInDOM();\r\n                                        done();\r\n                                    }, DefaultWaitForRender);\r\n                                }, DefaultWaitForRender);\r\n                            }, DefaultWaitForRender);\r\n                        }, DefaultWaitForRender);\r\n                    }, DefaultWaitForRender);\r\n                }, DefaultWaitForRender);\r\n            });\r\n        }\r\n    };\r\n\r\n    describe(\"Treemap DOM validation\", () => treemapDomValidation(false));\r\n    describe(\"Treemap DOM validation - with legend\", () => treemapDomValidation(true));\r\n\r\n    describe(\"treemap web animation\",() => {\r\n        let v: powerbi.IVisual, element: JQuery;\r\n\r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            v = powerbi.visuals.visualPluginFactory.createMinerva({}).getPlugin('treemap').create();\r\n            v.init({\r\n                element: element,\r\n                host: powerbitests.mocks.createVisualHostServices(),\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true }\r\n            });\r\n        });\r\n\r\n        it('treemap highlight animation', (done) => {\r\n            let noHighlightsDataViews = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            let highlightsDataViewsA = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                highlights: [60, 70],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                highlights: [160, 170],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                highlights: [260, 270],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            let highlightsDataViewsB = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                highlights: [20, 10],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                highlights: [120, 110],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                highlights: [220, 210],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            v.onDataChanged(noHighlightsDataViews);\r\n            setTimeout(() => {\r\n                let svgInit = $('.treemap');\r\n                let initialHeight = svgInit.attr('height'), initialWidth = svgInit.attr('width');\r\n\r\n                let animator = <powerbi.visuals.WebTreemapAnimator>(<Treemap>v).animator;\r\n                spyOn(animator, 'animate').and.callThrough();\r\n\r\n                v.onDataChanged(highlightsDataViewsA);\r\n                v.onDataChanged(highlightsDataViewsB);\r\n                v.onDataChanged(noHighlightsDataViews);\r\n\r\n                expect(animator).toBeTruthy();\r\n                expect(animator.animate).toHaveBeenCalled();\r\n\r\n                setTimeout(() => {\r\n                    let svg = $('.treemap');\r\n                    expect(svg).toBeInDOM();\r\n\r\n                    expect(svg.attr('height')).toBe(initialHeight);\r\n                    expect(svg.attr('width')).toBe(initialWidth);\r\n\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap highlight animation - suppressAnimations', (done) => {\r\n            let noHighlightsDataViews = {\r\n                suppressAnimations: true,\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            let highlightsDataViewsA = {\r\n                suppressAnimations: true,\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                highlights: [60, 70],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                highlights: [160, 170],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                highlights: [260, 270],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            let highlightsDataViewsB = {\r\n                suppressAnimations: true,\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['The Nuthatches', 'Skylarks'],\r\n                            identity: [\r\n                                mocks.dataViewScopeIdentity('The Nuthatches'),\r\n                                mocks.dataViewScopeIdentity('Skylarks'),\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                highlights: [20, 10],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201501')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                highlights: [120, 110],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201502')),\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                highlights: [220, 210],\r\n                                identity: data.createDataViewScopeIdentity(SQExprBuilder.text('201503')),\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            v.onDataChanged(noHighlightsDataViews);\r\n            setTimeout(() => {\r\n                let svgInit = $('.treemap');\r\n                let initialHeight = svgInit.attr('height'), initialWidth = svgInit.attr('width');\r\n\r\n                let animator = <powerbi.visuals.WebTreemapAnimator>(<Treemap>v).animator;\r\n                spyOn(animator, 'animate').and.callThrough();\r\n\r\n                v.onDataChanged(highlightsDataViewsA);\r\n                v.onDataChanged(highlightsDataViewsB);\r\n                v.onDataChanged(noHighlightsDataViews);\r\n\r\n                expect(animator).toBeTruthy();\r\n                expect(animator.animate).not.toHaveBeenCalled();\r\n\r\n                setTimeout(() => {\r\n                    let svg = $('.treemap');\r\n                    expect(svg).toBeInDOM();\r\n\r\n                    expect(svg.attr('height')).toBe(initialHeight);\r\n                    expect(svg.attr('width')).toBe(initialWidth);\r\n\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"treemap interactivity\",() => {\r\n        let v: powerbi.IVisual, element: JQuery;\r\n        let hostServices: powerbi.IVisualHostServices;\r\n        let defaultOpacity = '';\r\n        let dimmedOpacity = Treemap.DimmedShapeOpacity.toString();\r\n\r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            hostServices = mocks.createVisualHostServices();\r\n            v = powerbi.visuals.visualPluginFactory.createMinerva({ dataDotChartEnabled: false, heatMap: false,}).getPlugin('treemap').create();\r\n            v.init({\r\n                element: element,\r\n                host: hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true },\r\n                interactivity: { selection: true }\r\n            });\r\n        });\r\n\r\n        it('treemap categories and series - single select', (done) => {\r\n            let categoryIdentities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n            ];\r\n            let seriesIdentities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('201501'),\r\n                mocks.dataViewScopeIdentity('201502'),\r\n                mocks.dataViewScopeIdentity('201503'),\r\n            ];\r\n            let onDataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['A', 'B'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: seriesIdentities[0],\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: seriesIdentities[1],\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: seriesIdentities[2],\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(onDataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                let rootShape = $('.treemap .shapes .rootNode');\r\n                let shapes = $('.treemap .shapes .parentGroup');\r\n                let nestedShapes = $('.treemap .shapes .nodeGroup');\r\n\r\n                spyOn(hostServices, 'onSelect').and.callThrough();\r\n\r\n                // Select a major label\r\n                (<any>$('.majorLabel')).first().d3Click(0, 0);\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[4].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[5].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [categoryIdentities[0]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: { 'select0': categoryIdentities[0] }\r\n                            }\r\n                        ]\r\n                    });\r\n                (<any>$('.majorLabel')).first().d3Click(0, 0);\r\n                \r\n                // Select the first nested shape\r\n                (<any>$('.nodeGroup')).first().d3Click(0, 0);\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[4].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[5].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [categoryIdentities[0], seriesIdentities[0]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: { 'select0': categoryIdentities[0], 'select1': seriesIdentities[0] }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                // Select the last minor label\r\n                (<any>$('.minorLabel')).last().d3Click(0, 0);\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[4].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[5].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [categoryIdentities[1], seriesIdentities[2]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: { 'select0': categoryIdentities[1], 'select1': seriesIdentities[2] }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                (<any>$('.minorLabel')).last().d3Click(0, 0);\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[4].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[5].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(hostServices.onSelect).toHaveBeenCalledWith({ data: [] });\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap categories and measures - single click on category node (parent shape must be selectable)', (done) => {\r\n            let identities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('f'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n            ];\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategoryAndMeasures,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategoryAndMeasures.columns[0],\r\n                            values: ['Front end', 'Back end'],\r\n                            identity: identities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategoryAndMeasures.columns[1],\r\n                                values: [110, 120]\r\n                            }, {\r\n                                source: dataViewMetadataCategoryAndMeasures.columns[2],\r\n                                values: [210, 220]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let rootShape = $('.treemap .shapes .rootNode');\r\n                let shapes = $('.treemap .shapes .parentGroup');\r\n                let nestedShapes = $('.treemap .shapes .nodeGroup');\r\n\r\n                expect(shapes[0].style.fill).toBe(CssConstants.noneValue);\r\n                expect(shapes[1].style.fill).toBe(CssConstants.noneValue);\r\n                expect(nestedShapes[0].style.fill).not.toBe(CssConstants.noneValue);\r\n                expect(nestedShapes[1].style.fill).not.toBe(CssConstants.noneValue);\r\n                expect(nestedShapes[2].style.fill).not.toBe(CssConstants.noneValue);\r\n                expect(nestedShapes[3].style.fill).not.toBe(CssConstants.noneValue);\r\n\r\n                spyOn(hostServices, 'onSelect').and.callThrough();\r\n\r\n                // Select the shape for the second category instance\r\n                (<any>$('.parentGroup')).last().d3Click(0, 0);\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [identities[1]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: { 'select0': identities[1] }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        // Disabling due to changes in how we handle selection breaking the preservation of selection across data view changes.  Bug filed as #4904881\r\n        /*it('treemap categories and series onDataChanged - single click on old and new shapes', (done) => {\r\n            let categoryIdentities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n            ];\r\n\r\n            let initialDataViews: DataView[] = [{\r\n                metadata: dataViewMetadataCategorySeriesColumns,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                        values: ['A', 'B'],\r\n                        identity: categoryIdentities\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                            values: [110, 120],\r\n                            identity: mocks.dataViewScopeIdentity('201501'),\r\n                        }, {\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                            values: [210, 220],\r\n                            identity: mocks.dataViewScopeIdentity('201502'),\r\n                        }, {\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                            values: [310, 320],\r\n                            identity: mocks.dataViewScopeIdentity('201503'),\r\n                        }],\r\n                        undefined,\r\n                        dataViewMetadataCategorySeriesColumns.columns[1])\r\n                }\r\n            }];\r\n            let updatedMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Squad', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                    { displayName: 'Period', properties: { \"Series\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: '201503', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: '201504', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let updatedDataViewsSeriesIdentities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('201503'),\r\n                mocks.dataViewScopeIdentity('201504'),\r\n            ];\r\n            let updatedDataViews: DataView[] = [{\r\n                metadata: updatedMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: updatedMetadata.columns[0],\r\n                        values: ['A', 'B'],\r\n                        identity: categoryIdentities\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: updatedMetadata.columns[2],\r\n                            values: [210, 220],\r\n                            identity: updatedDataViewsSeriesIdentities[0],\r\n                        }, {\r\n                            source: updatedMetadata.columns[3],\r\n                            values: [310, 320],\r\n                            identity: updatedDataViewsSeriesIdentities[1],\r\n                        }],\r\n                        undefined,\r\n                        dataViewMetadataCategorySeriesColumns.columns[1])\r\n                }\r\n            }];\r\n\r\n            v.onDataChanged({ dataViews: initialDataViews });\r\n\r\n            setTimeout(() => {\r\n                let rootShape = $('.treemap .shapes .rootNode');\r\n                let shapes = $('.treemap .shapes .parentGroup');\r\n                let nestedShapes = $('.treemap .shapes .nodeGroup');\r\n\r\n                spyOn(hostServices, 'onSelect').and.callThrough();\r\n\r\n                // Make a selection\r\n                (<any>$('.majorLabel')).first().d3Click(0, 0);\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[4].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[5].style.fillOpacity).toBe(dimmedOpacity);\r\n\r\n                // Change data\r\n                v.onDataChanged({ dataViews: updatedDataViews });\r\n                setTimeout(() => {\r\n                    shapes = $('.treemap .shapes .parentGroup');\r\n                    nestedShapes = $('.treemap .shapes .nodeGroup');\r\n\r\n                    expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[1].style.fillOpacity).toBe(dimmedOpacity);\r\n                    expect(nestedShapes[2].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[3].style.fillOpacity).toBe(dimmedOpacity);\r\n\r\n                    // Select a new shape\r\n                    (<any>$('.nodeGroup')).last().d3Click(0, 0);\r\n                    expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[0].style.fillOpacity).toBe(dimmedOpacity);\r\n                    expect(nestedShapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[2].style.fillOpacity).toBe(dimmedOpacity);\r\n                    expect(nestedShapes[3].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(hostServices.onSelect).toHaveBeenCalledWith(\r\n                        {\r\n                            data: [categoryIdentities[1]]\r\n                        });\r\n\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        }); */\r\n\r\n        it('treemap categories and series - selection across resize', (done) => {\r\n            let categoryIdentities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n            ];\r\n            let seriesIdentities: powerbi.DataViewScopeIdentity[] = [\r\n                mocks.dataViewScopeIdentity('201501'),\r\n                mocks.dataViewScopeIdentity('201502'),\r\n                mocks.dataViewScopeIdentity('201503'),\r\n            ];\r\n            let onDataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['A', 'B'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: seriesIdentities[0],\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: seriesIdentities[1],\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: seriesIdentities[2],\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(onDataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                let rootShape = $('.treemap .shapes .rootNode');\r\n                let shapes = $('.treemap .shapes .parentGroup');\r\n                let nestedShapes = $('.treemap .shapes .nodeGroup');\r\n\r\n                spyOn(hostServices, 'onSelect').and.callThrough();\r\n\r\n                // Select a major label\r\n                (<any>$('.majorLabel')).first().d3Click(0, 0);\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[4].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[5].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [categoryIdentities[0]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: { 'select0': categoryIdentities[0] }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                v.onResizing({ width: 300, height: 300 });\r\n\r\n                setTimeout(() => {    \r\n                    // Select a major label\r\n                    expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[2].style.fillOpacity).toBe(defaultOpacity);\r\n                    expect(nestedShapes[3].style.fillOpacity).toBe(dimmedOpacity);\r\n                    expect(nestedShapes[4].style.fillOpacity).toBe(dimmedOpacity);\r\n                    expect(nestedShapes[5].style.fillOpacity).toBe(dimmedOpacity);\r\n\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('treemap external clear selection ', (done) => {\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n            ];\r\n            let seriesIdentities = [\r\n                mocks.dataViewScopeIdentity('201501'),\r\n                mocks.dataViewScopeIdentity('201502'),\r\n                mocks.dataViewScopeIdentity('201503'),\r\n            ];\r\n            let onDataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataCategorySeriesColumns,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataCategorySeriesColumns.columns[0],\r\n                            values: ['A', 'B'],\r\n                            identity: [\r\n                                categoryIdentities[0],\r\n                                categoryIdentities[1],\r\n                            ],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[2],\r\n                                values: [110, 120],\r\n                                identity: seriesIdentities[0]\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[3],\r\n                                values: [210, 220],\r\n                                identity: seriesIdentities[1]\r\n                            }, {\r\n                                source: dataViewMetadataCategorySeriesColumns.columns[4],\r\n                                values: [310, 320],\r\n                                identity: seriesIdentities[2]\r\n                            }],\r\n                            undefined,\r\n                            dataViewMetadataCategorySeriesColumns.columns[1])\r\n                    }\r\n                }]\r\n            };\r\n            v.onDataChanged(onDataChangedOptions);\r\n\r\n            setTimeout(() => {\r\n                let rootShape = $('.treemap .shapes .rootNode');\r\n                let shapes = $('.treemap .shapes .parentGroup');\r\n                let nestedShapes = $('.treemap .shapes .nodeGroup');\r\n\r\n                spyOn(hostServices, 'onSelect').and.callThrough();\r\n\r\n                (<any>$('.nodeGroup')).first().d3Click(0, 0);\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[4].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(nestedShapes[5].style.fillOpacity).toBe(dimmedOpacity);\r\n                expect(hostServices.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [categoryIdentities[0], seriesIdentities[0]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: { 'select0': categoryIdentities[0], 'select1': seriesIdentities[0] }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                v.onClearSelection();\r\n                expect(rootShape[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(shapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[0].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[1].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[2].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[3].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[4].style.fillOpacity).toBe(defaultOpacity);\r\n                expect(nestedShapes[5].style.fillOpacity).toBe(defaultOpacity);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"treemap converter validation\",() => {\r\n\r\n        let viewport: powerbi.IViewport = {\r\n            width: 500,\r\n            height: 500,\r\n        };\r\n\r\n        it('treemap dataView multi measure',() => {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: 'EventCount',\r\n                        queryName: 'EventCount',\r\n                        isMeasure: true,\r\n                        properties: { \"Y\": true },\r\n                        type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n                        objects: { dataPoint: { fill: { solid: { color: 'red' } } } }\r\n                    },\r\n                    {\r\n                        displayName: 'MedalCount',\r\n                        queryName: 'MedalCount',\r\n                        isMeasure: true,\r\n                        properties: { \"Y\": true },\r\n                        type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                    }\r\n                ]\r\n            };\r\n\r\n            let dataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[0],\r\n                            values: [110]\r\n                        }, {\r\n                            source: metadata.columns[1],\r\n                            values: [210]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n            let selectionIds: SelectionId[] = [\r\n                SelectionId.createWithMeasure(\"EventCount\"),\r\n                SelectionId.createWithMeasure(\"MedalCount\"),\r\n            ];\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(2);\r\n            expect(nodes[0].name).toBe('EventCount');\r\n            expect(nodes[0].size).toBe(110);\r\n            expect(nodes[0].children).not.toBeDefined();\r\n            expect((<TreemapNode>nodes[0]).key).toBe(selectionIds[0].getKey());\r\n\r\n            expect(nodes[1].name).toBe('MedalCount');\r\n            expect(nodes[1].size).toBe(210);\r\n            expect(nodes[1].children).not.toBeDefined();\r\n            expect((<TreemapNode>nodes[1]).key).toBe(selectionIds[1].getKey());\r\n\r\n            let shapeColors = nodes.map(n => (<TreemapNode>n).color);\r\n            expect(shapeColors).toEqual(ArrayExtensions.distinct(shapeColors));\r\n            expect(shapeColors[0]).toEqual('red');\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('EventCount');\r\n        });\r\n\r\n        it('treemap dataView multi measure with null values',() => {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'EventCost', queryName: 'EventCost', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double), objects: { general: { formatString: '$0' } } },\r\n                    { displayName: 'MedalCount', queryName: 'MedalCount', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n\r\n            let dataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[0],\r\n                            values: [110]\r\n                        }, {\r\n                            source: metadata.columns[1],\r\n                            values: [null]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n            let selectionIds: SelectionId[] = [\r\n                SelectionId.createWithMeasure(\"EventCost\"),\r\n                SelectionId.createWithMeasure(\"MedalCount\"),\r\n            ];\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(1);\r\n            let node: TreemapNode = <TreemapNode>nodes[0];\r\n\r\n            expect(node.name).toBe('EventCost');\r\n            expect(node.size).toBe(110);\r\n            expect(node.children).not.toBeDefined();\r\n            expect(node.labelFormatString).toBe('$0');\r\n            expect(node.key).toBe(selectionIds[0].getKey());\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('EventCost');\r\n        });\r\n\r\n        it('treemap dataView multi category single measure', () => {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Continent', queryName: 'select0', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                    { displayName: 'EventCost', queryName: 'select1', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double), objects: { general: { formatString: '$0' } } },\r\n                ]\r\n            };\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n                mocks.dataViewScopeIdentity('c'),\r\n                mocks.dataViewScopeIdentity('d'),\r\n                mocks.dataViewScopeIdentity('e'),\r\n            ];\r\n\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: metadata.columns[0],\r\n                        values: ['Africa', 'Asia', 'Australia', 'Europe', 'North America'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[1],\r\n                            values: [110, 120, 130, 140, 150]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(5);\r\n\r\n            let node: TreemapNode = <TreemapNode>nodes[0];\r\n            expect(node.name).toBe('Africa');\r\n            expect(node.size).toBe(110);\r\n            expect(node.labelFormatString).toBe('$0');\r\n            expect(node.children).toBeUndefined();\r\n\r\n            node = <TreemapNode>nodes[1];\r\n            expect(node.name).toBe('Asia');\r\n            expect(node.size).toBe(120);\r\n            expect(node.labelFormatString).toBe('$0');\r\n            expect(node.children).toBeUndefined();\r\n\r\n            node = <TreemapNode>nodes[2];\r\n            expect(node.name).toBe('Australia');\r\n            expect(node.size).toBe(130);\r\n            expect(node.labelFormatString).toBe('$0');\r\n            expect(node.children).toBeUndefined();\r\n\r\n            node = <TreemapNode>nodes[3];\r\n            expect(node.name).toBe('Europe');\r\n            expect(node.size).toBe(140);\r\n            expect(node.labelFormatString).toBe('$0');\r\n            expect(node.children).toBeUndefined();\r\n\r\n            node = <TreemapNode>nodes[4];\r\n            expect(node.name).toBe('North America');\r\n            expect(node.size).toBe(150);\r\n            expect(node.labelFormatString).toBe('$0');\r\n            expect(node.children).toBeUndefined();\r\n\r\n            let shapeColors = nodes.map(n => (<TreemapNode>n).color);\r\n            expect(shapeColors).toEqual(ArrayExtensions.distinct(shapeColors));\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('Continent');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('Africa');\r\n        });\r\n\r\n        it('treemap dataView multi category multi measure', () => {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Continent', queryName: 'select0', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                    { displayName: 'EventCount', queryName: 'select1', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: 'MedalCount', queryName: 'select2', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n                mocks.dataViewScopeIdentity('c'),\r\n                mocks.dataViewScopeIdentity('d'),\r\n                mocks.dataViewScopeIdentity('e'),\r\n            ];\r\n\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: metadata.columns[0],\r\n                        values: ['Africa', 'Asia', 'Australia', 'Europe', 'North America'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[1],\r\n                            values: [110, 120, 130, 140, 150]\r\n                        }, {\r\n                            source: metadata.columns[2],\r\n                            values: [210, 220, 230, 240, 250]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n\r\n            let selectionIds: SelectionId[] = categoryIdentities.map((categoryId) => SelectionId.createWithId(categoryId));\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(5);\r\n\r\n            let node: TreemapNode = <TreemapNode>nodes[0];\r\n            expect(node.name).toBe('Africa');\r\n            expect(node.size).toBe(320);\r\n            expect(node.children).toBeDefined();\r\n            expect(node.children.length).toBe(2);\r\n            expect(node.key).toBe(JSON.stringify({ nodeKey: selectionIds[0].getKey(), depth: 1 }));\r\n\r\n            node = <TreemapNode>nodes[1];\r\n            expect(node.name).toBe('Asia');\r\n            expect(node.size).toBe(340);\r\n            expect(node.children).toBeDefined();\r\n            expect(node.children.length).toBe(2);\r\n            expect(node.key).toBe(JSON.stringify({ nodeKey: selectionIds[1].getKey(), depth: 1 }));\r\n\r\n            node = <TreemapNode>nodes[2];\r\n            expect(node.name).toBe('Australia');\r\n            expect(node.size).toBe(360);\r\n            expect(node.children).toBeDefined();\r\n            expect(node.children.length).toBe(2);\r\n            expect(node.key).toBe(JSON.stringify({ nodeKey: selectionIds[2].getKey(), depth: 1 }));\r\n\r\n            node = <TreemapNode>nodes[3];\r\n            expect(node.name).toBe('Europe');\r\n            expect(node.size).toBe(380);\r\n            expect(node.children).toBeDefined();\r\n            expect(node.children.length).toBe(2);\r\n            expect(node.key).toBe(JSON.stringify({ nodeKey: selectionIds[3].getKey(), depth: 1 }));\r\n\r\n            node = <TreemapNode>nodes[4];\r\n            expect(node.name).toBe('North America');\r\n            expect(node.size).toBe(400);\r\n            expect(node.children).toBeDefined();\r\n            expect(node.children.length).toBe(2);\r\n            expect(node.key).toBe(JSON.stringify({ nodeKey: selectionIds[4].getKey(), depth: 1 }));\r\n\r\n            let childIds = [\r\n                SelectionId.createWithIdAndMeasure(categoryIdentities[4], 'select1'),\r\n                SelectionId.createWithIdAndMeasure(categoryIdentities[4], 'select2'),\r\n            ];\r\n\r\n            let childNode: TreemapNode = <TreemapNode>node.children[0];\r\n            expect(childNode.name).toBe('EventCount');\r\n            expect(childNode.size).toBe(150);\r\n            expect(childNode.children).not.toBeDefined();\r\n            expect((<TreemapNode>childNode).key).toBe(JSON.stringify({ nodeKey: childIds[0].getKey(), depth: 2 }));\r\n            expect(childNode.color).toBe(node.color);\r\n\r\n            childNode = <TreemapNode>node.children[1];\r\n            expect(childNode.name).toBe('MedalCount');\r\n            expect(childNode.size).toBe(250);\r\n            expect(childNode.children).not.toBeDefined();\r\n            expect((<TreemapNode>childNode).key).toBe(JSON.stringify({ nodeKey: childIds[1].getKey(), depth: 2 }));\r\n            expect(childNode.color).toBe(node.color);\r\n\r\n            let shapeColors = nodes.map(n => (<TreemapNode>n).color);\r\n            expect(shapeColors).toEqual(ArrayExtensions.distinct(shapeColors));\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('Continent');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('Africa');\r\n        });\r\n\r\n        it('treemap dataView multi series one measure',() => {\r\n\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Year', queryName: 'select0', properties: { \"Series\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                    { displayName: 'MedalCount', queryName: 'select1', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n                mocks.dataViewScopeIdentity('c'),\r\n            ];\r\n\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: metadata.columns[0],\r\n                        values: ['2004', '2008', '2012'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[1],\r\n                            values: [110, 120, 130]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n            let selectionIds = [\r\n                SelectionId.createWithId(categoryIdentities[0]),\r\n                SelectionId.createWithId(categoryIdentities[2]),\r\n            ];\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(3);\r\n            expect(nodes[0].name).toBe('2004');\r\n            expect(nodes[0].size).toBe(110);\r\n            expect(nodes[0].children).not.toBeDefined();\r\n            expect((<TreemapNode>nodes[0]).key).toBe(JSON.stringify({ nodeKey: selectionIds[0].getKey(), depth: 1 }));\r\n\r\n            expect(nodes[2].name).toBe('2012');\r\n            expect(nodes[2].size).toBe(130);\r\n            expect(nodes[2].children).not.toBeDefined();\r\n            expect((<TreemapNode>nodes[2]).key).toBe(JSON.stringify({ nodeKey: selectionIds[1].getKey(), depth: 1 }));\r\n\r\n            let shapeColors = nodes.map(n => (<TreemapNode>n).color);\r\n            expect(shapeColors).toEqual(ArrayExtensions.distinct(shapeColors));\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('Year');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('2004');\r\n\r\n        });\r\n\r\n        it('treemap dataView multi category/series',() => {\r\n\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { queryName: 'selectA', displayName: 'Continent', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                    { queryName: 'selectB', displayName: 'Year', properties: { \"Series\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { queryName: 'selectC', displayName: null, groupName: '2004', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { queryName: 'selectD', displayName: null, groupName: '2008', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { queryName: 'selectE', displayName: null, groupName: '2012', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n                mocks.dataViewScopeIdentity('c'),\r\n                mocks.dataViewScopeIdentity('d'),\r\n                mocks.dataViewScopeIdentity('e'),\r\n            ];\r\n            let seriesIdentities = [\r\n                mocks.dataViewScopeIdentity(2004),\r\n                mocks.dataViewScopeIdentity(2008),\r\n                mocks.dataViewScopeIdentity(2012),\r\n            ];\r\n\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: metadata.columns[0],\r\n                        values: ['Africa', 'Asia', 'Australia', 'Europe', 'North America'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[2],\r\n                            values: [110, 120, 130, 140, 150],\r\n                            identity: seriesIdentities[0],\r\n                        }, {\r\n                            source: metadata.columns[3],\r\n                            values: [210, 220, 230, 240, 250],\r\n                            identity: seriesIdentities[1],\r\n                        }, {\r\n                            source: metadata.columns[4],\r\n                            values: [310, 320, 330, 340, 350],\r\n                            identity: seriesIdentities[2],\r\n                        }],\r\n                        undefined,\r\n                        metadata.columns[1])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n            let selectionIds: SelectionId[] = [\r\n                SelectionId.createWithId(categoryIdentities[0]),\r\n                SelectionId.createWithId(categoryIdentities[4]),\r\n                SelectionId.createWithIds(categoryIdentities[4], seriesIdentities[2]),\r\n            ];\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(5);\r\n            expect(nodes[0].name).toBe('Africa');\r\n            expect(nodes[0].size).toBe(630);\r\n            expect(nodes[0].children).toBeDefined();\r\n            expect(nodes[0].children.length).toBe(3);\r\n            expect((<TreemapNode>nodes[0]).key).toBe(JSON.stringify({ nodeKey: selectionIds[0].getKey(), depth: 1 }));\r\n\r\n            let lastNode = (<TreemapNode>nodes[4]);\r\n            expect(lastNode.name).toBe('North America');\r\n            expect(lastNode.size).toBe(750);\r\n            expect(lastNode.children).toBeDefined();\r\n            expect(lastNode.children.length).toBe(3);\r\n            expect(lastNode.key).toBe(JSON.stringify({ nodeKey: selectionIds[1].getKey(), depth: 1 }));\r\n\r\n            let childNodes = lastNode.children;\r\n            expect(childNodes[2].name).toBe('2012');\r\n            expect(childNodes[2].size).toBe(350);\r\n            expect(childNodes[2].children).not.toBeDefined();\r\n            expect((<TreemapNode>childNodes[2]).key).toBe(JSON.stringify({ nodeKey: selectionIds[2].getKey(), depth: 2 }));\r\n            childNodes.forEach(n => expect((<TreemapNode>n).color).toBe(lastNode.color));\r\n\r\n            let shapeColors = nodes.map(n => (<TreemapNode>n).color);\r\n            expect(shapeColors).toEqual(ArrayExtensions.distinct(shapeColors));\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('Continent');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('Africa');\r\n        });\r\n\r\n        it('selection state set on converter result', () => {\r\n\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { queryName: 'selectA', displayName: 'Continent', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                    { queryName: 'selectB', displayName: 'Year', properties: { \"Series\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { queryName: 'selectC', displayName: null, groupName: '2004', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { queryName: 'selectD', displayName: null, groupName: '2008', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { queryName: 'selectE', displayName: null, groupName: '2012', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity('a'),\r\n                mocks.dataViewScopeIdentity('b'),\r\n                mocks.dataViewScopeIdentity('c'),\r\n                mocks.dataViewScopeIdentity('d'),\r\n                mocks.dataViewScopeIdentity('e'),\r\n            ];\r\n            let seriesIdentities = [\r\n                mocks.dataViewScopeIdentity(2004),\r\n                mocks.dataViewScopeIdentity(2008),\r\n                mocks.dataViewScopeIdentity(2012),\r\n            ];\r\n\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: metadata.columns[0],\r\n                        values: ['Africa', 'Asia', 'Australia', 'Europe', 'North America'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[2],\r\n                            values: [110, 120, 130, 140, 150],\r\n                            identity: seriesIdentities[0],\r\n                        }, {\r\n                            source: metadata.columns[3],\r\n                            values: [210, 220, 230, 240, 250],\r\n                            identity: seriesIdentities[1],\r\n                        }, {\r\n                            source: metadata.columns[4],\r\n                            values: [310, 320, 330, 340, 350],\r\n                            identity: seriesIdentities[2],\r\n                        }],\r\n                        undefined,\r\n                        metadata.columns[1])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n\r\n            let interactivityService = <powerbi.visuals.InteractivityService>powerbi.visuals.createInteractivityService(powerbitests.mocks.createVisualHostServices());\r\n            let categorySelectionId = SelectionId.createWithId(categoryIdentities[1]);\r\n            interactivityService['selectedIds'] = [categorySelectionId];\r\n\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, interactivityService, viewport);\r\n\r\n            expect(treeMapData.legendData.dataPoints[0].selected).toBe(false);\r\n            expect(treeMapData.legendData.dataPoints[1].selected).toBe(true);\r\n            expect(treeMapData.legendData.dataPoints[2].selected).toBe(false);\r\n            expect(treeMapData.legendData.dataPoints[3].selected).toBe(false);\r\n            expect(treeMapData.legendData.dataPoints[4].selected).toBe(false);\r\n\r\n            let selectedNode = <TreemapNode>treeMapData.root.children[1];\r\n            expect(selectedNode.selected).toBe(true);\r\n            for (let yearNode of selectedNode.children) {\r\n                expect((<TreemapNode>yearNode).selected).toBe(true);\r\n            }\r\n\r\n            let notSelected: TreemapNode[] = [].concat(treeMapData.root.children[0], treeMapData.root.children.slice(2));\r\n            for (let continentNode of notSelected) {\r\n                expect(continentNode.selected).toBe(false);\r\n                for (let yearNode of continentNode.children) {\r\n                    expect((<TreemapNode>yearNode).selected).toBe(false);\r\n                }\r\n            }\r\n        });\r\n\r\n        it('treemap dataView multi category/series with null values',() => {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Continent', queryName: 'select1', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                    { displayName: 'Year', properties: { \"Series\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: null, groupName: '2004', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: null, groupName: '2008', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: null, groupName: '2012', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity(null),\r\n                mocks.dataViewScopeIdentity('b'),\r\n                mocks.dataViewScopeIdentity('c'),\r\n                mocks.dataViewScopeIdentity('d'),\r\n                mocks.dataViewScopeIdentity('e'),\r\n            ];\r\n            let seriesIdentities = [\r\n                mocks.dataViewScopeIdentity(2004),\r\n                mocks.dataViewScopeIdentity(2008),\r\n                mocks.dataViewScopeIdentity(2012),\r\n            ];\r\n\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: metadata.columns[0],\r\n                        values: [null, 'Asia', 'Australia', 'Europe', 'North America'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[2],\r\n                            values: [null, 120, 130, 140, null],\r\n                            identity: seriesIdentities[0],\r\n                        }, {\r\n                            source: metadata.columns[3],\r\n                            values: [210, 220, null, 240, null],\r\n                            identity: seriesIdentities[1],\r\n                        }, {\r\n                            source: metadata.columns[4],\r\n                            values: [null, 320, 330, 340, null],\r\n                            identity: seriesIdentities[2],\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(4);\r\n            expect(nodes[0].name).toBe('(Blank)');\r\n            expect(nodes[0].size).toBe(210);\r\n            expect(nodes[0].children).toBeDefined();\r\n            expect(nodes[0].children.length).toBe(1);\r\n            expect((<TreemapNode>nodes[0]).key).toBe(JSON.stringify({ nodeKey: SelectionId.createWithId(categoryIdentities[0]).getKey(), depth: 1 }));\r\n\r\n            let shapeColors = nodes.map(n => (<TreemapNode>n).color);\r\n            expect(shapeColors).toEqual(ArrayExtensions.distinct(shapeColors));\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('Continent');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('(Blank)');\r\n            expect(treeMapData.legendData.dataPoints[1].label).toBe('Asia');\r\n        });\r\n\r\n        it('treemap dataView multi category/series with null values tooltip data test',() => {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'Continent', properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                    { displayName: 'Year', properties: { \"Series\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: null, groupName: '2004', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: null, groupName: '2008', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: null, groupName: '2012', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let categoryIdentities = [\r\n                mocks.dataViewScopeIdentity(null),\r\n                mocks.dataViewScopeIdentity('b'),\r\n                mocks.dataViewScopeIdentity('c'),\r\n                mocks.dataViewScopeIdentity('d'),\r\n                mocks.dataViewScopeIdentity('e'),\r\n            ];\r\n            let seriesIdentities = [\r\n                mocks.dataViewScopeIdentity(2004),\r\n                mocks.dataViewScopeIdentity(2008),\r\n                mocks.dataViewScopeIdentity(2012),\r\n            ];\r\n\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: metadata.columns[0],\r\n                        values: [null, 'Asia', 'Australia', 'Europe', 'North America'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[2],\r\n                            values: [null, 120, 130, 140, null],\r\n                            identity: seriesIdentities[0],\r\n                        }, {\r\n                            source: metadata.columns[3],\r\n                            values: [210, 220, null, 240, null],\r\n                            identity: seriesIdentities[1],\r\n                        }, {\r\n                            source: metadata.columns[4],\r\n                            values: [null, 320, 330, 340, null],\r\n                            identity: seriesIdentities[2],\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let rootNode = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport).root;\r\n\r\n            let node1: TreemapNode = <TreemapNode>rootNode.children[0];\r\n            let node11: TreemapNode = <TreemapNode>rootNode.children[0].children[0];\r\n            let node2: TreemapNode = <TreemapNode>rootNode.children[1];\r\n            let node3: TreemapNode = <TreemapNode>rootNode.children[2];\r\n            let node4: TreemapNode = <TreemapNode>rootNode.children[3];\r\n\r\n            expect(node1.tooltipInfo).toEqual([{ displayName: \"Continent\", value: \"(Blank)\" }]);\r\n            expect(node11.tooltipInfo).toEqual([{ displayName: \"Continent\", value: \"(Blank)\" }, { displayName: null, value: \"210\" }]);\r\n\r\n            expect(node2.tooltipInfo).toEqual([{ displayName: \"Continent\", value: \"Asia\" }, { displayName: null, value: \"120\" }]);\r\n\r\n            expect(node3.tooltipInfo).toEqual([{ displayName: \"Continent\", value: \"Australia\" }, { displayName: null, value: \"130\" }]);\r\n            expect(node4.tooltipInfo).toEqual([{ displayName: \"Continent\", value: \"Europe\" }, { displayName: null, value: \"140\" }]);\r\n        });\r\n\r\n        it('treemap non-categorical multi-measure tooltip values test',() => {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'a', queryName: 'a', isMeasure: true },\r\n                    { displayName: 'b', queryName: 'b', isMeasure: true },\r\n                    { displayName: 'c', queryName: 'c', isMeasure: true }\r\n                ]\r\n            };\r\n\r\n            let dataView: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: [1],\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [2],\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[2],\r\n                            values: [3],\r\n                        }\r\n                    ])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let rootNode = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport).root;\r\n\r\n            let node1: TreemapNode = <TreemapNode>rootNode.children[0];\r\n            let node2: TreemapNode = <TreemapNode>rootNode.children[1];\r\n            let node3: TreemapNode = <TreemapNode>rootNode.children[2];\r\n\r\n            expect(node1.tooltipInfo).toEqual([{ displayName: 'a', value: '1' }]);\r\n            expect(node2.tooltipInfo).toEqual([{ displayName: 'b', value: '2' }]);\r\n            expect(node3.tooltipInfo).toEqual([{ displayName: 'c', value: '3' }]);\r\n        });\r\n\r\n        it('validate tooltip info not being created when tooltips are disabled', () => {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'a', queryName: 'a', isMeasure: true },\r\n                    { displayName: 'b', queryName: 'b', isMeasure: true },\r\n                    { displayName: 'c', queryName: 'c', isMeasure: true }\r\n                ]\r\n            };\r\n\r\n            let dataView: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: [1],\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [2],\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[2],\r\n                            values: [3],\r\n                        }\r\n                    ])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let rootNode = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport, undefined, false).root;\r\n\r\n            let node1: TreemapNode = <TreemapNode>rootNode.children[0];\r\n            let node2: TreemapNode = <TreemapNode>rootNode.children[1];\r\n            let node3: TreemapNode = <TreemapNode>rootNode.children[2];\r\n\r\n            expect(node1.tooltipInfo).toBeUndefined();\r\n            expect(node2.tooltipInfo).toBeUndefined();\r\n            expect(node3.tooltipInfo).toBeUndefined();\r\n        });\r\n\r\n        it('treemap dataView multi measure',() => {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'EventCount', queryName: 'select1', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                    { displayName: 'MedalCount', queryName: 'select2', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[0],\r\n                            values: [110]\r\n                        }, {\r\n                            source: metadata.columns[1],\r\n                            values: [210]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n\r\n            let selectionIds: SelectionId[] = metadata.columns.map((measure) => SelectionId.createWithMeasure(measure.queryName));\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(2);\r\n\r\n            let node: TreemapNode = <TreemapNode>nodes[0];\r\n            expect(node.name).toBe('EventCount');\r\n            expect(node.size).toBe(110);\r\n            expect(node.children).not.toBeDefined();\r\n            expect(node.key).toBe(selectionIds[0].getKey());\r\n\r\n            node = <TreemapNode>nodes[1];\r\n            expect(node.name).toBe('MedalCount');\r\n            expect(node.size).toBe(210);\r\n            expect(node.children).not.toBeDefined();\r\n            expect(node.key).toBe(selectionIds[1].getKey());\r\n\r\n            let shapeColors = nodes.map(n => (<TreemapNode>n).color);\r\n            expect(shapeColors).toEqual(ArrayExtensions.distinct(shapeColors));\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('EventCount');\r\n            expect(treeMapData.legendData.dataPoints[1].label).toBe('MedalCount');\r\n        });\r\n\r\n        it('treemap dataView single measure',() => {\r\n            let metadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'EventCount', queryName: 'select1', isMeasure: true, properties: { \"Y\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) }\r\n                ]\r\n            };\r\n            let dataView: DataView = {\r\n                metadata: metadata,\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: metadata.columns[0],\r\n                            values: [110],\r\n                        }\r\n                    ]),\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let treeMapData = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport);\r\n            let rootNode = treeMapData.root;\r\n\r\n            let selectionIds: SelectionId[] = metadata.columns.map((measure) => SelectionId.createWithMeasure(measure.queryName));\r\n\r\n            let nodes = rootNode.children;\r\n            expect(nodes.length).toBe(1);\r\n\r\n            let node: TreemapNode = <TreemapNode>nodes[0];\r\n            expect(node.name).toBe('EventCount');\r\n            expect(node.size).toBe(110);\r\n            expect(node.children).not.toBeDefined();\r\n            expect(node.key).toBe(selectionIds[0].getKey());\r\n\r\n            let shapeColors = nodes.map(n => (<TreemapNode>n).color);\r\n            expect(shapeColors).toEqual(ArrayExtensions.distinct(shapeColors));\r\n\r\n            // Legend\r\n            expect(treeMapData.legendData.title).toBe('');\r\n            expect(treeMapData.legendData.dataPoints[0].label).toBe('EventCount');\r\n        });\r\n\r\n        it(\"treemap categories and measures with highlights tooltip data test\", () => {\r\n            let dataView: DataView = {\r\n                metadata: dataViewMetadataCategoryAndMeasures,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataCategoryAndMeasures.columns[0],\r\n                        values: ['Front end', 'Back end'],\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentity('f'),\r\n                            mocks.dataViewScopeIdentity('b'),\r\n                        ],\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadataCategoryAndMeasures.columns[1],\r\n                            values: [110, 120],\r\n                            highlights: [60, 60]\r\n                        }, {\r\n                            source: dataViewMetadataCategoryAndMeasures.columns[2],\r\n                            values: [210, 220],\r\n                            highlights: [140, 200]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let rootNode = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport).root;\r\n            let node1: TreemapNode = <TreemapNode>rootNode.children[0].children[0];\r\n            let node2: TreemapNode = <TreemapNode>rootNode.children[0].children[1];\r\n            let node3: TreemapNode = <TreemapNode>rootNode.children[1].children[0];\r\n            let node4: TreemapNode = <TreemapNode>rootNode.children[1].children[1];\r\n\r\n            expect(node1.tooltipInfo).toEqual([{ displayName: \"Area\", value: \"Front end\" }, { displayName: \"BugsFiled\", value: \"110\" }]);\r\n            expect(node1.highlightedTooltipInfo).toEqual([{ displayName: \"Area\", value: \"Front end\" }, { displayName: \"BugsFiled\", value: \"110\" }, { displayName: powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName, value: \"60\" }]);\r\n\r\n            expect(node2.tooltipInfo).toEqual([{ displayName: \"Area\", value: \"Front end\" }, { displayName: \"BugsFixed\", value: \"210\" }]);\r\n            expect(node2.highlightedTooltipInfo).toEqual([{ displayName: \"Area\", value: \"Front end\" }, { displayName: \"BugsFixed\", value: \"210\" }, { displayName: powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName, value: \"140\" }]);\r\n\r\n            expect(node3.tooltipInfo).toEqual([{ displayName: \"Area\", value: \"Back end\" }, { displayName: \"BugsFiled\", value: \"120\" }]);\r\n            expect(node3.highlightedTooltipInfo).toEqual([{ displayName: \"Area\", value: \"Back end\" }, { displayName: \"BugsFiled\", value: \"120\" }, { displayName: powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName, value: \"60\" }]);\r\n\r\n            expect(node4.tooltipInfo).toEqual([{ displayName: \"Area\", value: \"Back end\" }, { displayName: \"BugsFixed\", value: \"220\" }]);\r\n            expect(node4.highlightedTooltipInfo).toEqual([{ displayName: \"Area\", value: \"Back end\" }, { displayName: \"BugsFixed\", value: \"220\" }, { displayName: powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName, value: \"200\" }]);\r\n        });\r\n\r\n        it(\"treemap gradient color test\",() => {\r\n            let dataPointColors = [\"#d9f2fb\", \"#ff557f\", \"#b1eab7\"];\r\n            let objectDefinitions: powerbi.DataViewObjects[] = [\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[0] } } } },\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[1] } } } },\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[2] } } } }\r\n            ];\r\n\r\n            let dataViewGradientMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1' },\r\n                    { displayName: 'col2', isMeasure: true },\r\n                    { displayName: 'col3', isMeasure: true, roles: { 'Gradient': true } }\r\n                ]\r\n            };\r\n\r\n            let dataView: DataView = {\r\n                metadata: dataViewGradientMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewGradientMetadata.columns[0],\r\n                        values: ['Front end', 'Back end'],\r\n                        objects: objectDefinitions,\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentity('f'),\r\n                            mocks.dataViewScopeIdentity('b'),\r\n                        ]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewGradientMetadata.columns[1],\r\n                            values: [110, 120],\r\n                            highlights: [60, 60]\r\n                        }, {\r\n                            source: dataViewGradientMetadata.columns[2],\r\n                            values: [210, 220],\r\n                            highlights: [140, 200]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let rootNode = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport, null).root;\r\n            let node1: TreemapNode = <TreemapNode>rootNode.children[0];\r\n            let node2: TreemapNode = <TreemapNode>rootNode.children[1];\r\n\r\n            helpers.assertColorsMatch(node1.color, dataPointColors[0]);\r\n            helpers.assertColorsMatch(node2.color, dataPointColors[1]);\r\n        });\r\n\r\n        it(\"treemap gradient color test - validate tool tip\", () => {\r\n            let dataPointColors = [\"#d9f2fb\", \"#ff557f\", \"#b1eab7\"];\r\n            let objectDefinitions: powerbi.DataViewObjects[] = [\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[0] } } } },\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[1] } } } },\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[2] } } } }\r\n            ];\r\n\r\n            let dataViewGradientMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1' },\r\n                    { displayName: 'col2', isMeasure: true },\r\n                    { displayName: 'col3', roles: { 'Gradient': true } }\r\n                ]\r\n            };\r\n\r\n            let dataView: DataView = {\r\n                metadata: dataViewGradientMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewGradientMetadata.columns[0],\r\n                        values: ['Front end', 'Back end'],\r\n                        objects: objectDefinitions,\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentity('f'),\r\n                            mocks.dataViewScopeIdentity('b'),\r\n                        ]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewGradientMetadata.columns[1],\r\n                            values: [110, 120]\r\n                        }, {\r\n                            source: dataViewGradientMetadata.columns[2],\r\n                            values: [210, 220]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let rootNode = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport, null).root;\r\n            let node1: TreemapNode = <TreemapNode>rootNode.children[0].children[0];\r\n            let node2: TreemapNode = <TreemapNode>rootNode.children[0].children[1];\r\n            let node3: TreemapNode = <TreemapNode>rootNode.children[1].children[0];\r\n            let node4: TreemapNode = <TreemapNode>rootNode.children[1].children[1];\r\n\r\n            expect(node1.tooltipInfo).toEqual([{ displayName: 'col1', value: 'Front end' }, { displayName: 'col2', value: '110' }, { displayName: 'col3', value: '210' }]);\r\n            expect(node2.tooltipInfo).toEqual([{ displayName: 'col1', value: 'Front end' }, { displayName: 'col3', value: '210' }]);\r\n            expect(node3.tooltipInfo).toEqual([{ displayName: 'col1', value: 'Back end' }, { displayName: 'col2', value: '120' }, { displayName: 'col3', value: '220' }]);\r\n            expect(node4.tooltipInfo).toEqual([{ displayName: 'col1', value: 'Back end' }, { displayName: 'col3', value: '220' }]);\r\n        });\r\n\r\n        it(\"treemap Gradient and Y have the index - validate tool tip\", () => {\r\n            let dataPointColors = [\"#d9f2fb\", \"#ff557f\", \"#b1eab7\"];\r\n            let objectDefinitions: powerbi.DataViewObjects[] = [\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[0] } } } },\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[1] } } } },\r\n                { dataPoint: { fill: { solid: { color: dataPointColors[2] } } } }\r\n            ];\r\n\r\n            let dataViewGradientMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1' },\r\n                    { displayName: 'col2', isMeasure: true, roles: { 'Y': true, 'Gradient': true } },\r\n                    { displayName: 'col3', isMeasure: true }\r\n                ]\r\n            };\r\n\r\n            let dataView: DataView = {\r\n                metadata: dataViewGradientMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewGradientMetadata.columns[0],\r\n                        values: ['Front end', 'Back end'],\r\n                        objects: objectDefinitions,\r\n                        identity: [\r\n                            mocks.dataViewScopeIdentity('f'),\r\n                            mocks.dataViewScopeIdentity('b'),\r\n                        ]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewGradientMetadata.columns[1],\r\n                            values: [110, 120],\r\n                            highlights: [60, 60]\r\n                        }, {\r\n                            source: dataViewGradientMetadata.columns[2],\r\n                            values: [210, 220],\r\n                            highlights: [140, 200]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let rootNode = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport, null).root;\r\n            let node1: TreemapNode = <TreemapNode>rootNode.children[0];\r\n            let node2: TreemapNode = <TreemapNode>rootNode.children[1];\r\n\r\n            helpers.assertColorsMatch(node1.color, dataPointColors[0]);\r\n            helpers.assertColorsMatch(node2.color, dataPointColors[1]);\r\n            expect(node1.tooltipInfo).toEqual([{ displayName: 'col1', value: 'Front end' }, { displayName: 'col2', value: '110' }]);\r\n            expect(node2.tooltipInfo).toEqual([{ displayName: 'col1', value: 'Back end' }, { displayName: 'col2', value: '120' }]);\r\n        });\r\n\r\n        it('treemap non-categorical series, formatted color', () => {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1', queryName: 'col1', },\r\n                    { displayName: 'col2', queryName: 'col2', isMeasure: true }]\r\n            };\r\n\r\n            let dataViewMetadata3Measure: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1', queryName: 'col1', isMeasure: true, },\r\n                    { displayName: 'col2', queryName: 'col2', isMeasure: true, },\r\n                    { displayName: 'col3', queryName: 'col3', isMeasure: true, }]\r\n            };\r\n\r\n            let dataView: powerbi.DataView = {\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata3Measure.columns[0],\r\n                            values: [200],\r\n                            identity: mocks.dataViewScopeIdentity('col1'),\r\n                        }, {\r\n                            source: dataViewMetadata3Measure.columns[1],\r\n                            values: [300],\r\n                            identity: mocks.dataViewScopeIdentity('col2'),\r\n                        }\r\n                    ],\r\n                        [categoryColumnRef],\r\n                        dataViewMetadata.columns[1])\r\n                },\r\n                metadata: dataViewMetadata,\r\n            };\r\n            \r\n            let groupedValues = dataView.categorical.values.grouped();\r\n            groupedValues[0].objects = { dataPoint: { fill: { solid: { color: '#00FF00' } } } };\r\n            groupedValues[1].objects = { dataPoint: { fill: { solid: { color: '#FF0000' } } } };\r\n            dataView.categorical.values.grouped = () => groupedValues;\r\n\r\n            let dataLabelSettings = powerbi.visuals.dataLabelUtils.getDefaultLabelSettings();\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let rootNode = Treemap.converter(dataView, colors, dataLabelSettings, null, viewport, null).root;\r\n            let node1: TreemapNode = <TreemapNode>rootNode.children[0];\r\n            let node2: TreemapNode = <TreemapNode>rootNode.children[1];\r\n\r\n            helpers.assertColorsMatch(node1.color, '#00FF00');\r\n            helpers.assertColorsMatch(node2.color, '#FF0000' );\r\n        });    \r\n    });\r\n}"],"sourceRoot":"/source/"}