{"version":3,"sources":["visuals/formatting/valueFormatterTests.ts"],"names":["powerbitests"],"mappings":"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,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBAClCA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACjDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YACxDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,gBAAgBA,EAAEA;gBACjBA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAElDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAClDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,WAAWA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAClDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAC1CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAC1CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YAC/CA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,gBAAgBA,EAAEA;gBACjBA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAElDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAC7CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACpDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAC9CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,UAAUA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBAC7CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YAC/CA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,iBAAiBA,EAAEA;gBAClBA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,KAAKA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;gBAEnDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAC5CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACnDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAChDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBACnDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACrDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACrDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YAC/CA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,qBAAqBA,EAAEA;gBACtBA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,KAAKA,EAAEA,IAAIA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,CAACA,CAACA;gBAEtEA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBAC9CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACpDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAClDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACnDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;gBAC1DA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA;gBACjEA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YAC/CA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,sCAAsCA,EAAEA;gBACvCA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,KAAKA,EAAEA,IAAIA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,CAACA,EAAEA,CAACA,CAACA;gBAEpFA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAC7CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACnDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACxDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,YAAYA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACjDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAClDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;gBAChEA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YAC/CA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,wBAAwBA,EAAEA;gBACzBA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;gBAEhEA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,2BAA2BA,CAACA,CAACA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;YAC5EA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,wBAAwBA,EAAEA;gBACzBA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,KAAKA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;gBAEnDA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,2BAA2BA,CAACA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;YACvEA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,0CAA0CA,EAAEA;gBAC3CA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,KAAKA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,CAACA,EAAEA,CAACA,CAACA;gBAEjEA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,2BAA2BA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YACtEA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,mBAAmBA,EAAEA;gBACpBA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,MAAMA,CAACA,EAAEA,MAAMA,EAAEA,uBAAuBA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,yBAAyBA,EAAEA,IAAIA,EAAEA,CAACA,CAACA;gBAElHA,wBAAwBA;gBACxBA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;gBACnCA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBACrCA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACtCA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAC5CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;gBAC9CA,MAAMA,CAACA,KAAKA,CAACA,MAAMA,CAACA,QAAQA,CAACA,CAACA,CAACA,IAAI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AyBA,EAAEA;gBAC1BA,MAAMA,CAACA,cAAcA,CAACA,aAAaA,CAACA,EAAEA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YACxDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,uBAAuBA,EAAEA;gBACxBA,MAAMA,CAACA,cAAcA,CAACA,aAAaA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAC1DA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,wBAAwBA,EAAEA;gBACzBA,MAAMA,CAACA,cAAcA,CAACA,aAAaA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YACrEA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,wBAAwBA,EAAEA;gBACzBA,MAAMA,CAACA,cAAcA,CAACA,aAAaA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;YAC7EA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,uCAAuCA,EAAEA;gBACxCA,MAAMA,CAACA,cAAcA,CAACA,aAAaA,CAACA,IAAIA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;gBACtDA,MAAMA,CAACA,cAAcA,CAACA,aAAaA,CAACA,SAASA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YAC/DA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,cAAcA,EAAEA;YACrBA,EAAEA,CAACA,wBAAwBA,EAAEA;gBACzBA,MAAMA,CAACA,cAAcA,CAACA,YAAYA,CAACA,EAAEA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YACvDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,sBAAsBA,EAAEA;gBACvBA,MAAMA,CAACA,cAAcA,CAACA,YAAYA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YACzDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,sCAAsCA,EAACA;gBACtCA,MAAMA,CAACA,cAAcA,CAACA,YAAYA,CAACA,IAAIA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;gBACrDA,MAAMA,CAACA,cAAcA,CAACA,YAAYA,CAACA,SAASA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YAC9DA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,iBAAiBA,EAAEA;YAClBA,IAAIA,YAAYA,GAAGA,cAAcA,CAACA,eAAeA,CAACA,OAAOA,CAACA,qBAAqBA,CAACA,OAAOA,CAACA,CAACA;YACzFA,MAAMA,CAACA,YAAYA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YACnCA,MAAMA,CAACA,YAAYA,CAACA,MAAMA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;QACnDA,CAACA,CAACA,CAACA;IACPA,CAACA,CAACA,CAACA;AACPA,CAACA,EA3lBM,YAAY,KAAZ,YAAY,QA2lBlB","file":"visuals/formatting/valueFormatterTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    let valueFormatter = powerbi.visuals.valueFormatter;\r\n\r\n    describe(\"ValueFormatter\", () => {\r\n\r\n        describe(\"format\", () => {\r\n            it(\"format null\", () => {\r\n                expect(valueFormatter.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"format empty\", () => {\r\n                expect(valueFormatter.format(\"\")).toBe(\"\");\r\n            });\r\n\r\n            it(\"format non-null value\", () => {\r\n                let formatValue = valueFormatter.format(2010);\r\n                expect(formatValue).not.toBeNull();\r\n            });\r\n\r\n            it(\"format 100 pct\", () => {\r\n                expect(valueFormatter.format(1, \"0.00 %;-0.00 %;0.00 %\", true)).toBe(\"100%\");\r\n            });\r\n\r\n            it(\"format 100 pct - no beautify\", () => {\r\n                expect(valueFormatter.format(1, \"0.00 %;-0.00 %;0.00 %\")).toBe(\"100.00 %\");\r\n            });\r\n\r\n            it(\"format 100 pct - variation\", () => {\r\n                expect(valueFormatter.format(1, \"0.0 %;-0.0 %;0.0 %\", true)).toBe(\"100%\");\r\n            });\r\n\r\n            it(\"format 52 pct - 4 decimals beautified\", () => {\r\n                // we only beautify the default format strings for percent\r\n                expect(valueFormatter.format(0.52, \"0.0000 %;-0.0000 %;0.0000 %\", true)).toBe(\"52.0000 %\");\r\n            });\r\n\r\n            it(\"format whole pct\", () => {\r\n                expect(valueFormatter.format(0.5, \"0 %;-0 %;0 %\", true)).toBe(\"50 %\");\r\n            });\r\n\r\n            it(\"format Boolean\", () => {\r\n                expect(valueFormatter.format(true)).toBe(\"True\");\r\n                expect(valueFormatter.format(false)).toBe(\"False\");\r\n            });\r\n\r\n            it(\"format Invalids\", () => {\r\n                expect(valueFormatter.format(Number.NaN)).toBe(\"NaN\");\r\n                expect(valueFormatter.format(Number.NEGATIVE_INFINITY)).toBe(\"-Infinity\");\r\n                expect(valueFormatter.format(Number.POSITIVE_INFINITY)).toBe(\"+Infinity\");\r\n                expect(valueFormatter.format(null)).toBe(\"(Blank)\");\r\n            });\r\n        });\r\n\r\n        describe('format strings', () => {\r\n\r\n            describe(\"getFormatString\", () => {\r\n                const DefaultDateFormat = valueFormatter.DefaultDateFormat;\r\n                const DefaultIntegerFormat = valueFormatter.DefaultIntegerFormat;\r\n                const DefaultNumericFormat = valueFormatter.DefaultNumericFormat;\r\n\r\n                let property: powerbi.DataViewObjectPropertyIdentifier = { objectName: \"fmtObj\", propertyName: \"fmtProp\" };\r\n                let getFormatString = (customFormat: string, columnType: ValueType): string => {\r\n                    let column: powerbi.DataViewMetadataColumn = {\r\n                        displayName: \"col\",\r\n                    };\r\n\r\n                    if (customFormat)\r\n                        column.objects = {\r\n                            fmtObj: { fmtProp: customFormat }\r\n                        };\r\n\r\n                    if (columnType)\r\n                        column.type = columnType;\r\n\r\n                    return valueFormatter.getFormatString(column, property);\r\n                };\r\n\r\n                it(\"column unspecfied format\", () => {\r\n                    let format = getFormatString(null, null);\r\n\r\n                    expect(format).toBeUndefined();\r\n                });\r\n\r\n                it(\"column (null)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.Null));\r\n\r\n                    expect(format).toBeUndefined();\r\n                });\r\n\r\n                it(\"column (boolean)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.Boolean));\r\n\r\n                    expect(format).toBeUndefined();\r\n                });\r\n\r\n                it(\"column (date)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.Date));\r\n\r\n                    expect(format).toBe(DefaultDateFormat);\r\n                });\r\n\r\n                it(\"column (datetime)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.DateTime));\r\n\r\n                    expect(format).toBe(DefaultDateFormat);\r\n                });\r\n\r\n                it(\"column (time)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.Time));\r\n\r\n                    expect(format).toBe(DefaultDateFormat);\r\n                });\r\n\r\n                it(\"column (integer)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.Integer));\r\n\r\n                    expect(format).toBe(DefaultIntegerFormat);\r\n                });\r\n\r\n                it(\"column (double)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.Double));\r\n\r\n                    expect(format).toBe(DefaultNumericFormat);\r\n                });\r\n\r\n                it(\"column (decimal)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.Decimal));\r\n\r\n                    expect(format).toBe(DefaultNumericFormat);\r\n                });\r\n\r\n                it(\"column (month)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromDescriptor({ temporal: { month: true } }));\r\n\r\n                    expect(format).toBe(DefaultIntegerFormat);\r\n                });\r\n\r\n                it(\"column (year)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromDescriptor({ temporal: { year: true } }));\r\n\r\n                    expect(format).toBe(DefaultIntegerFormat);\r\n                });\r\n\r\n                it(\"column (text)\", () => {\r\n                    let format = getFormatString(null, ValueType.fromDescriptor({ text: true }));\r\n\r\n                    expect(format).toBeUndefined();\r\n                });\r\n\r\n                it(\"column with custom format\", () => {\r\n                    let customFormat = '*PBI*';\r\n                    let format = getFormatString(customFormat, null);\r\n\r\n                    expect(format).toBe(customFormat);\r\n                });\r\n            });\r\n\r\n            describe(\"formatValueColumn\", () => {\r\n                let columnIntObjFormat: powerbi.DataViewMetadataColumn = { displayName: \"col\", objects: { fmtObj: { fmtProp: \"R\" } } };\r\n                let columnIntObjFormatIdentitifer: powerbi.DataViewObjectPropertyIdentifier = { objectName: \"fmtObj\", propertyName: \"fmtProp\" };\r\n                let formatter = (value: any) => valueFormatter.formatValueColumn(value, columnIntObjFormat, columnIntObjFormatIdentitifer);\r\n\r\n                it(\"format null\", () => {\r\n                    expect(formatter(null)).toBe(\"\");\r\n                });\r\n\r\n                it(\"format empty\", () => {\r\n                    expect(formatter(\"\")).toBe(\"\");\r\n                });\r\n\r\n                it(\"format non-null value\", () => {\r\n                    expect(formatter(2010)).not.toBeNull();\r\n                });\r\n\r\n                it(\"format datetime value\", () => {\r\n                    expect(formatter(new Date(599914800000))).toBe('1/4/1989');\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"create\", () => {\r\n            it(\"create basic format with invalid values\", () => {\r\n                let scale = valueFormatter.create({ format: \"0\", value: 0 });\r\n\r\n                expect(scale.format(Number.NaN)).toBe(\"NaN\");\r\n                expect(scale.format(Number.NEGATIVE_INFINITY)).toBe(\"-Infinity\");\r\n                expect(scale.format(Number.POSITIVE_INFINITY)).toBe(\"+Infinity\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create non-null/null init\", () => {\r\n                let scale = valueFormatter.create({ format: \"0\", value: 1e6, value2: null });\r\n\r\n                expect(scale.format(-2.4e6)).toBe(\"-2.4M\");\r\n            });\r\n\r\n            it(\"create null/non-null init\", () => {\r\n                let scale = valueFormatter.create({ format: \"0\", value: null, value2: 1e6 });\r\n\r\n                expect(scale.format(-2.4e6)).toBe(\"-2.4M\");\r\n            });\r\n\r\n            it(\"create abs value init\", () => {\r\n                let scale = valueFormatter.create({ format: \"0\", value: -3e6, value2: 2 });\r\n\r\n                expect(scale.format(-3e6)).toBe(\"-3M\");\r\n            });\r\n\r\n            it(\"create Year\", () => {\r\n                let scale = valueFormatter.create({ format: \"d\", value: new Date(2010, 1) });\r\n\r\n                expect(scale.format(2010)).toBe(\"2010\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create No Scale\", () => {\r\n                let scale = valueFormatter.create({ value: 0 });\r\n\r\n                expect(scale.format(0)).toBe(\"0\");\r\n                expect(scale.format(0.5678934)).toBe(\"0.5679\");\r\n                expect(scale.format(-0.5678934)).toBe(\"-0.5679\");\r\n                expect(scale.format(1.234e7)).toBe(\"12340000\");\r\n                expect(scale.format(1.12000000000007)).toBe(\"1.12\");\r\n            });\r\n\r\n            it(\"create Million\", () => {\r\n                let scale = valueFormatter.create({ value: 1e6 });\r\n\r\n                expect(scale.format(4.56e7)).toBe(\"45.6M\");\r\n                expect(scale.format(4.56789123e7)).toBe(\"45.68M\");\r\n                expect(scale.format(-3130000.567)).toBe(\"-3.13M\");\r\n                expect(scale.format(10000)).toBe(\"0.01M\");\r\n                expect(scale.format(100000)).toBe(\"0.1M\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create Billion\", () => {\r\n                let scale = valueFormatter.create({ value: 1e9 });\r\n\r\n                expect(scale.format(4.56e10)).toBe(\"45.6bn\");\r\n                expect(scale.format(4.56789123e10)).toBe(\"45.68bn\");\r\n                expect(scale.format(-3130000000.567)).toBe(\"-3.13bn\");\r\n                expect(scale.format(100000000)).toBe(\"0.1bn\");\r\n                expect(scale.format(1000000000)).toBe(\"1bn\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create Trillion\", () => {\r\n                let scale = valueFormatter.create({ value: 1e12 });\r\n\r\n                expect(scale.format(4.56e13)).toBe(\"45.6T\");\r\n                expect(scale.format(4.56789123e13)).toBe(\"45.68T\");\r\n                expect(scale.format(-3130000000000.567)).toBe(\"-3.13T\");\r\n                expect(scale.format(100000000000)).toBe(\"0.1T\");\r\n                expect(scale.format(1000000000000)).toBe(\"1T\");\r\n                expect(scale.format(100000000000000)).toBe(\"100T\");\r\n                expect(scale.format(1000000000000000)).toBe(\"1000T\");\r\n                expect(scale.format(1000000000000001)).toBe(\"1E+15\");\r\n                expect(scale.format(1000000000000000000)).toBe(\"1E+18\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create Trillion ($)\", () => {\r\n                let scale = valueFormatter.create({ value: 1e12, format: '$#,0.00' });\r\n\r\n                expect(scale.format(4.56e13)).toBe(\"$45.60T\");\r\n                expect(scale.format(4.56789123e13)).toBe(\"$45.68T\");\r\n                expect(scale.format(-3130000000000.567)).toBe(\"-$3.13T\");\r\n                expect(scale.format(100000000000)).toBe(\"$0.10T\");\r\n                expect(scale.format(1000000000000)).toBe(\"$1.00T\");\r\n                expect(scale.format(100000000000000)).toBe(\"$100.00T\");\r\n                expect(scale.format(1000000000000000)).toBe(\"$1,000.00T\");\r\n                expect(scale.format(1000000000000001)).toBe(\"$1,000.00T\");\r\n                expect(scale.format(1000000000000000000)).toBe(\"$1,000,000.00T\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create Trillion ($ and precision(1))\", () => {\r\n                let scale = valueFormatter.create({ value: 1e12, format: '$#,0.00', precision: 1 });\r\n\r\n                expect(scale.format(4.56e13)).toBe(\"$45.6T\");\r\n                expect(scale.format(4.56789123e13)).toBe(\"$45.7T\");\r\n                expect(scale.format(-3130000000000.567)).toBe(\"-$3.1T\");\r\n                expect(scale.format(160000000000)).toBe(\"$0.2T\");\r\n                expect(scale.format(1600000000000)).toBe(\"$1.6T\");\r\n                expect(scale.format(160000000000000)).toBe(\"$160.0T\");\r\n                expect(scale.format(1600000000000000)).toBe(\"$1,600.0T\");\r\n                expect(scale.format(1600000000000000000)).toBe(\"$1,600,000.0T\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create Exponent format\", () => {\r\n                let scale = valueFormatter.create({ format: \"E\", value: 1e15 });\r\n\r\n                expect(scale.format(719200000000001920000000000)).toBe(\"7.192000E+026\");\r\n            });\r\n\r\n            it(\"create Exponent format\", () => {\r\n                let scale = valueFormatter.create({ value: 1e15 });\r\n\r\n                expect(scale.format(719200000000001920000000000)).toBe(\"7.19E+26\");\r\n            });\r\n\r\n            it(\"create Exponent format with precision(1)\", () => {\r\n                let scale = valueFormatter.create({ value: 1e15, precision: 1 });\r\n\r\n                expect(scale.format(719200000000001920000000000)).toBe(\"7.2E+26\");\r\n            });\r\n\r\n            it(\"create Percentage\", () => {\r\n                let scale = valueFormatter.create({ format: \"0.00 %;-0.00 %;0.00 %\", value: 1, allowFormatBeautification: true });\r\n\r\n                // beautified -> #,0.##%\r\n                expect(scale.format(0)).toBe(\"0%\");\r\n                expect(scale.format(1)).toBe(\"100%\");\r\n                expect(scale.format(-1)).toBe(\"-100%\");\r\n                expect(scale.format(.54)).toBe(\"54%\");\r\n                expect(scale.format(.543)).toBe(\"54.3%\");\r\n                expect(scale.format(.5432)).toBe(\"54.32%\");\r\n                expect(scale.format(.54321)).toBe(\"54.32%\");\r\n                expect(scale.format(6.54321)).toBe(\"654.32%\");\r\n                expect(scale.format(76.54321)).toBe(\"7,654.32%\");\r\n            });\r\n\r\n            it(\"create Escaped Character format\", () => {\r\n                let scale = valueFormatter.create({ format: \"\\\\$#,0.00;(\\\\$#,0.00);\\\\$#,0.00\", value: 1e6 });\r\n\r\n                expect(scale.format(107384391.61)).toBe(\"$107.38M\");\r\n                expect(scale.format(-107384391.61)).toBe(\"($107.38M)\");\r\n            });\r\n\r\n            it(\"create Format no custom negative\", () => {\r\n                let scale = valueFormatter.create({ format: \"$#,0.00\", value: 1e6 });\r\n\r\n                expect(scale.format(-107384391.61)).toBe(\"-$107.38M\");\r\n            });\r\n\r\n            it(\"create HundredThousand\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 300000 });\r\n\r\n                expect(scale.format(300000)).toBe(\"0.3M\");\r\n            });\r\n\r\n            it(\"create Million\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 900000000 });\r\n\r\n                expect(scale.format(900000000)).toBe(\"0.9bn\");\r\n            });\r\n\r\n            it(\"create Billion\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 900000000000 });\r\n\r\n                expect(scale.format(900000000000)).toBe(\"0.9T\");\r\n            });\r\n\r\n            it(\"create Trillion\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 9e14, displayUnitSystemType: powerbi.DisplayUnitSystemType.Default });\r\n\r\n                expect(scale.format(9e14)).toBe(\"900T\");\r\n            });\r\n\r\n            it(\"create Exponent\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 9e15, displayUnitSystemType: powerbi.DisplayUnitSystemType.Default });\r\n\r\n                expect(scale.format(9e15)).toBe(\"9E+15\");\r\n            });\r\n\r\n            it(\"create HundredThousand Whole Units\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 300000, displayUnitSystemType: powerbi.DisplayUnitSystemType.WholeUnits });\r\n\r\n                expect(scale.format(300000)).toBe(\"300K\");\r\n            });\r\n\r\n            it(\"create Million Whole Units\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 900000000, displayUnitSystemType: powerbi.DisplayUnitSystemType.WholeUnits });\r\n\r\n                expect(scale.format(900000000)).toBe(\"900M\");\r\n            });\r\n\r\n            it(\"create Billion Whole Units\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 900000000000, displayUnitSystemType: powerbi.DisplayUnitSystemType.WholeUnits });\r\n\r\n                expect(scale.format(900000000000)).toBe(\"900bn\");\r\n            });\r\n\r\n            it(\"create Trillion Whole Units\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 900000000000000, displayUnitSystemType: powerbi.DisplayUnitSystemType.WholeUnits });\r\n\r\n                expect(scale.format(900000000000000)).toBe(\"900T\");\r\n            });\r\n\r\n            it(\"create HundredThousand Verbose (No Units)\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 300000, displayUnitSystemType: powerbi.DisplayUnitSystemType.Verbose });\r\n\r\n                expect(scale.format(300000)).toBe(\"300000\");\r\n            });\r\n\r\n            it(\"create Million Verbose (No Units)\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 900000000, displayUnitSystemType: powerbi.DisplayUnitSystemType.Verbose });\r\n\r\n                expect(scale.format(900000000)).toBe(\"900000000\");\r\n            });\r\n\r\n            it(\"create Billion Verbose (No Units)\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 900000000000, displayUnitSystemType: powerbi.DisplayUnitSystemType.Verbose });\r\n\r\n                expect(scale.format(900000000000)).toBe(\"900000000000\");\r\n            });\r\n\r\n            it(\"create Trillion Verbose (No Units)\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 900000000000000, displayUnitSystemType: powerbi.DisplayUnitSystemType.Verbose });\r\n\r\n                expect(scale.format(900000000000000)).toBe(\"900000000000000\");\r\n            });\r\n\r\n            it(\"create single value formatting verbose\", () => {\r\n                let format: string = \"#,0.00\";\r\n                let scale = valueFormatter.create({ format: format, value: 26.254, displayUnitSystemType: powerbi.DisplayUnitSystemType.Verbose, formatSingleValues: true });\r\n\r\n                // Default formatting for numeric types is 2dp\r\n                expect(scale.format(26.254)).toBe(\"26.25\");\r\n            });\r\n\r\n            it(\"create single value formatting verbose large\", () => {\r\n                let format: string = \"#,0.00\";\r\n                let scale = valueFormatter.create({ format: format, value: 300000.254, displayUnitSystemType: powerbi.DisplayUnitSystemType.Verbose, formatSingleValues: true });\r\n\r\n                // Verbose formatting shouldn't use units\r\n                expect(scale.format(300000.254)).toBe(\"300,000.25\");\r\n            });\r\n\r\n            it(\"precision without display units\", () => {\r\n                let scale = valueFormatter.create({ value: 0, precision: 3 });\r\n\r\n                expect(scale.format(12.1012)).toBe(\"12.101\");\r\n            });\r\n\r\n            it(\"precision with display units\", () => {\r\n                let format: string = \"#,0.00\";\r\n                let scale = valueFormatter.create({ format: format, value: 10000, precision: 2 });\r\n\r\n                expect(scale.format(12177)).toBe(\"12.18K\");\r\n            });\r\n\r\n            it(\"precision 1 with display units\", () => {\r\n                let format: string = \"#,0.00\";\r\n                let scale = valueFormatter.create({ format: format, value: 10000, precision: 1 });\r\n\r\n                expect(scale.format(12177)).toBe(\"12.2K\");\r\n            });\r\n\r\n            it(\"precision with display units and no format string\", () => {\r\n                let scale = valueFormatter.create({ value: 10000, precision: 2 });\r\n                expect(scale.format(12177)).toBe(\"12.18K\");\r\n            });\r\n\r\n            it(\"Verify single value integer formatting for values less than 10K should not show display units\", () => {\r\n                let format: string = \"g\";\r\n                let input: number = 9999;\r\n                let columnType = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Integer);\r\n                let scale = valueFormatter.create({ format: format, value: input, formatSingleValues: true, columnType: columnType });\r\n\r\n                expect(scale.format(input)).toBe(\"9999\");\r\n            });\r\n\r\n            it(\"Verify single value integer formatting for numeric values less than 10K should show display units\", () => {    \r\n                // NOTE: In this case the column type is Integer, but the value is actually numeric.\r\n                let format: string = \"g\";\r\n                let input: number = 9999.12345;\r\n                let columnType = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Integer);\r\n                let scale = valueFormatter.create({ format: format, value: input, formatSingleValues: true, columnType: columnType });\r\n\r\n                // When using 'g' with display units we fall back to the the default format string for numeric.\r\n                expect(scale.format(input)).toBe(\"10.00K\");\r\n            });\r\n\r\n            it(\"Verify single value number formatting with display units for values greater than 10K should show display units\",() => {\r\n                let format: string = \"g\";\r\n                let input: number = 10001;\r\n                let columnType = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double);\r\n                let scale = valueFormatter.create({ format: format, value: input, formatSingleValues: true, columnType: columnType });\r\n\r\n                expect(scale.format(input)).toBe(\"10.00K\");\r\n            });\r\n\r\n            it(\"Verify single value custom formatting with single decimal value should not show display units\", () => {\r\n                let format: string = \"0\";\r\n                let input: number = 1999.2;\r\n                let columnType = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double);\r\n                let scale = valueFormatter.create({ format: format, value: input, formatSingleValues: true, columnType: columnType });\r\n\r\n                expect(scale.format(input)).toBe(\"1999\");\r\n            });\r\n\r\n            it(\"Verify single value custom formatting with two decimal values should show display units\", () => {\r\n                let format: string = \"0.00\";\r\n                let input: number = 1999.9;\r\n                let columnType = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double);\r\n                let scale = valueFormatter.create({ format: format, value: input, formatSingleValues: true, columnType: columnType });\r\n\r\n                expect(scale.format(input)).toBe(\"2.00K\");\r\n            });\r\n\r\n            it(\"Verify single value number formatting for values less than 10K should show display units\", () => {\r\n                let format: string = \"g\";\r\n                let input: number = 1999.9;\r\n                let columnType = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double);\r\n                let scale = valueFormatter.create({ format: format, value: input, formatSingleValues: true, columnType: columnType });\r\n\r\n                // When using 'g' with display units we fall back to the the default format string for numeric.\r\n                expect(scale.format(input)).toBe(\"2.00K\");\r\n            });\r\n\r\n            it(\"create Boolean\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: false, value2: true, tickCount: 6 });\r\n\r\n                expect(scale.format(true)).toBe(\"True\");\r\n                expect(scale.format(false)).toBe(\"False\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create Boolean with numeric index values\", () => {\r\n                let format: string;\r\n                let scale = valueFormatter.create({ format: format, value: 0, value2: 1, tickCount: 6 });\r\n\r\n                expect(scale.format(true)).toBe(\"True\");\r\n                expect(scale.format(false)).toBe(\"False\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n            it(\"create Date\", () => {\r\n                let format: string = \"O\";\r\n                let minDate = new Date(2014, 10, 4, 12, 34, 56, 789);\r\n                let maxDate = new Date(2014, 10, 9, 12, 34, 56, 789);\r\n                let scale = valueFormatter.create({ format: format, value: minDate, value2: maxDate, tickCount: 6 });\r\n\r\n                expect(scale.format(minDate)).toBe(\"Nov 04\");\r\n                expect(scale.format(maxDate)).toBe(\"Nov 09\");\r\n                expect(scale.format(null)).toBe(\"(Blank)\");\r\n            });\r\n\r\n        });\r\n\r\n        describe(\"formatListAnd\", () => {\r\n            it(\"formatListAnd no values\", () => {\r\n                expect(valueFormatter.formatListAnd([])).toBeNull();\r\n            });\r\n\r\n            it(\"formatListAnd 1 value\", () => {\r\n                expect(valueFormatter.formatListAnd([\"1\"])).toBe(\"1\");\r\n            });\r\n\r\n            it(\"formatListAnd 2 values\", () => {\r\n                expect(valueFormatter.formatListAnd([\"1\", \"2\"])).toBe(\"1 and 2\");\r\n            });\r\n\r\n            it(\"formatListAnd 3 values\", () => {\r\n                expect(valueFormatter.formatListAnd([\"1\", \"2\", \"3\"])).toBe(\"1, 2 and 3\");\r\n            });\r\n\r\n            it(\"formatListAnd wrong parameters values\", () => {\r\n                expect(valueFormatter.formatListAnd(null)).toBeNull();\r\n                expect(valueFormatter.formatListAnd(undefined)).toBeNull();\r\n            });\r\n        });\r\n\r\n        describe(\"formatListOr\", () => {\r\n            it(\"formatListOr no values\", () => {\r\n                expect(valueFormatter.formatListOr([])).toBeNull();\r\n            });\r\n\r\n            it(\"formatListOr 1 value\", () => {\r\n                expect(valueFormatter.formatListOr([\"1\"])).toBe(\"1\");\r\n            });\r\n\r\n            it(\"formatListOr wrong parameters values\",() => {\r\n                expect(valueFormatter.formatListOr(null)).toBeNull();\r\n                expect(valueFormatter.formatListOr(undefined)).toBeNull();\r\n            });\r\n        });\r\n\r\n        it(\"getDisplayUnits\", () => {\r\n            let displayUnits = valueFormatter.getDisplayUnits(powerbi.DisplayUnitSystemType.Default);\r\n            expect(displayUnits).toBeDefined();\r\n            expect(displayUnits.length).toBeGreaterThan(0);\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}