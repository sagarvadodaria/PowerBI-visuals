{"version":3,"sources":["visuals/donutChartTests.ts"],"names":["powerbitests","powerbitests.getOptionsForValueWarning","powerbitests.buildDataPoint","powerbitests.pieChartDomValidation","powerbitests.setD3Event","powerbitests.swipeTest","powerbitests.rotateValidation"],"mappings":"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KA,CAACA,qBAAqBA,CAACA,sDAAsDA,CAACA;4CAC1FA,kBAAKA,CAACA,qBAAqBA,CAACA,sBAAsBA,CAACA;4CACnDA,kBAAKA,CAACA,qBAAqBA,CAACA,SAASA,CAACA;4CACtCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA;4CAChCA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,CAACA;wCACrCA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;qCACtCA,CAACA;gCACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;wCAC1CA,MAAMA,EAAEA,0BAA0BA,CAACA,OAAOA,CAACA,CAACA,CAACA;wCAC7CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;wCACjCA,QAAQA,EAAEA,GAAGA;qCAChBA,CAACA,CAACA;6BACNA;yBACJA,CAACA;iBACLA,CAACA,CAACA;gBACHA,UAAUA,CAACA;oBACPA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;oBACzCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,SAASA,CAACA,GAAGA,CAACA,CAACA;oBAC3CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,SAASA,CAACA,GAAGA,CAACA,CAACA;oBAC3CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;oBAC5CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;oBACtCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,C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ACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;wCAC1CA,MAAMA,EAAEA,0BAA0BA,CAACA,OAAOA,CAACA,CAACA,CAACA;wCAC7CA,MAAMA,EAAEA,CAACA,KAAKA,EAAEA,KAAKA,EAAEA,GAAGA,CAACA;qCAC9BA,CAACA,CAACA;6BACNA;yBACJA,CAACA;iBACLA,CAACA,CAACA;gBAEHA,UAAUA,CAACA;oBACPA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;oBAEzCA,8DAA8DA;oBAC9DA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;oBACvEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;oBACvEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;oBAEvEA,oDAAoDA;oBACpDA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;oBACvEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;oBACvEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;oBACvEA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,gCAAgCA,EAAEA;gBACjCA,IAAIA,kBAAkBA,GAAGA,gCAAgCA,CAACA;gBAC1DA,IAAIA,0BAA0BA,GAAGA,OAAOA,CAACA,SAASA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,CAACA;gBAC7EA,0BAA0BA,CAACA,OAAOA,GAAGA;oBACjCA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,UAAUA,EAAEA,UAAUA,CAACA,IAAIA,EAAEA;iBACtDA,CAACA;gBAEFA,CAACA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAE1CA,CAACA,CAACA,aAAaA,CAACA;oBACZA,SAASA,EAAEA,CAACA;4BACRA,QAAQA,EAAEA,0BAA0BA;4BACpCA,WAAWA,EAAEA;gCACTA,UAAUA,EAAEA,CAACA;wCACTA,MAAMA,EAAEA,0BAA0BA,CAACA,OAAOA,CAACA,CAACA,CAACA;wCAC7CA,MAAMA,EAAEA,CAACA,kBAAkBA,EAAEA,kBAAkBA,CAACA;wCAChDA,QAAQA,EAAEA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,kBAAkBA,CAACA;4CACtDA,kBAAKA,CAACA,qBAAqBA,CAACA,kBAAkBA,CAACA,CAACA;wCACpDA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;qCACtCA,CAACA;gCACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;wCAC1CA,MAAMA,EAAEA,0BAA0BA,CAACA,OAAOA,CAACA,CAACA,CAACA;wCAC7CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,CAACA;wCAClBA,QAAQA,EAAEA,GAAGA;qCAChBA,CAACA,CAACA;6BACNA;yBACJA,CAACA;iBACLA,CAACA,CAACA;gBACHA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,wBAAwBA,CAACA,CAACA;gBAC3DA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,wBAAwBA,CAACA,CAACA;gBAE3DA,uCAAuCA;gBACvCA,CAACA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAC1CA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACrCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACxCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBAExCA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,kBAAkBA,CAACA,CAACA;gBAC1CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,kBAAkBA,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CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;gBACrCA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,EAAEA,CAACA,CAACA,gBAAgBA,CAACA;oBACjBA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC7CA,CAACA,CAACA,aAAaA,CAACA;oBACZA,SAASA,EAAEA,CAACA;4BACRA,QAAQA,EAAEA,yBAAyBA;4BACnCA,WAAWA,EAAEA;gCACTA,UAAUA,EAAEA,CAACA;wCACTA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;wCAC5CA,MAAMA,EAAEA,EAAEA;wCACVA,QAAQA,EAAEA,EAAEA;wCACZA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;qCACtCA,CAACA;gCACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;wCAC1CA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;wCAC5CA,MAAMA,EAAEA,EAAEA;qCACbA,CAACA,CAACA;6BACNA;yBACJA,CAACA;iBACLA,CAACA,CAACA;gBAEHA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;oBACrCA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC/CA,EAAEA,CAACA,CAACA,gBAAgBA,CAACA;wBACjBA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC7CA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,C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C1CA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCAC5CA,MAAMA,EAAEA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;iCACxBA,CAACA,CAACA;yBACNA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,CAACA,gBAAgBA,IAAIA,CAACA,eAAeA,CAACA,CAACA,CAACA;oBACxCA,MAAMA,CAACA,CAACA,CAACA,yBAAyBA,CAACA,CAACA,MAAMA,CAACA;wBACvC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,KAAK,CAAC;oBAC5C,CAAC,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACnBA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC5CA,CAACA;gBAEDA,yGAAyGA;gBACzGA,EAAEA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,CAACA;oBACnBA,MAAMA,CAACA,CAACA,CAACA,kCAAkCA,CAACA,CAACA,MAAMA,CAACA;wBAChD,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,KAAK,CAAC;oBAC5C,CAAC,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACnBA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC5CA,CAACA;gBACDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,GAAGA,CAACA,CAACA,CAACA;QACjCA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,yCAAyCA,EAA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,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,EAAEA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,CAACA;oBACnBA,MAAMA,CAACA,QAAQA,CAACA,yBAAyBA,CAACA,CAACA,oBAAoBA,CAACA,iBAAiBA,CAACA,CAACA;oBACnFA,MAAMA,CAACA,SAASA,CAACA,YAAYA,CAACA,CAACA,oBAAoBA,CAACA,iBAAiBA,CAACA,CAACA;gBAC3EA,CAACA;gBACDA,IAAIA,CAACA,CAACA;oBACFA,MAAMA,CAACA,UAAUA,CAACA,YAAYA,CAACA,GAAGA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC7DA,WAAWA,CAACA,IAAIA,CAACA;wBACb,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACpE,CAAC,CAACA,CAACA;oBAEHA,SAASA;oBACTA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;wBACfA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBAC1CA,IAAIA,KAAKA,GAAGA,CAACA,CAACA,oBAAoBA,CAACA,CAACA;wBACpCA,MAAMA,CAACA,KAAKA,CAACA,iBAAiBA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,CAACA;wBAC/EA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,oBAAoBA,CAACA,CAACA;wBAClEA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,oBAAoBA,CAACA,CAACA;oBACtEA,CAACA;gBACLA,CAACA;gBAEDA,uBAAuBA;gBACvBA,IAA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A,gBAAgBA,CAACA,CAACA,CAACA;oBACnBA,kBAAkBA,CAACA,OAAOA,CAACA,UAACA,CAACA;wBACzBA,MAAMA,CAACA,QAAQA,CAACA,yBAAyBA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,CAACA,CAACA;wBACnEA,MAAMA,CAACA,SAASA,CAACA,YAAYA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,CAACA,CAACA;oBAC3DA,CAACA,CAACA,CAACA;gBACPA,CAACA;gBACDA,IAAIA,CAACA,CAACA;oBAEFA,WAAWA,CAACA,IAAIA,CAACA;wBACb,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACpE,CAAC,CAACA,CAACA;oBAEHA,SAASA;oBACTA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;wBACfA,MAAMA,CAACA,CAACA,CAACA,eAAeA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBAC1CA,IAAIA,KAAKA,GAAGA,CAACA,CAACA,oBAAoBA,CAACA,CAACA;wBACpCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,oBAAoBA,CAACA,CAACA;wBAClEA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA;wBACjEA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA;wBACjEA,IAAIA,MAAMA,GAAGA,CAACA,CAACA,SAASA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;wBACvCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,SAASA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;wBAC9CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,SAASA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;wBAC9CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,SAASA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;oBAClDA,CAACA;oBACDA,IAAIA,CAACA,CAACA;wBACFA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC5CA,CAACA;gBACLA,CAACA;gBAEDA,uBAAuBA;gBACvBA,IAAIA,YAAYA,GAAGA,CAACA,CAACA,eAAeA,CAACA,CAACA;gBAChCA,YAAaA,CAACA,OAAOA,EAAEA,CAACA;gBAE9BA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,IAAIA,CAACA;wBACR,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC5D,CAAC,CAACA,CAACA;oBACHA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6BAA6BA,EAAEA,UAACA,IAAIA;YACnCA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,yBAAyBA;wBACnCA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCAC5CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;oCACvBA,QAAQA,EAAEA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,CAACA;oCAChHA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;oCAC1CA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCAC5CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,EAAEA,EAACA,EAAEA,CAACA;iCACvBA,CAACA,CAACA;yBACNA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,IAAIA,MAAMA,GAAGA,CAACA,CAACA,oBAAoBA,CAACA,CAACA;gBACrCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;oBACrCA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACpDA,CAACA;gBACDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,yDAAyDA,EAAEA,UAACA,IAAIA;YAC/DA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,iCAAiCA;wBAC3CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,iCAAiCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACpDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;oCACvBA,QAAQA,EAAEA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,CAACA;oCAChHA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,iCAAiCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACpDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;iCAC1BA,EAAEA;oCACCA,MAAMA,EAAEA,iCAAiCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACpDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,EAAEA,CAACA;iCACzBA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,IAAIA,MAAMA,GAAGA,CAACA,CAACA,oBAAoBA,CAACA,CAACA;gBACrCA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;oBACrCA,EAAEA,CAAAA,CAACA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA;wBACXA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;oBACpDA,IAAIA;wBACAA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACxDA,CAACA;gBAEDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2EAA2EA,EAAEA,UAACA,IAAIA;YACjFA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,iCAAiCA;wBAC3CA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,iCAAiCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACpDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;oCACvBA,QAAQA,EAAEA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,CAACA;oCAChHA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA;gCACzCA;oCACIA,MAAMA,EAAEA,iCAAiCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACpDA,MAAMA,EAAEA,CAACA,CAACA,EAAEA,IAAIA,EAAEA,IAAIA,CAACA;iCAC1BA,EAAEA;oCACCA,MAAMA,EAAEA,iCAAiCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACpDA,MAAMA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;iCACxBA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,IAAIA,MAAMA,GAAGA,CAACA,CAACA,oBAAoBA,CAACA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,CAACA;oBACpBA,iDAAiDA;oBACjDA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC9BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,MAAMA,GAAGA,CAACA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;wBACzCA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;oBACpDA,CAACA;oBACDA,qCAAqCA;oBACrCA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACpEA,CAACA;gBACDA,IAAIA,CAACA,CAACA;oBACFA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC9BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,MAAMA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;wBACrCA,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA;4BACZA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;wBACpDA,IAAIA;4BACAA,MAAMA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;oBACxDA,CAACA;gBACLA,CAACA;gBACDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,8CAA8CA,EAAEA,UAACA,IAAIA;YACpDA,CAACA,CAACA,aAAaA,CAACA;gBACZA,SAASA,EAAEA,CAACA;wBACRA,QAAQA,EAAEA,yBAAyBA;wBACnCA,WAAWA,EAAEA;4BACTA,UAAUA,EAAEA,CAACA;oCACTA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCAC5CA,MAAMA,EAAEA,CAACA,GA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CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,CAACA;oCAChHA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;iCACtCA,CAACA;4BACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;oCAC1CA,MAAMA,EAAEA,+BAA+BA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCAClDA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;iCAC1BA,CAACA,CAACA;yBACVA;qBACAA,CAACA;aACLA,CAACA,CAACA;YAEHA,UAAUA,CAACA;gBACPA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACzCA,EAAEA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,CAACA;oBACpBA,IAAIA,gBAAgBA,GAAGA,CAACA,CAACA,MAAMA,CAACA,CAACA,GAAGA,CAACA,aAAaA,CAACA,CAACA;oBACpDA,IAAIA,KAAKA,GAAGA,gBAAgBA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;oBACxCA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,UAAUA,CAACA,CAACA;gBACzCA,CAACA;gBAACA,IAAIA;oBACFA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACrCA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,gCAAgCA,EAAEA;YACjCA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;YAErCA,EAAEA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,CAACA;gBACpBA,CAACA,CAACA,aAAaA,CAACA;oBACZA,SAASA,EAAEA,CAACA;4BACRA,QAAQA,EAAEA,yBAAyBA;4BACnCA,WAAWA,EAAEA;gCACTA,UAAUA,EAAEA,CAACA;wCACTA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;wCAC5CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;wCACvBA,QAAQA,EAAEA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,CAACA;wCAChHA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;qCACtCA,CAACA;gCACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;wCAC1CA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;wCAC5CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;qCAC1BA,CAACA,CAACA;6BACNA;yBACJA,CAACA;iBACLA,CAACA,CAACA;gBAEHA,uBAAuBA;gBACvBA,IAAIA,YAAYA,GAAGA,yBAAyBA,CAACA,OAAOA,IAAIA,yBAAyBA,CAACA,OAAOA,CAACA,QAAQA,CAACA,CAACA;gBACpGA,EAAEA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA;oBACfA,IAAIA,KAAKA,GAAGA,CAACA,CAACA,oBAAoBA,CAACA,CAACA;oBACpCA,IAAIA,MAAMA,GAAGA,CAACA,CAACA,oBAAoBA,CAACA,CAACA;oBAE/BA,KAAKA,CAACA,KAAKA,EAAGA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;oBACnCA,UAAUA,CAACA;wBACPA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,kBAAkBA,CAACA,CAACA;wBAChEA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,oBAAoBA,CAACA,CAACA;wBAClEA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,eAAeA,CAACA,CAACA,IAAIA,CAACA,oBAAoBA,CAACA,CAACA;wBAElEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBACxDA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA;wBAChEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA;oBACpEA,CAACA,EAAEA,iCAAoBA,GAAGA,CAACA,CAACA,CAACA;gBACjCA,CAACA;YACLA,CAACA;QACLA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;YAClBA,EAAEA,CAACA,mBAAmBA,EAAEA,UAACA,IAAIA;gBACzBA,IAAIA,QAAQA,GAAGA;oBACXA,QAAQA,EAAEA,yBAAyBA;oBACnCA,WAAWA,EAAEA;wBACTA,UAAUA,EAAEA,CAACA;gCACTA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;gCAC5CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;gCACvBA,QAAQA,EAAEA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,GAAGA,CAACA,CAACA;gCAChHA,cAAcA,EAAEA,CAACA,iBAAiBA,CAACA;6BACtCA,CAACA;wBACFA,MAAMA,EAAEA,iBAAiBA,CAACA,kBAAkBA,CAACA,CAACA;gCAC1CA,MAAMA,EAAEA,yBAAyBA,CAACA,OAAOA,CAACA,CAACA,CAACA;gCAC5CA,MAAMA,EAAEA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA;6BAC1BA,CAACA,CAACA;qBACNA;iBACJA,CAACA;gBAEFA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,EAAEA,CAACA;gBAEvDA,CAACA,CAACA,aAAaA,CAACA;oBACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;iBACxBA,CAACA,CAACA;gBAEHA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;oBACrCA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC/CA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;wBAClBA,MAAMA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,GAAGA,CAACA,QAAQA,EAAEA,CAACA,CAACA;oBACjFA,CAACA;oBAEDA,wBAAwBA;oBACxBA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,OAAOA,EAAEA,EAAEA,CAACA;oBAE1EA,CAACA,CAACA,aAAaA,CAACA;wBACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;qBACxBA,CAACA,CAACA;oBACHA,UAAUA,CAACA;wBACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;wBACrCA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;wBAC/CA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;4BAClBA,MAAMA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,KAAKA,CAACA,QAAQA,EAAEA,CAACA,CAACA;wBACnFA,CAACA;wBAEDA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,WAAWA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,EAAEA,CAACA;wBAC/FA,CAACA,CAACA,aAAaA,CAACA;4BACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;yBACxBA,CAACA,CAACA;wBACHA,UAAUA,CAACA;4BACPA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;gCAClBA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA,WAAWA,EAAEA,CAACA;4BAC9DA,CAACA;4BAEDA,WAAWA;4BACXA,IAAIA,SAASA,GAAGA,YAAYA,CAACA;4BAC7BA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,QAAQA,EAAEA,OAAOA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,EAAEA,CAACA;4BACjHA,CAACA,CAACA,aAAaA,CAACA;gCACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;6BACxBA,CAACA,CAACA;4BACHA,UAAUA,CAACA;gCACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;gCACrCA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;oCAClBA,MAAMA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,KAAKA,CAACA,QAAQA,EAAEA,CAACA,CAACA;oCAC/EA,MAAMA,CAACA,oBAAOA,CAACA,eAAeA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;oCACnEA,MAAMA,CAACA,oBAAOA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;oCACpEA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gCAClEA,CAACA;gCAEDA,aAAaA;gCACbA,QAAQA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,QAAQA,EAAEA,OAAOA,EAAEA,EAAEA,CAACA;gCAC3EA,CAACA,CAACA,aAAaA,CAACA;oCACZA,SAASA,EAAEA,CAACA,QAAQA,CAACA;iCACxBA,CAACA,CAACA;gCACHA,UAAUA,CAACA;oCACPA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,CAACA,SAASA,EAAEA,CAACA;oCACrCA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA;wCAClBA,MAAMA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,CAACA,CAACA;oCAClFA,CAACA;oCACDA,IAAIA,EAAEA,CAACA;gCACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;4BAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;wBAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;oBAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;gBAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,CAACA,CAACA;QACPA,CAACA;QAEDA,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AAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBAC7DA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,mCAAmCA,CAACA,CAACA,GAAGA,CAACA,OAAOA,CAACA,EAAEA,CAACA,CAACA,QAAQA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBAC9GA,MAAMA,CAACA,CAACA,CAACA,iCAAiCA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,CAACA,CAACA,8BAA8BA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBAC7DA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,mCAAmCA,CAACA,CAACA,GAAGA,CAACA,OAAOA,CAACA,EAAEA,CAACA,CAACA,QAAQA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBAC9GA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,yDAAyDA,EAAEA,UAACA,IAAIA;YAC/DA,CAACA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAA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AAWA,EAAEA,CAACA;YAC/DA,KAAKA,CAACA,SAASA,EAAEA,cAAcA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAEnDA,qBAAqBA;YACrBA,SAASA,CAACA,UAAUA,CAACA,SAASA,CAACA,CAACA;YAChCA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,QAAQA,CAACA,yBAAyBA,CAACA,CAACA,oBAAoBA,CAACA,kBAAkBA,CAACA,CAACA;gBACpFA,MAAMA,CAACA,SAASA,CAACA,YAAYA,CAACA,CAACA,oBAAoBA,CAACA,kBAAkBA,CAACA,CAACA;gBACxEA,MAAMA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACxCA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA;QAEDL,EAAEA,CAACA,0BAA0BA,EAAEA,UAACA,IAAIA,IAAKA,OAAAA,SAASA,CAACA,KAAKA,EAAEA,CAACA,EAAEA,IAAIA,CAACA,EAAzBA,CAAyBA,CAACA,CAACA,CAACA,yDAAyDA;QAC9HA,EAAEA,CAACA,yBAAyBA,EAAEA,UAACA,IAAIA,IAAKA,OAAAA,SAASA,CAACA,IAAIA,EAAEA,CAACA,EAAEA,IAAIA,CAACA,EAAxBA,CAAwBA,CAACA,CAACA,CAACA,0DAA0DA;QAE7HA,0BAA0BA,SAAkBA,EAAEA,IAASA;YACnDM,IAAIA,QAAQA,GAAQA,CAACA,CAACA;YACtBA,IAAIA,kBAAkBA,GAAGA,QAAQA,CAACA,kBAAkBA,CAACA;YACrDA,IAAIA,SAASA,GAAGA,kBAAkBA,CAACA,iBAAiBA,CAACA;YAErDA,KAAKA,CAACA,QAAQA,EAAEA,2BAA2BA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAC/DA,KAAKA,CAACA,SAASA,EAAEA,cAAcA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAEnDA,4DAA4DA;YAC5DA,yFAAyFA;YACzFA,yDAAyDA;YACzDA,IAAIA,WAAWA,GAAGA,CAACA,CAACA,cAAcA,CAACA,CAACA;YACpCA,MAAMA,CAACA,WAAWA,CAACA,MAAMA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YACtCA,MAAMA,CAACA,WAAWA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;YACjEA,MAAMA,CAACA,WAAWA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;YACjEA,MAAMA,CAACA,WAAWA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;YAEjEA,qBAAqBA;YACrBA,SAASA,CAACA,UAAUA,CAACA,SAASA,CAACA,CAACA;YAEhCA,UAAUA,CAACA;gBACPA,0BAA0BA;gBAC1BA,IAAIA,kBAAkBA,GAAGA,CAACA,CAACA,cAAcA,CAACA,CAACA;gBAC3CA,EAAEA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;oBACZA,MAAMA,CAACA,kBAAkBA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;oBACrEA,MAAMA,CAACA,kBAAkBA,CAACA,EAAEA,CAACA,CAACA,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AiCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACpDA,MAAMA,EAAEA,CAACA,CAACA,GAAGA,EAAEA,IAAIA,EAAEA,GAAGA,CAACA;oCACzBA,QAAQA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA;iCAC/CA,EAAEA;oCACKA,MAAMA,EAAEA,iCAAiCA,CAACA,OAAOA,CAACA,CAACA,CAACA;oCACpDA,MAAMA,EAAEA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,CAACA,EAAEA,CAACA;oCACxBA,QAAQA,EAAEA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA;iCAC/CA,CAACA,CAACA;yBACVA;qBACJA,CAACA;aACLA,CAACA;YAEFA,CAACA,CAACA,aAAaA,CAACA,kBAAkBA,CAACA,CAACA;YAEpCA,IAAIA,MAAMA,GAA0CA,CAACA,CAACA,wBAAwBA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,EAAEA,CAACA,CAACA;YAC5GA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACxCA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;YACrDA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YAC7DA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;YACrDA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,WAAWA,EAAEA,CAACA;YAC7DA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CA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","file":"visuals/donutChartTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import DonutChart = powerbi.visuals.DonutChart;\r\n    import DonutData = powerbi.visuals.DonutData;\r\n    import DonutDataPoint = powerbi.visuals.DonutDataPoint;\r\n    import SelectionId = powerbi.visuals.SelectionId;\r\n    import LegendPosition = powerbi.visuals.LegendPosition;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import buildSelector = powerbitests.helpers.buildSelectorForColumn;\r\n    import VisualObjectInstanceEnumerationObject = powerbi.VisualObjectInstanceEnumerationObject;\r\n    import PixelConverter = jsCommon.PixelConverter;\r\n    import LabelStyle = powerbi.visuals.labelStyle;\r\n    import visualPluginFactory = powerbi.visuals.visualPluginFactory;\r\n\r\n    let donutColors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n\r\n    const labelsElement = '.donutChart .label';\r\n    const fontFamily = 'wf_standard-font';\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    describe(\"DonutChart\", () => {\r\n        let dataViewMetadata: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                { displayName: 'col1', queryName: 'col1', },\r\n                { displayName: 'col2', queryName: 'col2', isMeasure: true }]\r\n        };\r\n\r\n        let dataViewMetadataWithFormats: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                { displayName: 'col1', queryName: 'col1', format: '$0' },\r\n                { displayName: 'col2', queryName: 'col2', format: '#,0', isMeasure: true, }]\r\n        };\r\n\r\n        let seriesMetaData: powerbi.DataViewMetadataColumn = { displayName: 'series', queryName: 'series' };\r\n        let measureColumnDynamic1: powerbi.DataViewMetadataColumn = { displayName: 'sales', queryName: 'selectSales', isMeasure: true, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double), groupName: 'A' };\r\n        let measureColumnDynamic2: powerbi.DataViewMetadataColumn = { displayName: 'sales', queryName: 'selectSales', isMeasure: true, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double), groupName: 'B' };\r\n        let measureColumnDynamic1WithFormats: powerbi.DataViewMetadataColumn = { displayName: 'sales', queryName: 'selectSales', isMeasure: true, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double), objects: { general: { formatString: '$0' } }, groupName: 'A' };\r\n        let measureColumnDynamic2WithFormats: powerbi.DataViewMetadataColumn = { displayName: 'sales', queryName: 'selectSales', isMeasure: true, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double), objects: { general: { formatString: '#,0' } }, groupName: 'B' };\r\n        \r\n        let dataViewMetadata3Measure: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                { displayName: 'col1', queryName: 'col1', isMeasure: true, },\r\n                { displayName: 'col2', queryName: 'col2', isMeasure: true, },\r\n                { displayName: 'col3', queryName: 'col3', isMeasure: true, }]\r\n        };\r\n\r\n        let dataViewMetadata1Category2Measure: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                { displayName: 'col1', queryName: 'col1',  },\r\n                { displayName: 'col2', queryName: 'col2', isMeasure: true, },\r\n                { displayName: 'col3', queryName: 'col3', isMeasure: true, }]\r\n        };\r\n\r\n        let dataViewMetadata1Category2MeasureWithFormat: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                { displayName: 'col1', queryName: 'col1',},\r\n                { displayName: 'col2', queryName: 'col2', isMeasure: true, objects: { general: { formatString: \"\\$#,0;(\\$#,0);\\$#,0\" } } },\r\n                { displayName: 'col3', queryName: 'col3', isMeasure: true, }]\r\n        };\r\n\r\n        let categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'p' });\r\n\r\n        it('DonutChart registered capabilities', () => {\r\n            expect(visualPluginFactory.create().getPlugin('donutChart').capabilities).toBe(powerbi.visuals.donutChartCapabilities);\r\n        });\r\n\r\n        it('Capabilities should not suppressDefaultTitle', () => {\r\n            expect(powerbi.visuals.donutChartCapabilities.suppressDefaultTitle).toBeUndefined();\r\n        });\r\n\r\n        it('Donutchart preferred capabilities requires at least 2 row', () => {\r\n            let dataViewWithSingleRow: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: ['a'],\r\n                        identity: [mocks.dataViewScopeIdentity('a')]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: dataViewMetadata.columns[1],\r\n                        values: [100],\r\n                        subtotal: 100\r\n                    }])\r\n                }\r\n            };\r\n\r\n            let dataViewWithTwoRows: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: ['a', 'b'],\r\n                        identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b')]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: dataViewMetadata.columns[1],\r\n                        values: [100, 200],\r\n                        subtotal: 300\r\n                    }])\r\n                }\r\n            };\r\n\r\n            let plugin = visualPluginFactory.create().getPlugin('donutChart');\r\n            expect(powerbi.DataViewAnalysis.supports(dataViewWithSingleRow, plugin.capabilities.dataViewMappings[0], true)).toBe(false);\r\n            expect(powerbi.DataViewAnalysis.supports(dataViewWithTwoRows, plugin.capabilities.dataViewMappings[0])).toBe(true);\r\n        });\r\n\r\n        describe(\"Data Labels\", () => {\r\n            let v: powerbi.IVisual;\r\n            let element: JQuery;\r\n            let hostServices = powerbitests.mocks.createVisualHostServices();\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: 'col1',\r\n                        type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text),\r\n                        queryName: 'col1',\r\n                    },\r\n                    {\r\n                        displayName: 'col2',\r\n                        isMeasure: true,\r\n                        type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n                        queryName: 'col2',\r\n                    }],\r\n            };\r\n\r\n            beforeEach(() => {\r\n                element = powerbitests.helpers.testDom('500', '650');\r\n                v = visualPluginFactory.createMinerva({}).getPlugin('donutChart').create();\r\n                v.init({\r\n                    element: element,\r\n                    host: hostServices,\r\n                    style: powerbi.visuals.visualStyles.create(),\r\n                    viewport: {\r\n                        height: element.height(),\r\n                        width: element.width()\r\n                    },\r\n                    animation: { transitionImmediate: true },\r\n                });\r\n            });\r\n\r\n            function getOptionsForValueWarning(values: number[]) {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: {\r\n                        show: true,\r\n                        labelStyle: LabelStyle.both\r\n                    },\r\n                };\r\n\r\n                let options = {\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: values,\r\n                            }])\r\n                        }\r\n                    }]\r\n                };\r\n\r\n                return options;\r\n            }\r\n\r\n            it('NaN in values shows a warning', (done) => {\r\n                let warningSpy = jasmine.createSpy('warning');\r\n                hostServices.setWarnings = warningSpy;\r\n\r\n                let options = getOptionsForValueWarning([300, NaN, 700]);\r\n                v.onDataChanged(options);\r\n\r\n                setTimeout(() => {\r\n                    expect(warningSpy).toHaveBeenCalled();\r\n                    expect(warningSpy.calls.count()).toBe(1);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Negative Infinity in values shows a warning', (done) => {\r\n                let warningSpy = jasmine.createSpy('warning');\r\n                hostServices.setWarnings = warningSpy;\r\n\r\n                let options = getOptionsForValueWarning([300, Number.NEGATIVE_INFINITY, 700]);\r\n                v.onDataChanged(options);\r\n\r\n                setTimeout(() => {\r\n                    expect(warningSpy).toHaveBeenCalled();\r\n                    expect(warningSpy.calls.count()).toBe(1);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Positive Infinity in values shows a warning', (done) => {\r\n                let warningSpy = jasmine.createSpy('warning');\r\n                hostServices.setWarnings = warningSpy;\r\n\r\n                let options = getOptionsForValueWarning([300, Number.POSITIVE_INFINITY, 700]);\r\n                v.onDataChanged(options);\r\n\r\n                setTimeout(() => {\r\n                    expect(warningSpy).toHaveBeenCalled();\r\n                    expect(warningSpy.calls.count()).toBe(1);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Out of range value in values shows a warning', (done) => {\r\n                let warningSpy = jasmine.createSpy('warning');\r\n                hostServices.setWarnings = warningSpy;\r\n\r\n                let options = getOptionsForValueWarning([300, 1e301, 700]);\r\n                v.onDataChanged(options);\r\n\r\n                setTimeout(() => {\r\n                    expect(warningSpy).toHaveBeenCalled();\r\n                    expect(warningSpy.calls.count()).toBe(1);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('All are good in values does not show warning', (done) => {\r\n                let warningSpy = jasmine.createSpy('warning');\r\n                hostServices.setWarnings = warningSpy;\r\n\r\n                let options = getOptionsForValueWarning([300, 200, 700]);\r\n                v.onDataChanged(options);\r\n\r\n                setTimeout(() => {\r\n                    expect(warningSpy).toHaveBeenCalledWith([]);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Layout - with labels and without',(done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelPrecision: 0, labelStyle: LabelStyle.data },\r\n                };\r\n\r\n                let dataViews = [{\r\n                    metadata: dataViewMetadataWithLabels,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataWithLabels.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataWithLabels.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }];\r\n                \r\n                v.onDataChanged({\r\n                    dataViews: dataViews,\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    let dataLabelsWidth = v['radius'];\r\n                    dataViewMetadataWithLabels.objects['labels']['show'] = true;\r\n                    dataViewMetadataWithLabels.objects['labels']['labelStyle'] = LabelStyle.category;\r\n                    dataViews[0].metadata = dataViewMetadataWithLabels;\r\n                    v.onDataChanged({\r\n                        dataViews: dataViews,\r\n                    });\r\n                    setTimeout(() => {\r\n                        let categoryLabelsWidth = v['radius'];\r\n                        dataViewMetadataWithLabels.objects['labels']['show'] = false;\r\n                        dataViews[0].metadata = dataViewMetadataWithLabels;\r\n                        v.onDataChanged({\r\n                            dataViews: dataViews,\r\n                        });\r\n                        setTimeout(() => {\r\n                            let noLabelsWidth = v['radius'];\r\n                            expect(dataLabelsWidth).toEqual(categoryLabelsWidth);\r\n                            expect(noLabelsWidth).toBeGreaterThan(categoryLabelsWidth);\r\n                            done();\r\n                        }, DefaultWaitForRender);\r\n                    }, DefaultWaitForRender);\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Show the correct text - measure and category', (done) => {\r\n\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelPrecision: 0, labelStyle: LabelStyle.both },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect($(labels[0]).text()).toBe(\"a (100)\");\r\n                    expect($(labels[1]).text()).toBe(\"b (200)\");\r\n                    expect($(labels[2]).text()).toBe(\"c (700)\");\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Show the correct text - measure with default display units from model', (done) => {\r\n\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.both },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [12345, 15533, 776],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect($(labels[0]).text()).toBe(\"a (12.35K)\");\r\n                    expect($(labels[1]).text()).toBe(\"b (15.53K)\");\r\n                    expect($(labels[2]).text()).toBe(\"c (0.78K)\");\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Show the correct text - measure with display units and no precision', (done) => {\r\n\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelDisplayUnits: 1000, labelPrecision: 0, labelStyle: LabelStyle.both },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [12345, 15533, 776],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect($(labels[0]).text()).toBe(\"a (12K)\");\r\n                    expect($(labels[1]).text()).toBe(\"b (16K)\");\r\n                    expect($(labels[2]).text()).toBe(\"c (1K)\");\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Show the correct text - measure with display units and precision', (done) => {\r\n\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelDisplayUnits: 1000000, labelPrecision: 3, labelStyle: LabelStyle.both },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [12345, 15533, 776],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect($(labels[0]).text()).toBe(\"a (0.012M)\");\r\n                    expect($(labels[1]).text()).toBe(\"b (0.016M)\");\r\n                    expect($(labels[2]).text()).toBe(\"c (0.001M)\");\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Show the correct text - measure', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelPrecision: 0, labelStyle: LabelStyle.data },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect($(labels[0]).text()).toBe(\"100\");\r\n                    expect($(labels[1]).text()).toBe(\"200\");\r\n                    expect($(labels[2]).text()).toBe(\"700\");\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Show the correct text - category', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.category },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect($(labels[0]).text()).toBe(\"a\");\r\n                    expect($(labels[1]).text()).toBe(\"b\");\r\n                    expect($(labels[2]).text()).toBe(\"c\");\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('No data labels', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: false },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let label = element.find(labelsElement);\r\n                    expect($(label[0]).length).toBe(0);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Verify data labels - default style', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.data },\r\n                };\r\n\r\n                let labelColor = powerbi.visuals.dataLabelUtils.defaultLabelColor;\r\n                let opacity = '1';\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    let fill = $(labels[0]).css('fill');\r\n                    helpers.assertColorsMatch(fill, labelColor);\r\n                    expect($(labels[0]).css('opacity')).toBe(opacity);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('check color for legend title and legend items donut chart', (done) => {\r\n                let labelColor = powerbi.visuals.dataLabelUtils.defaultLabelColor;\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.data },\r\n                    legend: {\r\n                        titleText: 'my title text',\r\n                        show: true,\r\n                        showTitle: true,\r\n                        labelColor: { solid: { color: labelColor } },\r\n                    },\r\n                };\r\n                \r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let legend = element.find('.legend');\r\n                    let legendTitle = legend.find('.legendTitle');\r\n                    let legendText = legend.find('.legendItem').find('.legendText');\r\n                    helpers.assertColorsMatch(legendTitle.css('fill'), labelColor);\r\n                    helpers.assertColorsMatch(legendText.first().css('fill'), labelColor);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('check font size for legend title and legend items donut chart', (done) => {\r\n                let labelFontSize = 13;\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.data },\r\n                    legend: {\r\n                        titleText: 'my title text',\r\n                        show: true,\r\n                        showTitle: true,\r\n                        fontSize: labelFontSize,\r\n                    },\r\n                };\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let legend = element.find('.legend');\r\n                    let legendTitle = legend.find('.legendTitle');\r\n                    let legendText = legend.find('.legendItem').find('.legendText');\r\n                    expect(Math.round(parseInt(legendTitle.css('font-size'), 10))).toBe(Math.round(parseInt(PixelConverter.fromPoint(labelFontSize), 10)));\r\n                    expect(Math.round(parseInt(legendText.css('font-size'), 10))).toBe(Math.round(parseInt(PixelConverter.fromPoint(labelFontSize), 10)));\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Verify data labels - changing measure color', (done) => {\r\n                let color = { solid: { color: \"rgb(255, 0, 0)\" } }; // Red\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, color: color, labelStyle: LabelStyle.data },\r\n                };\r\n                \r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    let fill = $(labels[0]).css('fill');\r\n                    helpers.assertColorsMatch(fill, color.solid.color);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Verify data labels - changing category color', (done) => {\r\n                let color = { solid: { color: \"rgb(255, 0, 0)\" } }; // Red\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, color: color, labelStyle: LabelStyle.category },\r\n                };\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    let fill = $(labels[0]).css('fill');\r\n                    helpers.assertColorsMatch(fill, color.solid.color);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Long data labels - big viewport', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.category },\r\n                };\r\n\r\n                v.onResizing({ height: 600, width: 1000 });\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['abcdefghijklmnopqrstuvwxyz', '01234567890123456789', 'abcdefg', 'd', 'e'],\r\n                                identity: [mocks.dataViewScopeIdentity('abcdefghijklmnopqrstuvwxyz'),\r\n                                    mocks.dataViewScopeIdentity('01234567890123456789'),\r\n                                    mocks.dataViewScopeIdentity('abcdefg'),\r\n                                    mocks.dataViewScopeIdentity('d'),\r\n                                    mocks.dataViewScopeIdentity('e')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [110, 120, 130, 140, 150],\r\n                                subtotal: 650\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect($(labels[0]).text()).toBe(\"abcdefghijklmnopqrstuvwxyz\");\r\n                    expect($(labels[1]).text()).toBe(\"01234567890123456789\");\r\n                    expect($(labels[2]).text()).toBe(\"abcdefg\");\r\n                    expect($(labels[3]).text()).toBe(\"d\");\r\n                    expect($(labels[4]).text()).toBe(\"e\");\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Long data labels - small viewport', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.category },\r\n                };\r\n                v.onResizing({ height: 600, width:600 });\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', '01234567890123456789', 'abcdefg', 'd', 'e'],\r\n                                identity: [mocks.dataViewScopeIdentity('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'),\r\n                                    mocks.dataViewScopeIdentity('01234567890123456789'),\r\n                                    mocks.dataViewScopeIdentity('abcdefg'),\r\n                                    mocks.dataViewScopeIdentity('d'),\r\n                                    mocks.dataViewScopeIdentity('e')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [110, 120, 130, 140, 150],\r\n                                subtotal: 650\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect($(labels[0]).text()).toContain('…');\r\n                    expect($(labels[1]).text()).toContain('…');\r\n                    expect($(labels[2]).text()).toBe(\"abcdefg\");\r\n                    expect($(labels[3]).text()).toBe(\"d\");\r\n                    expect($(labels[4]).text()).toBe(\"e\");\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('data labels visibility after resizing', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelPrecision: 0, labelStyle: LabelStyle.both },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'),\r\n                                    mocks.dataViewScopeIdentity('b'),\r\n                                    mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [110, 120, 130],\r\n                                subtotal: 360\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                v.onResizing({\r\n                    height: 600,\r\n                    width: 600,\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect(labels.length).toBe(3);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Data lables with null', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.category },\r\n                };\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect(labels.length).toBe(3);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Verify font size', (done) => {\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, fontSize: 15, labelStyle: LabelStyle.both },\r\n                };\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect(labels.first().css('font-size')).toBe(15 * 4 / 3 + 'px');\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Data labels with multiple formats', (done) => {    \r\n                //override view port size\r\n                element = powerbitests.helpers.testDom('1500', '1500');\r\n                v.init({\r\n                    element: element,\r\n                    host: hostServices,\r\n                    style: powerbi.visuals.visualStyles.create(),\r\n                    viewport: {\r\n                        height: element.height(),\r\n                        width: element.width()\r\n                    },\r\n                    animation: { transitionImmediate: true },\r\n                });\r\n                let dataViewMetadataWithLabels: powerbi.DataViewMetadata = {\r\n                    columns: [\r\n                        {\r\n                            displayName: 'col1',\r\n                            type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text),\r\n                            queryName: 'col1',\r\n                        },\r\n                        {\r\n                            displayName: 'col2',\r\n                            isMeasure: true,\r\n                            type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n                            queryName: 'col1',\r\n                            format: '%#,0',\r\n                        },\r\n                        {\r\n                            displayName: 'col3',\r\n                            isMeasure: true,\r\n                            type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n                            queryName: 'col3',\r\n                            format: '#,0'\r\n                        }],\r\n                    objects: {\r\n                        labels: { show: true, labelPrecision: 0, labelDisplayUnits: null, labelStyle: LabelStyle.data },\r\n                    }\r\n                };\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [10,20,30],\r\n                            }, {\r\n                                    source: dataViewMetadataWithLabels.columns[2],\r\n                                    values: [100,2000, 7000],\r\n                                }])\r\n                        }\r\n                    }]\r\n                });\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    expect(labels.first().text()).toBe('%1,000');\r\n                    expect(labels.last().text()).toBe('7,000');\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Circular margin validation ', (done) => {\r\n\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.both },\r\n                };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [12345, 15533, 776],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    let labels = element.find(labelsElement);\r\n                    \r\n                    //The first label is most right, the second label is most left\r\n                    expect($(labels[0]).attr('x')).toBeGreaterThan($(labels[1]).attr('x'));\r\n                    expect($(labels[0]).attr('x')).toBeGreaterThan($(labels[2]).attr('x'));\r\n                    expect($(labels[2]).attr('x')).toBeGreaterThan($(labels[1]).attr('x'));\r\n                    \r\n                    //The last label is top, the second label is button.\r\n                    expect($(labels[1]).attr('y')).toBeGreaterThan($(labels[0]).attr('y'));\r\n                    expect($(labels[1]).attr('y')).toBeGreaterThan($(labels[2]).attr('y'));\r\n                    expect($(labels[0]).attr('y')).toBeGreaterThan($(labels[2]).attr('y'));\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('Data labels split to two lines', () => {\r\n                let secondLineSelector = '.donutChart .label-second-line';\r\n                let dataViewMetadataWithLabels = powerbi.Prototype.inherit(dataViewMetadata);\r\n                dataViewMetadataWithLabels.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.both },\r\n                };\r\n\r\n                v.onResizing({ height: 500, width: 700 });\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataWithLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataWithLabels.columns[0],\r\n                                values: ['Category Label 1', 'Category Label 2'],\r\n                                identity: [mocks.dataViewScopeIdentity('Category Label 1'),\r\n                                    mocks.dataViewScopeIdentity('Category Label 2')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataWithLabels.columns[1],\r\n                                values: [150, 150],\r\n                                subtotal: 300\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                let labels = element.find(labelsElement);\r\n                expect($(labels[0]).text()).toBe(\"Category Label 1 (150)\");\r\n                expect($(labels[1]).text()).toBe(\"Category Label 2 (150)\");\r\n\r\n                // Label should be split into two lines\r\n                v.onResizing({ height: 500, width: 500 });\r\n                labels = element.find(labelsElement);\r\n                expect($(labels[0]).text()).toBe(\"150\");\r\n                expect($(labels[1]).text()).toBe(\"150\");\r\n\r\n                labels = element.find(secondLineSelector);\r\n                expect($(labels[0]).text()).toBe(\"Category Label 1\");\r\n                expect($(labels[1]).text()).toBe(\"Category Label 2\");\r\n\r\n                // Label should be split into two lines and be truncated\r\n                v.onResizing({ height: 500, width: 300 });\r\n                labels = element.find(secondLineSelector);\r\n                expect($(labels[0]).text()).toContain(\"…\");\r\n                expect($(labels[1]).text()).toContain(\"…\");\r\n\r\n            });\r\n        });\r\n\r\n        describe('converter', () => {\r\n            let categoryIdentities = [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')];\r\n\r\n            it('empty', () => {\r\n\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadata.columns[0],\r\n                                values: []\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadata.columns[1],\r\n                                values: [],\r\n                                subtotal: 0\r\n                            }])\r\n                        }\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let expectSlices: DonutData = {\r\n                    dataPointsToDeprecate: [],\r\n                    dataPointsToEnumerate: [],\r\n                    dataPoints: [],\r\n                    unCulledDataPoints: [],\r\n                    legendData: { title: \"\", dataPoints: [], labelColor: powerbi.visuals.LegendData.DefaultLegendLabelFillColor, fontSize: powerbi.visuals.SVGLegend.DefaultFontSizeInPt },\r\n                    hasHighlights: false,\r\n                    dataLabelsSettings: powerbi.visuals.dataLabelUtils.getDefaultDonutLabelSettings(),\r\n                    legendObjectProperties: undefined,\r\n                    maxValue: 0,\r\n                    visibleGeometryCulled: false,\r\n                };\r\n                expect(actualData).toEqual(expectSlices);\r\n            });\r\n\r\n            it('categorical, with infinity', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [-300, null, Number.POSITIVE_INFINITY]\r\n                        }])\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds: SelectionId[] = categoryIdentities.map(categoryId => SelectionId.createWithIdAndMeasureAndCategory(categoryId, null, dataViewMetadata.columns[0].queryName));\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        measure: -300,\r\n                        value: Math.abs(-300/Number.MAX_VALUE),\r\n                        index: 0,\r\n                        label: 'a',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"-300\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        measure: 0,\r\n                        value: 0.0,\r\n                        index: 1,\r\n                        label: 'b',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                        color: sliceColors[1],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[2],\r\n                        measure: Number.MAX_VALUE,\r\n                        value: 1,\r\n                        index: 2,\r\n                        label: 'c',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"+Infinity\" }],\r\n                        color: sliceColors[2],\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n\r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n            });\r\n\r\n            it('categorical, with slicing', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: ['a', 'b', 'c'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: dataViewMetadata.columns[1],\r\n                        values: [-300, null, 700]\r\n                    }])\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n                \r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds: SelectionId[] = categoryIdentities.map(categoryId => SelectionId.createWithIdAndMeasureAndCategory(categoryId, null, dataViewMetadata.columns[0].queryName));\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                        {\r\n                            identity: selectionIds[0],\r\n                            measure: -300,\r\n                            value: 0.3,\r\n                            index: 0,\r\n                            label: 'a',\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"-300\" }],\r\n                            color: sliceColors[0],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: selectionIds[1],\r\n                            measure: 0,\r\n                            value: 0.0,\r\n                            index: 1,\r\n                            label: 'b',\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                            color: sliceColors[1],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: selectionIds[2],\r\n                            measure: 700,\r\n                            value: 0.7,\r\n                            index: 2,\r\n                            label: 'c',\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"700\" }],\r\n                            color: sliceColors[2],\r\n                            strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n\r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n            });\r\n\r\n            it('categorical, no slicing', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: ['a', 'b', 'c'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: dataViewMetadata.columns[1],\r\n                        values: [-300, null, 700]\r\n                    }])\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds: SelectionId[] = categoryIdentities.map(categoryId => SelectionId.createWithIdAndMeasureAndCategory(categoryId, null, dataViewMetadata.columns[0].queryName));\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                        {\r\n                            identity: selectionIds[0],\r\n                            measure: -300,\r\n                            value: 0.3,\r\n                            index: 0,\r\n                            label: 'a',\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"-300\" }],\r\n                            color: sliceColors[0],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: selectionIds[1],\r\n                            measure: 0,\r\n                            value: 0.0,\r\n                            index: 1,\r\n                            label: 'b',\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                            color: sliceColors[1],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: selectionIds[2],\r\n                            measure: 700,\r\n                            value: 0.7,\r\n                            index: 2,\r\n                            label: 'c',\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"700\" }],\r\n                            color: sliceColors[2],\r\n                            strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n            });\r\n\r\n            it('category and series, with slicing', () => {\r\n\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata1Category2Measure.columns[0],\r\n                        values: ['a', 'b', 'c'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: dataViewMetadata1Category2Measure.columns[1],\r\n                        values: [-200, null, 150],\r\n                        identity: mocks.dataViewScopeIdentity('foo'),\r\n                    }, {\r\n                        source: dataViewMetadata1Category2Measure.columns[2],\r\n                        values: [-300, 300, -50],\r\n                        identity: mocks.dataViewScopeIdentity('bar'),\r\n                    }])\r\n                    },\r\n                    metadata: dataViewMetadata1Category2Measure,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let v = dataView.categorical.values;\r\n                let categoryQueryName = dataView.categorical.categories[0].source.queryName;\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(v[0].source.queryName, v[0].identity, buildSelector(categoryQueryName, categoryIdentities[0])), null),\r\n                        measure: -200,\r\n                        value: 0.2,\r\n                        index: 0,\r\n                        label: 'col2',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"-200\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(v[1].source.queryName, v[1].identity, buildSelector(categoryQueryName, categoryIdentities[0])), null),\r\n                        measure: -300,\r\n                        value: 0.3,\r\n                        index: 1,\r\n                        label: 'col3',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col3\", value: \"-300\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(v[0].source.queryName, v[0].identity, buildSelector(categoryQueryName, categoryIdentities[1])), null),\r\n                        measure: 0,\r\n                        value: 0.0,\r\n                        index: 2,\r\n                        label: 'col2',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                        color: sliceColors[1],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(v[1].source.queryName, v[1].identity, buildSelector(categoryQueryName, categoryIdentities[1])), null),\r\n                        measure: 300,\r\n                        value: 0.3,\r\n                        index: 3,\r\n                        label: 'col3',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col3\", value: \"300\" }],\r\n                        color: sliceColors[1],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(v[0].source.queryName, v[0].identity, buildSelector(categoryQueryName, categoryIdentities[2])), null),\r\n                        measure: 150,\r\n                        value: 0.15,\r\n                        index: 4,\r\n                        label: 'col2',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"150\" }],\r\n                        color: sliceColors[2],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(v[1].source.queryName, v[1].identity, buildSelector(categoryQueryName, categoryIdentities[2])), null),\r\n                        measure: -50,\r\n                        value: 0.05,\r\n                        index: 5,\r\n                        label: 'col3',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col3\", value: \"-50\" }],\r\n                        color: sliceColors[2],\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n\r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints.length).toBe(3);\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n                expect(actualData.legendData.dataPoints[1].label).toBe('b');\r\n                expect(actualData.legendData.dataPoints[2].label).toBe('c');\r\n            });\r\n\r\n            it('categorical, no slicing, formatted color', () => {\r\n\r\n                let hexGreen = \"#00FF00\";\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: ['a', 'b', 'c'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                        objects: [\r\n                            undefined,\r\n                            { dataPoint: { fill: { solid: { color: hexGreen } } } },\r\n                            undefined,\r\n                        ]\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: dataViewMetadata.columns[1],\r\n                        values: [-300, null, 700]\r\n                    }])\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds: SelectionId[] = categoryIdentities.map(categoryId => SelectionId.createWithIdAndMeasureAndCategory(categoryId, null, dataViewMetadata.columns[0].queryName));\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    hexGreen,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        measure: -300,\r\n                        value: 0.3,\r\n                        index: 0,\r\n                        label: 'a',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"-300\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        measure: 0,\r\n                        value: 0.0,\r\n                        index: 1,\r\n                        label: 'b',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                        color: sliceColors[1],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[2],\r\n                        measure: 700,\r\n                        value: 0.7,\r\n                        index: 2,\r\n                        label: 'c',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"700\" }],\r\n                        color: sliceColors[2],\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n            });\r\n\r\n            it('categorical, no slicing, default color', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [-300, null, 700]\r\n                        }])\r\n                    },\r\n                    metadata: null,\r\n                };\r\n\r\n                //red will be used as the default color\r\n                let redHexColor = \"FF0000\";\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors, redHexColor, null, true);\r\n                let selectionIds: SelectionId[] = categoryIdentities.map(categoryId => SelectionId.createWithIdAndMeasureAndCategory(categoryId, null, dataViewMetadata.columns[0].queryName));\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        measure: -300,\r\n                        value: 0.3,\r\n                        index: 0,\r\n                        label: 'a',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"-300\" }],\r\n                        color: redHexColor,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        measure: 0,\r\n                        value: 0.0,\r\n                        index: 1,\r\n                        label: 'b',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                        color: redHexColor,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[2],\r\n                        measure: 700,\r\n                        value: 0.7,\r\n                        index: 2,\r\n                        label: 'c',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"700\" }],\r\n                        color: redHexColor,\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n            });\r\n\r\n            it('categorical, no slicing, formatted color and default color', () => {\r\n\r\n                let hexGreen = \"#00FF00\";\r\n                \r\n                //red will be used as the default color\r\n                let hexDefaultColorRed = \"FF0000\";\r\n\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            objects: [\r\n                                undefined,\r\n                                { dataPoint: { fill: { solid: { color: hexGreen } } } },\r\n                                undefined\r\n                            ]\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [-300, null, 700]\r\n                        }])\r\n                    },\r\n                    metadata: null,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors, hexDefaultColorRed);\r\n                let selectionIds: SelectionId[] = categoryIdentities.map(categoryId => SelectionId.createWithIdAndMeasureAndCategory(categoryId, null, dataViewMetadata.columns[0].queryName));\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        measure: -300,\r\n                        value: 0.3,\r\n                        index: 0,\r\n                        label: 'a',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"-300\" }],\r\n                        color: hexDefaultColorRed,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        measure: 0,\r\n                        value: 0.0,\r\n                        index: 1,\r\n                        label: 'b',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                        color: hexGreen,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[2],\r\n                        measure: 700,\r\n                        value: 0.7,\r\n                        index: 2,\r\n                        label: 'c',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"700\" }],\r\n                        color: hexDefaultColorRed,\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n            });\r\n\r\n            it('categorical multi-measure, with slicing', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata1Category2Measure.columns[0],\r\n                        values: ['a', 'b', 'c'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata1Category2Measure.columns[1],\r\n                            values: [-200, null, 150]\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata1Category2Measure.columns[2],\r\n                            values: [-300, 300, -50]\r\n                        }\r\n                    ])\r\n                    },\r\n                    metadata: dataViewMetadata1Category2Measure,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n\r\n                let categoryQueryName = dataView.categorical.categories[0].source.queryName;\r\n                let expectSlices: DonutDataPoint[] = [\r\n                        {\r\n                            identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[0]), 'col2'),\r\n                            measure: -200,\r\n                            label: 'col2',\r\n                            value: 0.2,\r\n                            index: 0,\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"-200\" }],\r\n                            color: sliceColors[0],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[0]), 'col3'),\r\n                            measure: -300,\r\n                            label: 'col3',\r\n                            value: 0.3,\r\n                            index: 1,\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col3\", value: \"-300\" }],\r\n                            color: sliceColors[0],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[1]), 'col2'),\r\n                            measure: 0,\r\n                            label: 'col2',\r\n                            value: 0,\r\n                            index: 2,\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                            color: sliceColors[1],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[1]), 'col3'),\r\n                            measure: 300,\r\n                            label: 'col3',\r\n                            value: 0.3,\r\n                            index: 3,\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col3\", value: \"300\" }],\r\n                            color: sliceColors[1],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[2]), 'col2'),\r\n                            label: 'col2',\r\n                            measure: 150,\r\n                            value: 0.15,\r\n                            index: 4,\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"150\" }],\r\n                            color: sliceColors[2],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[2]), 'col3'),\r\n                            label: 'col3',\r\n                            measure: -50,\r\n                            value: 0.05,\r\n                            index: 5,\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col3\", value: \"-50\" }],\r\n                            color: sliceColors[2],\r\n                            strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints.length).toBe(3);\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n                expect(actualData.legendData.dataPoints[1].label).toBe('b');\r\n                expect(actualData.legendData.dataPoints[2].label).toBe('c');\r\n            });\r\n\r\n            it('selection state set on converter result', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata1Category2Measure.columns[1],\r\n                                values: [-200, null, 150]\r\n                            },\r\n                            {\r\n                                source: dataViewMetadata1Category2Measure.columns[2],\r\n                                values: [-300, 300, -50]\r\n                            }\r\n                        ])\r\n                    },\r\n                    metadata: dataViewMetadata1Category2Measure,\r\n                };\r\n\r\n                let interactivityService = <powerbi.visuals.InteractivityService>powerbi.visuals.createInteractivityService(powerbitests.mocks.createVisualHostServices());\r\n                let categorySelectionId = SelectionId.createWithId(categoryIdentities[1]);\r\n                interactivityService['selectedIds'] = [categorySelectionId];\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors, null, null, null, interactivityService);\r\n\r\n                expect(actualData.dataPoints[0].data.selected).toBe(false);\r\n                expect(actualData.dataPoints[1].data.selected).toBe(false);\r\n                expect(actualData.dataPoints[2].data.selected).toBe(true);\r\n                expect(actualData.dataPoints[3].data.selected).toBe(true);\r\n                expect(actualData.dataPoints[4].data.selected).toBe(false);\r\n                expect(actualData.dataPoints[5].data.selected).toBe(false);\r\n\r\n                // Legend\r\n                expect(actualData.legendData.dataPoints[0].selected).toBe(false);\r\n                expect(actualData.legendData.dataPoints[1].selected).toBe(true);\r\n                expect(actualData.legendData.dataPoints[2].selected).toBe(false);\r\n            });\r\n\r\n            it('non-categorical single-measure, with infinity', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata3Measure.columns[0],\r\n                                values: [Number.POSITIVE_INFINITY]\r\n                            }\r\n                        ])\r\n                    },\r\n                    metadata: dataViewMetadata3Measure,\r\n                };\r\n\r\n                // Slicing does not come into effect for non-categorical single-measure\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds = dataViewMetadata3Measure.columns.map((c) => SelectionId.createWithMeasure(c.displayName));\r\n                let sliceColors = [donutColors.getColorByIndex(0).value];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        label: 'col1',\r\n                        measure: Number.MAX_VALUE,\r\n                        value: 1.0,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"+Infinity\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('col1');\r\n            });\r\n\r\n            it('non-categorical multi-measure, with slicing', () => {    \r\n                // Explicitly set the color for the first measure.\r\n                let columnWithColor = powerbi.Prototype.inherit(dataViewMetadata3Measure.columns[0]);\r\n                columnWithColor.objects = { dataPoint: { fill: { solid: { color: 'red' } } } };\r\n\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: columnWithColor,\r\n                            values: [200]\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata3Measure.columns[1],\r\n                            values: [-300]\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata3Measure.columns[2],\r\n                            values: [500]\r\n                        }\r\n                    ])\r\n                    },\r\n                    metadata: dataViewMetadata3Measure,\r\n                };\r\n\r\n                // Slicing does not come into effect for non-categorical multi-measure\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds = dataViewMetadata3Measure.columns.map((c) => SelectionId.createWithMeasure(c.displayName));\r\n                \r\n                let sliceColors = [\r\n                    'red',\r\n                    donutColors.getColorByIndex(1).value,\r\n                    donutColors.getColorByIndex(2).value,\r\n                ];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                        {\r\n                            identity: selectionIds[0],\r\n                            label: 'col1',\r\n                            measure: 200,\r\n                            value: 0.2,\r\n                            index: 0,\r\n                            tooltipInfo: [{ displayName: \"col1\", value: \"200\" }],\r\n                            color: sliceColors[0],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: selectionIds[1],\r\n                            label: 'col2',\r\n                            measure: -300,\r\n                            value: 0.3,\r\n                            index: 1,\r\n                            tooltipInfo: [{ displayName: \"col2\", value: \"-300\" }],\r\n                            color: sliceColors[1],\r\n                            strokeWidth: 0,\r\n                        }, {\r\n                            identity: selectionIds[2],\r\n                            label: 'col3',\r\n                            measure: 500,\r\n                            value: 0.5,\r\n                            index: 2,\r\n                            tooltipInfo: [{ displayName: \"col3\", value: \"500\" }],\r\n                            color: sliceColors[2],\r\n                            strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('col1');\r\n            });\r\n\r\n            it('non-categorical single-measure, with slicing', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata3Measure.columns[0],\r\n                            values: [200]\r\n                        }\r\n                    ])\r\n                    },\r\n                    metadata: dataViewMetadata3Measure,\r\n                };\r\n\r\n                // Slicing does not come into effect for non-categorical single-measure\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds = dataViewMetadata3Measure.columns.map((c) => SelectionId.createWithMeasure(c.displayName));\r\n                let sliceColors = [donutColors.getColorByIndex(0).value];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        label: 'col1',\r\n                        measure: 200,\r\n                        value: 1.0,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"200\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('col1');\r\n            });\r\n\r\n            it('non-categorical series, infinity', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: measureColumnDynamic1,\r\n                                values: [Number.POSITIVE_INFINITY],\r\n                                identity: mocks.dataViewScopeIdentity('A'),\r\n                            }, {\r\n                                source: measureColumnDynamic2,\r\n                                values: [300],\r\n                                identity: mocks.dataViewScopeIdentity('B'),\r\n                            }\r\n                        ],\r\n                            [categoryColumnRef],\r\n                        seriesMetaData)\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds = dataView.categorical.values.map((c) => SelectionId.createWithId(c.identity));\r\n                let columnRefId = powerbi.data.SQExprShortSerializer.serializeArray([categoryColumnRef]);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(columnRefId).getColor('A').value,\r\n                    donutColors.getColorScaleByKey(columnRefId).getColor('B').value,\r\n                ];\r\n\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        label: 'A',\r\n                        measure: Number.MAX_VALUE,\r\n                        value: 1.0,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"A\" }, { displayName: \"sales\", value: \"+Infinity\" }],\r\n                        color: sliceColors[0],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        label: 'B',\r\n                        measure: 300,\r\n                        value: Math.abs(300 / Number.MAX_VALUE),\r\n                        index: 1,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"B\" }, { displayName: \"sales\", value: \"300\" }],\r\n                        color: sliceColors[1],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('series');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('A');\r\n                expect(actualData.legendData.dataPoints[1].label).toBe('B');\r\n            });\r\n\r\n            it('non-categorical series', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: measureColumnDynamic1,\r\n                                values: [200],\r\n                                identity: mocks.dataViewScopeIdentity('A'),\r\n                            }, {\r\n                                source: measureColumnDynamic2,\r\n                                values: [300],\r\n                                identity: mocks.dataViewScopeIdentity('B'),\r\n                            }\r\n                        ],\r\n                        [categoryColumnRef],\r\n                        seriesMetaData)\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds = dataView.categorical.values.map((c) => SelectionId.createWithId(c.identity));\r\n                let columnRefId = powerbi.data.SQExprShortSerializer.serializeArray([categoryColumnRef]);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(columnRefId).getColor('A').value,\r\n                    donutColors.getColorScaleByKey(columnRefId).getColor('B').value,\r\n                ];\r\n\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        label: 'A',\r\n                        measure: 200,\r\n                        value: 0.4,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"A\" }, { displayName: \"sales\", value: \"200\" }],\r\n                        color: sliceColors[0],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        label: 'B',\r\n                        measure: 300,\r\n                        value: 0.6,\r\n                        index: 1,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"B\" }, { displayName: \"sales\", value: \"300\" }],\r\n                        color: sliceColors[1],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('series');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('A');\r\n                expect(actualData.legendData.dataPoints[1].label).toBe('B');\r\n            });\r\n\r\n            it('non-categorical series with one series', () => {\r\n                var dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: measureColumnDynamic1,\r\n                                values: [200],\r\n                                identity: mocks.dataViewScopeIdentity('A'),\r\n                            }\r\n                        ],\r\n                        [categoryColumnRef],\r\n                        seriesMetaData)\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                var actualData = DonutChart.converter(dataView, donutColors);\r\n                var selectionIds = dataView.categorical.values.map((c) => SelectionId.createWithId(c.identity));\r\n                var columnRefId = powerbi.data.SQExprShortSerializer.serializeArray([categoryColumnRef]);\r\n                var sliceColors = [\r\n                    donutColors.getColorScaleByKey(columnRefId).getColor('A').value,\r\n                ];\r\n\r\n                var expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        label: 'A',\r\n                        measure: 200,\r\n                        value: 1,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"A\" }, { displayName: \"sales\", value: \"200\" }],\r\n                        color: sliceColors[0],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('series');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('A');\r\n            });\r\n\r\n            it('non-categorical series, formatted color', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: measureColumnDynamic1,\r\n                                values: [200],\r\n                                identity: mocks.dataViewScopeIdentity('col1'),\r\n                            }, {\r\n                                source: measureColumnDynamic2,\r\n                                values: [300],\r\n                                identity: mocks.dataViewScopeIdentity('col2'),\r\n                            }\r\n                        ],\r\n                            [categoryColumnRef],\r\n                        seriesMetaData)\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let groupedValues = dataView.categorical.values.grouped();\r\n                groupedValues[0].objects = { dataPoint: { fill: { solid: { color: 'green' } } } };\r\n                groupedValues[1].objects = { dataPoint: { fill: { solid: { color: 'red' } } } };\r\n                dataView.categorical.values.grouped = () => groupedValues;\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds = dataView.categorical.values.map((c) => SelectionId.createWithId(c.identity));                        \r\n\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        label: 'A',\r\n                        measure: 200,\r\n                        value: 0.4,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"A\" }, { displayName: \"sales\", value: \"200\" }],\r\n                        color: 'green',\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        label: 'B',\r\n                        measure: 300,\r\n                        value: 0.6,\r\n                        index: 1,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"B\" }, { displayName: \"sales\", value: \"300\" }],\r\n                        color: 'red',\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);               \r\n            });           \r\n\r\n            it('data with format string', () => {\r\n                \r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: measureColumnDynamic1WithFormats,\r\n                                values: [200],\r\n                                identity: mocks.dataViewScopeIdentity('A'),\r\n                            }, {\r\n                                source: measureColumnDynamic2WithFormats,\r\n                                values: [300],\r\n                                identity: mocks.dataViewScopeIdentity('B'),\r\n                            }\r\n                        ],\r\n                            [categoryColumnRef],\r\n                        seriesMetaData)\r\n                    },\r\n                    metadata: dataViewMetadataWithFormats,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let selectionIds = dataView.categorical.values.map((c) => SelectionId.createWithId(c.identity));\r\n                let columnRefId = powerbi.data.SQExprShortSerializer.serializeArray([categoryColumnRef]);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(columnRefId).getColor('A').value,\r\n                    donutColors.getColorScaleByKey(columnRefId).getColor('B').value,\r\n                ];\r\n\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        label: 'A',\r\n                        measure: 200,\r\n                        measureFormat: '$0',\r\n                        value: 0.4,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"A\" }, { displayName: \"sales\", value: \"$200\" }],\r\n                        color: sliceColors[0],\r\n                        categoryLabel: 'A',\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        label: 'B',\r\n                        measure: 300,\r\n                        measureFormat: '#,0',\r\n                        value: 0.6,\r\n                        index: 1,\r\n                        tooltipInfo: [{ displayName: \"series\", value: \"B\" }, { displayName: \"sales\", value: \"300\" }],\r\n                        color: sliceColors[1],\r\n                        categoryLabel: 'B',\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n            });\r\n\r\n            it('with highlights', () => {\r\n                // categorical, multi-measure slices, with highlights\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata1Category2Measure.columns[1],\r\n                                values: [200, null, 150],\r\n                                highlights: [100, null, 15],\r\n                            },\r\n                            {\r\n                                source: dataViewMetadata1Category2Measure.columns[2],\r\n                                values: [300, 300, 50],\r\n                                highlights: [150, 75, 50],\r\n                            }\r\n                        ])\r\n                    },\r\n                    metadata: dataViewMetadata1Category2Measure,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let categoryQueryName = dataView.categorical.categories[0].source.queryName;\r\n                let highlightDisplayName = powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName;\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[0]), 'col2'),\r\n                        measure: 200,\r\n                        label: 'col2',\r\n                        highlightRatio: 0.5,\r\n                        highlightValue: 100,\r\n                        value: 0.2,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"200\" }, { displayName: highlightDisplayName, value: \"100\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[0]), 'col3'),\r\n                        measure: 300,\r\n                        label: 'col3',\r\n                        highlightRatio: 0.5,\r\n                        highlightValue: 150,\r\n                        value: 0.3,\r\n                        index: 1,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col3\", value: \"300\" }, { displayName: highlightDisplayName, value: \"150\" }],\r\n                        color: sliceColors[0],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 1,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[1]), 'col2'),\r\n                        measure: 0,\r\n                        label: 'col2',\r\n                        highlightRatio: 1e-9,\r\n                        highlightValue: 0,\r\n                        value: 0,\r\n                        index: 2,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }, { displayName: highlightDisplayName, value: \"0\" }],\r\n                        color: sliceColors[1],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[1]), 'col3'),\r\n                        measure: 300,\r\n                        label: 'col3',\r\n                        highlightRatio: 0.25,\r\n                        highlightValue: 75,\r\n                        value: 0.3,\r\n                        index: 3,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col3\", value: \"300\" }, { displayName: highlightDisplayName, value: \"75\" }],\r\n                        color: sliceColors[1],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[2]), 'col2'),\r\n                        label: 'col2',\r\n                        highlightRatio: 0.1,\r\n                        highlightValue: 15,\r\n                        measure: 150,\r\n                        value: 0.15,\r\n                        index: 4,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"150\" }, { displayName: highlightDisplayName, value: \"15\" }],\r\n                        color: sliceColors[2],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[2]), 'col3'),\r\n                        label: 'col3',\r\n                        highlightRatio: 1,\r\n                        highlightValue: 50,\r\n                        measure: 50,\r\n                        value: 0.05,\r\n                        index: 5,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col3\", value: \"50\" }, { displayName: highlightDisplayName, value: \"50\" }],\r\n                        color: sliceColors[2],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 1,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints.length).toBe(3);\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n                expect(actualData.legendData.dataPoints[1].label).toBe('b');\r\n                expect(actualData.legendData.dataPoints[2].label).toBe('c');\r\n            });\r\n\r\n            //validate tooltip on highlighted values, the first tooptip is regular because highlighted value is 0, another tooltips are highlighted tooltips \r\n            it('with highlights - special case tooltip validation',() => {    \r\n                // categorical, multi-measure slices, zero-highlight as special case\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata1Category2MeasureWithFormat.columns[1],\r\n                                values: [-200, null, 150],\r\n                                highlights: [0, null, 10],\r\n                            }, {\r\n                                source: dataViewMetadata1Category2MeasureWithFormat.columns[2],\r\n                                values: [-300, 300, -50],\r\n                                highlights: [0, 75, 50],\r\n                            }]),\r\n                    },\r\n                    metadata: null,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n               \r\n                let highlightName = powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName;\r\n                \r\n                expect(actualData.dataPoints[0].data.tooltipInfo).toEqual([{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"($200)\" }, { displayName: highlightName, value: \"$0\" }]);\r\n                expect(actualData.dataPoints[1].data.tooltipInfo).toEqual([{ displayName: \"col1\", value: \"a\" }, { displayName: \"col3\", value: \"-300\" }, { displayName: highlightName, value: \"0\" }]);\r\n                expect(actualData.dataPoints[2].data.tooltipInfo).toEqual([{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"$0\" }, { displayName: highlightName, value: \"$0\" }]);\r\n                expect(actualData.dataPoints[3].data.tooltipInfo).toEqual([{ displayName: \"col1\", value: \"b\" }, { displayName: \"col3\", value: \"300\" }, { displayName: highlightName, value: \"75\" }]);\r\n                expect(actualData.dataPoints[4].data.tooltipInfo).toEqual([{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"$150\" }, { displayName: highlightName, value: \"$10\" }]);\r\n                expect(actualData.dataPoints[5].data.tooltipInfo).toEqual([{ displayName: \"col1\", value: \"c\" }, { displayName: \"col3\", value: \"-50\" }, { displayName: highlightName, value: \"50\" }]);\r\n            });\r\n\r\n            //validate tooltip that tooltip info doesn't change if data and category labels are on and off \r\n            it('on/off data lables - tooltip validation', () => {\r\n               \r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata1Category2MeasureWithFormat.columns[1],\r\n                                values: [-200, 100, 150],\r\n                            }, {\r\n                                source: dataViewMetadata1Category2MeasureWithFormat.columns[2],\r\n                                values: [-300, 300, -50],\r\n                            }]),\r\n                    },\r\n                    metadata: null,\r\n                };\r\n\r\n                let tooltipInfo1 = [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"($200)\" }];\r\n                let tooltipInfo2 = [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col3\", value: \"-300\" }];\r\n                let tooltipInfo3 = [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"$100\" }];\r\n                let tooltipInfo4 = [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col3\", value: \"300\" }];\r\n                let tooltipInfo5 = [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"$150\" }];\r\n                let tooltipInfo6 = [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col3\", value: \"-50\" }];\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                expect(actualData.dataPoints[0].data.tooltipInfo).toEqual(tooltipInfo1);\r\n                expect(actualData.dataPoints[1].data.tooltipInfo).toEqual(tooltipInfo2);\r\n                expect(actualData.dataPoints[2].data.tooltipInfo).toEqual(tooltipInfo3);\r\n                expect(actualData.dataPoints[3].data.tooltipInfo).toEqual(tooltipInfo4);\r\n                expect(actualData.dataPoints[4].data.tooltipInfo).toEqual(tooltipInfo5);\r\n                expect(actualData.dataPoints[5].data.tooltipInfo).toEqual(tooltipInfo6);\r\n\r\n                //data labels are on\r\n                dataViewMetadata1Category2Measure.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.data },\r\n                };\r\n                actualData = DonutChart.converter(dataView, donutColors);\r\n                expect(actualData.dataPoints[0].data.tooltipInfo).toEqual(tooltipInfo1);\r\n                expect(actualData.dataPoints[1].data.tooltipInfo).toEqual(tooltipInfo2);\r\n                expect(actualData.dataPoints[2].data.tooltipInfo).toEqual(tooltipInfo3);\r\n\r\n                //data labels and category labels are on\r\n                dataViewMetadata1Category2Measure.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.both },\r\n                };\r\n                actualData = DonutChart.converter(dataView, donutColors);\r\n                expect(actualData.dataPoints[0].data.tooltipInfo).toEqual(tooltipInfo1);\r\n                expect(actualData.dataPoints[1].data.tooltipInfo).toEqual(tooltipInfo2);\r\n                expect(actualData.dataPoints[2].data.tooltipInfo).toEqual(tooltipInfo3);\r\n\r\n                //data labels off and category labels are on\r\n                dataViewMetadata1Category2Measure.objects = {\r\n                    labels: { show: true, labelStyle: LabelStyle.category },\r\n                };\r\n                actualData = DonutChart.converter(dataView, donutColors);\r\n                expect(actualData.dataPoints[0].data.tooltipInfo).toEqual(tooltipInfo1);\r\n                expect(actualData.dataPoints[1].data.tooltipInfo).toEqual(tooltipInfo2);\r\n                expect(actualData.dataPoints[2].data.tooltipInfo).toEqual(tooltipInfo3);\r\n            });\r\n     \r\n            it('with highlights that overflow', () => {    \r\n                // categorical, no slicing - with OverFlow\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata1Category2Measure.columns[0],\r\n                        values: ['a', 'b', 'c'],\r\n                        identity: categoryIdentities,\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata1Category2MeasureWithFormat.columns[1],\r\n                            values: [-200, null, 150],\r\n                            highlights: [-100, null, 250 /* NOTE: this highlight value > the corresponding non-highlight value */],\r\n                        }, {\r\n                            source: dataViewMetadata1Category2MeasureWithFormat.columns[2],\r\n                            values: [-300, 300, -50],\r\n                            highlights: [-150, 75, 50],\r\n                        }]),\r\n                    },\r\n                    metadata: null,\r\n                };\r\n\r\n                let actualData = DonutChart.converter(dataView, donutColors);\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let categoryQueryName = dataView.categorical.categories[0].source.queryName;\r\n                let highlightName = powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName;\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[0]), 'col2'),\r\n                        measure: -100,\r\n                        measureFormat: \"\\$#,0;(\\$#,0);\\$#,0\",\r\n                        label: 'col2',\r\n                        value: 0.16,\r\n                        highlightRatio: 1.0,\r\n                        index: 0,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"($100)\" }],\r\n                        color: sliceColors[0],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[0]), 'col3'),\r\n                        measure: -150,\r\n                        measureFormat: undefined,\r\n                        label: 'col3',\r\n                        value: 0.24,\r\n                        highlightRatio: 1.0,\r\n                        index: 1,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col3\", value: \"-150\" }],\r\n                        color: sliceColors[0],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[1]), 'col2'),\r\n                        label: 'col2',\r\n                        measure: 0,\r\n                        measureFormat: \"\\$#,0;(\\$#,0);\\$#,0\",\r\n                        value: 0.0,\r\n                        highlightRatio: 1.0,\r\n                        index: 2,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"$0\" }],\r\n                        color: sliceColors[1],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[1]), 'col3'),\r\n                        label: 'col3',\r\n                        measure: 75,\r\n                        measureFormat: undefined,\r\n                        value: 0.12,\r\n                        highlightRatio: 1.0,\r\n                        index: 3,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col3\", value: \"75\" }],\r\n                        color: sliceColors[1],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[2]), 'col2'),\r\n                        measure: 250,\r\n                        measureFormat: \"\\$#,0;(\\$#,0);\\$#,0\",\r\n                        label: 'col2',\r\n                        value: 0.4,\r\n                        highlightRatio: 1.0,\r\n                        index: 4,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"$250\" }],\r\n                        color: sliceColors[2],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[2]), 'col3'),\r\n                        measure: 50,\r\n                        measureFormat: undefined,\r\n                        label: 'col3',\r\n                        value: 0.08,\r\n                        highlightRatio: 1.0,\r\n                        index: 5,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col3\", value: \"50\" }],\r\n                        color: sliceColors[2],\r\n                        labelFormatString: undefined,\r\n                        strokeWidth: 1,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n            });\r\n\r\n            it('with culling', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [100, 0, 300]\r\n                        }])\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let viewPort = { height: 10, width: 10 };\r\n                let actualData = DonutChart.converter(dataView, donutColors, null, viewPort, false);\r\n                let selectionIds: SelectionId[] = categoryIdentities.map(categoryId => SelectionId.createWithIdAndMeasureAndCategory(categoryId, null, dataViewMetadata.columns[0].queryName));\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        measure: 100,\r\n                        value: 0.25,\r\n                        index: 0,\r\n                        label: 'a',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"100\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[2],\r\n                        measure: 300,\r\n                        value: 0.75,\r\n                        index: 2,\r\n                        label: 'c',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"300\" }],\r\n                        color: sliceColors[2],\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n            });\r\n\r\n            it('without culling', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [100, 0, 300]\r\n                        }])\r\n                    },\r\n                    metadata: dataViewMetadata,\r\n                };\r\n\r\n                let viewPort = { height: 10, width: 10 };\r\n                let actualData = DonutChart.converter(dataView, donutColors, null, viewPort, true);\r\n                let selectionIds: SelectionId[] = categoryIdentities.map(categoryId => SelectionId.createWithIdAndMeasureAndCategory(categoryId, null, dataViewMetadata.columns[0].queryName));\r\n                let categoryColumnId = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.categories[0].identityFields);\r\n                let sliceColors = [\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('a').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('b').value,\r\n                    donutColors.getColorScaleByKey(categoryColumnId).getColor('c').value,\r\n                ];\r\n                let expectSlices: DonutDataPoint[] = [\r\n                    {\r\n                        identity: selectionIds[0],\r\n                        measure: 100,\r\n                        value: 0.25,\r\n                        index: 0,\r\n                        label: 'a',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"100\" }],\r\n                        color: sliceColors[0],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[1],\r\n                        measure: 0,\r\n                        value: 0.0,\r\n                        index: 1,\r\n                        label: 'b',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"0\" }],\r\n                        color: sliceColors[1],\r\n                        strokeWidth: 0,\r\n                    }, {\r\n                        identity: selectionIds[2],\r\n                        measure: 300,\r\n                        value: 0.75,\r\n                        index: 2,\r\n                        label: 'c',\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"300\" }],\r\n                        color: sliceColors[2],\r\n                        strokeWidth: 0,\r\n                    }].map(buildDataPoint);\r\n                expect(actualData.dataPoints.map((value) => value.data)).toEqual(expectSlices);\r\n                \r\n                // Legend\r\n                expect(actualData.legendData.title).toBe('col1');\r\n                expect(actualData.legendData.dataPoints[0].label).toBe('a');\r\n            });\r\n        });\r\n\r\n        it('non-categorical multi-measure tooltip values test', () => {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'a', queryName: 'a', isMeasure: true },\r\n                    { displayName: 'b', queryName: 'b', isMeasure: true },\r\n                    { displayName: 'c', queryName: 'c', isMeasure: true }\r\n                ]\r\n            };\r\n\r\n            let dataView: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: [1],\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [2],\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[2],\r\n                            values: [3],\r\n                        }\r\n                    ])\r\n                }\r\n            };\r\n\r\n            let actualData = DonutChart.converter(dataView, donutColors);\r\n            \r\n            expect(actualData.dataPoints[0].data.tooltipInfo).toEqual([{ displayName: 'a', value: '1' }]);\r\n            expect(actualData.dataPoints[1].data.tooltipInfo).toEqual([{ displayName: 'b', value: '2' }]);\r\n            expect(actualData.dataPoints[2].data.tooltipInfo).toEqual([{ displayName: 'c', value: '3' }]);\r\n        });\r\n\r\n        it('validate tooltip info not being created when tooltips are disabled', () => {\r\n            let dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'a', queryName: 'a', isMeasure: true },\r\n                    { displayName: 'b', queryName: 'b', isMeasure: true },\r\n                    { displayName: 'c', queryName: 'c', isMeasure: true }\r\n                ]\r\n            };\r\n\r\n            let dataView: powerbi.DataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: [1],\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: [2],\r\n                        },\r\n                        {\r\n                            source: dataViewMetadata.columns[2],\r\n                            values: [3],\r\n                        }\r\n                    ])\r\n                }\r\n            };\r\n\r\n            let actualData = DonutChart.converter(dataView, donutColors, undefined, undefined, undefined, undefined, false);\r\n\r\n            expect(actualData.dataPoints[0].data.tooltipInfo).toBeUndefined();\r\n            expect(actualData.dataPoints[1].data.tooltipInfo).toBeUndefined();\r\n            expect(actualData.dataPoints[2].data.tooltipInfo).toBeUndefined();\r\n        });\r\n\r\n        function buildDataPoint(data: { identity: SelectionId; measure: number; highlightRatio?: number; highlightValue?: number; measureFormat?: string; value: number; index: any; label: string; tooltipInfo?: powerbi.visuals.TooltipDataItem[]; highlightedTooltipInfo?: powerbi.visuals.TooltipDataItem[]; color?: string; strokeWidth: number; labelFormatString?: string; }): DonutDataPoint {\r\n            return <DonutDataPoint> {\r\n                identity: data.identity,\r\n                measure: data.measure,\r\n                measureFormat: data.measureFormat,\r\n                percentage: data.value,\r\n                index: data.index,\r\n                label: data.label,\r\n                selected: false,\r\n                highlightRatio: data.highlightRatio,\r\n                highlightValue: data.highlightValue,\r\n                tooltipInfo: data.tooltipInfo,\r\n                color: data.color,\r\n                strokeWidth: data.strokeWidth,\r\n                labelFormatString: data.labelFormatString\r\n            };\r\n        }\r\n    });\r\n\r\n    function pieChartDomValidation(interactiveChart: boolean, hasLegendObject: boolean) {\r\n        let v: powerbi.IVisual;\r\n        let element: JQuery;\r\n        let hostServices: powerbi.IVisualHostServices;\r\n\r\n        let dataViewMetadataTwoColumn: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: 'col1',\r\n                    queryName: 'col1',\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                }, {\r\n                    displayName: 'col2',\r\n                    queryName: 'col2',\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                }\r\n            ],\r\n        };\r\n\r\n        if (hasLegendObject) {\r\n            dataViewMetadataTwoColumn.objects = { legend: { show: true } };\r\n        }\r\n        else {\r\n            dataViewMetadataTwoColumn.objects = {\r\n                labels: {\r\n                    show: true, labelStyle: LabelStyle.category\r\n                }\r\n            };\r\n        }\r\n\r\n        let dataViewMetadata1Category2Measure: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                { displayName: 'col1', queryName: 'col1' },\r\n                { displayName: 'col2', queryName: 'col2', isMeasure: true },\r\n                { displayName: 'col3', queryName: 'col3', isMeasure: true }]\r\n        };\r\n        if (hasLegendObject) {\r\n            dataViewMetadata1Category2Measure.objects = { legend: { show: true } };\r\n        }\r\n        else {\r\n            dataViewMetadata1Category2Measure.objects = undefined;\r\n        }\r\n\r\n        let categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'p' });\r\n\r\n        beforeEach(() => {\r\n            hostServices = mocks.createVisualHostServices();\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            if (interactiveChart)\r\n                v = visualPluginFactory.createMobile().getPlugin('pieChart').create();\r\n            else\r\n                v = visualPluginFactory.createMinerva({}).getPlugin('pieChart').create();\r\n            v.init({\r\n                element: element,\r\n                host: hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                interactivity: { isInteractiveLegend: interactiveChart, selection: true },\r\n                animation: { transitionImmediate: true }\r\n            });\r\n        });\r\n\r\n        it('pie chart dom validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                expect($('.donutChart .slice').length).toBe(3);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart dom validation with partial highlights', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                            highlights: [50, 0, 300],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n\r\n                let dimmedOpacity = interactiveChart ? 0.6 : powerbi.visuals.ColumnUtil.DimmedOpacity;\r\n                let slices = $('.donutChart .slice');\r\n                expect(slices.length).toBe(3);\r\n                slices.each((i, element) =>\r\n                    expect(parseFloat($(element).css('fill-opacity'))).toBeCloseTo(dimmedOpacity, 0)\r\n                    );\r\n\r\n                let highlightSlices = $('.donutChart .slice-highlight');\r\n                expect(highlightSlices.length).toBe(3);\r\n                highlightSlices.each((i, element) =>\r\n                    expect(parseFloat($(element).css('fill-opacity'))).toBeCloseTo(powerbi.visuals.ColumnUtil.DefaultOpacity, 2)\r\n                    );\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart should clear dom validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                expect($('.donutChart .slice').length).toBe(3);\r\n                if (interactiveChart)\r\n                    expect($('.legend-item').length).toBe(3);\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataTwoColumn,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataTwoColumn.columns[0],\r\n                                values: [],\r\n                                identity: [],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataTwoColumn.columns[1],\r\n                                values: [],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    expect($('.donutChart')).toBeInDOM();\r\n                    expect($('.donutChart .slice').length).toBe(0);\r\n                    if (interactiveChart)\r\n                        expect($('.legend-item').length).toBe(0);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart dom validation with slices', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadata1Category2Measure,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata1Category2Measure.columns[1],\r\n                                values: [200, 100, 150]\r\n                            }, {\r\n                                source: dataViewMetadata1Category2Measure.columns[2],\r\n                                values: [300, 200, 50]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                expect($('.donutChart .slice').length).toBe(6);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart dom validation with normal slices', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [300, 300, 400],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let svg = $('.donutChart');\r\n                expect(svg).toBeInDOM();\r\n\r\n                // Disabling test due to instability in test infrastructure.\r\n                //expect($('.donutChart polyline').filter(function () {\r\n                //       return $(this).css('opacity') === '0.5'\r\n                //    }).length).toBe(3);\r\n\r\n                //expect(svg.attr('height')).toBe(initialHeight);\r\n                //expect(svg.attr('width')).toBe(initialWidth);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart label dom validation with thin slices', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [5, 990, 5],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                \r\n                // lines are not present on interactive legend mode, and currently if regular legend is on we hide labels\r\n                if (!interactiveChart && !hasLegendObject) {\r\n                    expect($('.donutChart polyline').length).toBe(3);\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender * 2);\r\n        });\r\n        \r\n        it('pie chart with duplicate labels dom validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['abc', 'abc', 'abc'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                expect($('.donutChart .slice').length).toBe(3);\r\n                if (!interactiveChart && !hasLegendObject) {\r\n                    expect($('.donutChart polyline').length).toBe(3);\r\n                    expect($(labelsElement).length).toBe(3);\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart labels visibility after resize', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n            v.onResizing({ height: 600, width: 600 });\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                if (!interactiveChart && !hasLegendObject) {\r\n                    expect($(labelsElement).length).toBe(3);\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart dom validation with very long labels', (done) => {\r\n            //make sure category labels on\r\n            let dataViewMetadataTwoColumnLabels = powerbi.Prototype.inherit(dataViewMetadataTwoColumn);\r\n            dataViewMetadataTwoColumnLabels.objects = { labels: { show: true, labelStyle: LabelStyle.category } };\r\n\r\n            v.onResizing({ height: 600, width: 400 });\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumnLabels,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[0],\r\n                            values: ['John Domo Who lives far far away', 'Delta Force of the 56th Battalion 2015', 'Jean Tablau from the silicon valley'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[1],\r\n                            values: [300, 300, 400],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                let labels = $('.labels').find('text');\r\n                for (let i = 0; i < labels.length; i++) {\r\n                    let text = $(labels[i]).text().substr(-1);\r\n                    expect(text).toEqual('…');\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart culling invisible slices validation', (done) => {\r\n            spyOn(hostServices, 'setWarnings').and.callThrough();\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 50, 0.000001],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                if (interactiveChart) {\r\n                    // Culling is disabled on interactive charts\r\n                    expect($('.donutChart .slice').length).toBe(3);\r\n                }\r\n                else {\r\n                    expect($('.donutChart .slice').length).toBe(2);\r\n                }\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart opacity validation with overlapping slices', (done) => {\r\n            dataViewMetadataTwoColumn.objects = {\r\n                labels: { show: true, labelStyle: LabelStyle.category },\r\n            };\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['abc', 'def', 'ghi', 'jkl'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c'), mocks.dataViewScopeIdentity('d')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [1, 1, 5, 90],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                if (!interactiveChart && !hasLegendObject) {\r\n                    expect($('.donutChart .line-label').filter(function () {\r\n                        return $(this).css('opacity') === '0.5';\r\n                    }).length).toBe(3);\r\n                    expect($(labelsElement).length).toBe(3);\r\n                }\r\n                \r\n                // lines are not present on interactive legend mode, and currently if regular legend is on we hide labels\r\n                if (interactiveChart) {\r\n                    expect($('.donutChart .donutChart polyline').filter(function () {\r\n                        return $(this).css('opacity') === '0.5';\r\n                    }).length).toBe(0);\r\n                    expect($(labelsElement).length).toBe(0);\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender * 2);\r\n        });\r\n\r\n        it('pie chart radius calculation validation', (done) => {\r\n            // spy on calculateRadius() method\r\n            let pieChart: any = v;\r\n            spyOn(pieChart, 'calculateRadius').and.callThrough();\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['abc', 'def', 'ghi', 'jkl'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c'), mocks.dataViewScopeIdentity('d')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [2, 3, 4, 90],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                \r\n                // verify the calculateRadius() was called during the rendering on the visual \r\n                expect(pieChart.calculateRadius).toHaveBeenCalled();\r\n                \r\n                // call calculateRadius() and test for the result, based on whether the chart is interactive or not\r\n                let radiusResult = pieChart.calculateRadius();\r\n                let height = $('.donutChart').height();\r\n                let width = $('.donutChart').width();\r\n                let widthOrHeight = Math.min(width, height);\r\n\r\n                let hw = height / width;\r\n                let denom = 2 + (1 / (1 + Math.exp(-5 * (hw - 1))));\r\n\r\n                let expectedRadius = interactiveChart ? widthOrHeight / 2 : widthOrHeight / denom;\r\n                expect(radiusResult).toBeCloseTo(expectedRadius, 0);\r\n                done();\r\n            }, DefaultWaitForRender * 2);\r\n        });\r\n\r\n        it('pie chart slice select', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            let slices = $('.donutChart .slice');\r\n            let sliceToClickIndex = 1;\r\n            let sliceToClick = $(slices[sliceToClickIndex]);\r\n            let otherSlices = slices.not(sliceToClick);\r\n            let renderLegend = dataViewMetadataTwoColumn.objects && dataViewMetadataTwoColumn.objects['legend'];\r\n\r\n            slices.each(function () {\r\n                expect(parseFloat($(this).css('fill-opacity'))).toBe(1);\r\n            });\r\n\r\n            let pieChart: any = v;\r\n            if (interactiveChart) {\r\n                let interactivityState = pieChart.interactivityState;\r\n                var pieLegend = interactivityState.interactiveLegend;\r\n\r\n                spyOn(pieChart, 'setInteractiveChosenSlice').and.callThrough();\r\n                spyOn(pieLegend, 'updateLegend').and.callThrough();\r\n            }\r\n\r\n            // Click the first slice\r\n            (<any>sliceToClick).d3Click();\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart .slice').length).toBe(3);\r\n                if (interactiveChart) {\r\n                    expect(pieChart.setInteractiveChosenSlice).toHaveBeenCalledWith(sliceToClickIndex);\r\n                    expect(pieLegend.updateLegend).toHaveBeenCalledWith(sliceToClickIndex);\r\n                }\r\n                else {\r\n                    expect(parseFloat(sliceToClick.css('fill-opacity'))).toBe(1);\r\n                    otherSlices.each(function () {\r\n                        expect(parseFloat($(this).css('fill-opacity'))).toBeLessThan(1);\r\n                    });\r\n\r\n                    // Legend\r\n                    if (renderLegend) {\r\n                        expect($('.legend .item').length).toBe(3);\r\n                        let icons = $('.legend .icon.tall');\r\n                        expect(icons[sliceToClickIndex].style.backgroundColor).toBe('rgb(55, 70, 73)');\r\n                        expect(icons[0].style.backgroundColor).toBe('rgb(166, 166, 166)');\r\n                        expect(icons[2].style.backgroundColor).toBe('rgb(166, 166, 166)');\r\n                    }\r\n                }\r\n\r\n                // Click the background\r\n                let clearCatcher = $('.clearCatcher');\r\n                (<any>clearCatcher).d3Click();\r\n\r\n                setTimeout(() => {\r\n                    slices.each(function () {\r\n                        expect(parseFloat($(this).css('fill-opacity'))).toBe(1);\r\n                    });\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart selecting a slice triggers select', () => {\r\n            if (interactiveChart) {\r\n                // not applicable to interactive charts\r\n                expect($('.donutChart')).toBeInDOM();\r\n                return;\r\n            }\r\n\r\n            let identities = [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')];\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: identities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            let onSelectSpy = spyOn(hostServices, 'onSelect');\r\n\r\n            let slices = $('.donutChart .slice');\r\n            let sliceToClick = 1;\r\n            (<any>$(slices[sliceToClick])).d3Click();\r\n\r\n            expect(onSelectSpy).toHaveBeenCalled();\r\n            expect(onSelectSpy.calls.argsFor(0)[0].data[0]).toEqual({ data: [identities[sliceToClick]] });\r\n        });\r\n\r\n        it('pie chart highlighted slice select', (done) => {\r\n            if (interactiveChart) {\r\n                // not applicable to interactive charts\r\n                expect($('.donutChart')).toBeInDOM();\r\n                done();\r\n                return;\r\n            }\r\n\r\n            let identities = [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')];\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: identities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                            highlights: [50, 100, 350],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            let slices = $('.donutChart .slice');\r\n            let sliceToClickIndex = 1;\r\n            let sliceToClick = $(slices[sliceToClickIndex]);\r\n            let otherSlices = slices.not(sliceToClick);\r\n\r\n            // Click the first slice\r\n            (<any>sliceToClick).d3Click();\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart .slice').length).toBe(3);\r\n                expect(parseFloat(sliceToClick.css('fill-opacity'))).toBe(1);\r\n                otherSlices.each(function () {\r\n                    expect(parseFloat($(this).css('fill-opacity'))).toBeLessThan(1);\r\n                });\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart selecting a highlighted slice triggers select', () => {\r\n            if (interactiveChart) {\r\n                // not applicable to interactive charts\r\n                expect($('.donutChart')).toBeInDOM();\r\n                return;\r\n            }\r\n\r\n            let identities = [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')];\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: identities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                            highlights: [50, 100, 350],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            let onSelectSpy = spyOn(hostServices, 'onSelect');\r\n\r\n            let slices = $('.donutChart .slice-highlight');\r\n            let sliceToClick = 1;\r\n            (<any>$(slices[sliceToClick])).d3Click();\r\n\r\n            expect(onSelectSpy).toHaveBeenCalled();\r\n            expect(onSelectSpy.calls.argsFor(0)[0].data[0]).toEqual({ data: [identities[sliceToClick]] });\r\n        });\r\n\r\n        it('pie chart slice multi-select', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            let slices = $('.donutChart .slice');\r\n            let slicesToClickIndex = [1, 2];\r\n            let slicesToClick = $(slices).slice(1, 3);\r\n            let otherSlices = slices.not(slicesToClick);\r\n            let renderLegend = dataViewMetadataTwoColumn.objects && dataViewMetadataTwoColumn.objects['legend'];\r\n\r\n            slices.each(function () {\r\n                expect(parseFloat($(this).css('fill-opacity'))).toBe(1);\r\n            });\r\n\r\n            let pieChart: any = v;\r\n            if (interactiveChart) {\r\n                let interactivityState = pieChart.interactivityState;\r\n                var pieLegend = interactivityState.interactiveLegend;\r\n\r\n                spyOn(pieChart, 'setInteractiveChosenSlice').and.callThrough();\r\n                spyOn(pieLegend, 'updateLegend').and.callThrough();\r\n            }\r\n\r\n            // Click the first slice, then the second with ctrl key\r\n            (<any>slicesToClick.eq(0)).d3Click();\r\n            (<any>slicesToClick.eq(1)).d3Click(0, 0, powerbitests.helpers.ClickEventType.CtrlKey);\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart .slice').length).toBe(3);\r\n                if (interactiveChart) {\r\n                    slicesToClickIndex.forEach((i) => {\r\n                        expect(pieChart.setInteractiveChosenSlice).toHaveBeenCalledWith(i);\r\n                        expect(pieLegend.updateLegend).toHaveBeenCalledWith(i);\r\n                    });\r\n                }\r\n                else {\r\n\r\n                    otherSlices.each(function () {\r\n                        expect(parseFloat($(this).css('fill-opacity'))).toBeLessThan(1);\r\n                    });\r\n\r\n                    // Legend\r\n                    if (renderLegend) {\r\n                        expect($('.legend .item').length).toBe(3);\r\n                        let icons = $('.legend .icon.tall');\r\n                        expect(icons[0].style.backgroundColor).toBe('rgb(166, 166, 166)');\r\n                        expect(icons[1].style.backgroundColor).toBe('rgb(157, 73, 140)');\r\n                        expect(icons[2].style.backgroundColor).toBe('rgb(187, 203, 80)');\r\n                        let labels = $('.labels').find('text');\r\n                        expect($(labels[0]).css('opacity')).toBe('0');\r\n                        expect($(labels[1]).css('opacity')).toBe('0');\r\n                        expect($(labels[2]).css('opacity')).toBe('0');\r\n                    }\r\n                    else {\r\n                        expect($(labelsElement).length).toBe(3);\r\n                    }\r\n                }\r\n\r\n                // Click the background\r\n                let clearCatcher = $('.clearCatcher');\r\n                (<any>clearCatcher).d3Click();\r\n\r\n                setTimeout(() => {\r\n                    slices.each(function () {\r\n                        expect(parseFloat($(this).css('fill-opacity'))).toBe(1);\r\n                    });\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart stroke validation', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 50,20],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let slices = $('.donutChart .slice');\r\n                for (let i = 0; i < slices.length; i++) {\r\n                    expect(slices[i].style.strokeWidth).toBe(\"0px\");\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart stroke validation - categorical multi-measure', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadata1Category2Measure,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata1Category2Measure.columns[1],\r\n                                values: [200, 100, 150]\r\n                            }, {\r\n                                source: dataViewMetadata1Category2Measure.columns[2],\r\n                                values: [300, 200, 50]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let slices = $('.donutChart .slice');\r\n                expect(slices.length).toBe(6);\r\n                for (let i = 0; i < slices.length; i++) {\r\n                    if(i % 2 === 0)\r\n                        expect(slices[i].style.strokeWidth).toBe(\"0px\");\r\n                    else\r\n                        expect(slices[i].style.strokeWidth).toBe(\"1px\");\r\n                }\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart stroke validation - categorical multi-measure with small values', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadata1Category2Measure,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata1Category2Measure.columns[1],\r\n                                values: [1, 1000, 1500]\r\n                            }, {\r\n                                source: dataViewMetadata1Category2Measure.columns[2],\r\n                                values: [1000, 1, 50]\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let slices = $('.donutChart .slice');\r\n                if (!interactiveChart) {\r\n                    //The slices with very small values are not drawn\r\n                    expect(slices.length).toBe(4);\r\n                    for (let i = 0; i < slices.length - 1; i++) {\r\n                        expect(slices[i].style.strokeWidth).toBe(\"0px\");\r\n                    }\r\n                    //only last slice get stroke width 1 \r\n                    expect(slices[slices.length - 1].style.strokeWidth).toBe(\"1px\");\r\n                }\r\n                else {\r\n                    expect(slices.length).toBe(6);\r\n                    for (let i = 0; i < slices.length; i++) {\r\n                        if (i % 2 === 0)\r\n                            expect(slices[i].style.strokeWidth).toBe(\"0px\");\r\n                        else\r\n                            expect(slices[i].style.strokeWidth).toBe(\"1px\");\r\n                    }\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart stroke validation - with highlight', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 50, 20],\r\n                            highlights: [50, 20, 5],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let slices = $('.donutChart .slice');\r\n                let highlightSlices = $('.donutChart .slice-highlight');\r\n                for (let i = 0; i < slices.length; i++) {\r\n                    expect(slices[i].style.strokeWidth).toBe(\"0px\");\r\n                    expect(highlightSlices[i].style.strokeWidth).toBe(\"0px\");\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart stroke validation - categorical multi-measure with highlight', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadata1Category2Measure,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([\r\n                            {\r\n                                source: dataViewMetadata1Category2Measure.columns[1],\r\n                                values: [200, 100, 150],\r\n                                highlights: [100, 60, 130],\r\n                            }, {\r\n                                source: dataViewMetadata1Category2Measure.columns[2],\r\n                                values: [300, 200, 50],\r\n                                highlights: [50, 20, 5],\r\n                            }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let slices = $('.donutChart .slice');\r\n                let highlightSlices = $('.donutChart .slice-highlight');\r\n                expect(slices.length).toBe(6);\r\n                expect(highlightSlices.length).toBe(6);\r\n                for (let i = 0; i < slices.length; i++) {\r\n                    if (i % 2 === 0) {\r\n                        expect(slices[i].style.strokeWidth).toBe(\"0px\");\r\n                        expect(highlightSlices[i].style.strokeWidth).toBe(\"0px\");\r\n                    }\r\n                    else {\r\n                        expect(slices[i].style.strokeWidth).toBe(\"1px\");\r\n                        expect(highlightSlices[i].style.strokeWidth).toBe(\"1px\");\r\n                    }\r\n                }\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart labels visibility - moving guide line up or down by 25% of the slice perimeter where labels are truncated ', (done) => {\r\n            //category labels on\r\n            let dataViewMetadataTwoColumnLabels = powerbi.Prototype.inherit(dataViewMetadataTwoColumn);\r\n            dataViewMetadataTwoColumnLabels.objects = { labels: { show: true, labelStyle: LabelStyle.data } };\r\n            v.onResizing({ height: 600, width: 600 });\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumnLabels,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[0],\r\n                            values: ['John Domo Who lives far far away', 'Delta Force of the 56th Battalion 2015', 'Jean Tablau from the silicon valley'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[1],\r\n                            values: [300, 300, 400],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let labelsBefore = element.find(labelsElement);\r\n                let labelsBeforeY1 = $(labelsBefore[0]).attr('y');\r\n                let labelsBeforeY2 = $(labelsBefore[1]).attr('y');\r\n                let labelsBeforeY3 = $(labelsBefore[2]).attr('y');\r\n                \r\n                //add data labels \r\n                dataViewMetadataTwoColumnLabels.objects = { labels: { show: true, labelStyle: LabelStyle.both } };\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataTwoColumnLabels,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataTwoColumnLabels.columns[0],\r\n                                values: ['John Domo Who lives far far away', 'Delta Force of the 56th Battalion 2015', 'Jean Tablau from the silicon valley'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataTwoColumnLabels.columns[1],\r\n                                values: [300, 300, 400],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                if (!interactiveChart) {\r\n                    let labelsAfter = element.find(labelsElement);\r\n                    let labelsAfterY1 = $(labelsAfter[0]).attr('y');\r\n                    let labelsAfterY2 = $(labelsAfter[1]).attr('y');\r\n                    let labelsAfterY3 = $(labelsAfter[2]).attr('y');\r\n\r\n                    //labels move up or down by 25% of the slice perimeter, that whole label will be fit.\r\n                    expect(+labelsBeforeY1).toBeGreaterThan(+labelsAfterY1);\r\n                    expect(+labelsBeforeY2).toBeLessThan(labelsAfterY2);\r\n                    expect(+labelsBeforeY3).toBeGreaterThan(+labelsAfterY3);\r\n                }\r\n                else\r\n                    expect($(labelsBefore).length).toBe(0);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart labels visibility - moving guide line up or down by 25% of the slice perimeter where labels have conflict', (done) => {\r\n           \r\n            //category labels on\r\n            let dataViewMetadataTwoColumnLabels = powerbi.Prototype.inherit(dataViewMetadataTwoColumn);\r\n            dataViewMetadataTwoColumnLabels.objects = { labels: { show: true, labelStyle: LabelStyle.data } };\r\n            v.onResizing({ height: 600, width: 600 });\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumnLabels,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[0],\r\n                            values: ['John Domo', 'Delta Force', 'Jean Tablau'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[1],\r\n                            values: [3, 14, 400],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let labels = element.find(labelsElement);\r\n                if (!interactiveChart) \r\n                    expect($(labels).length).toBe(3);\r\n                else\r\n                    expect($(labels).length).toBe(0);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart labels visibility - moving guide line up or down by 25% of the slice perimeter where lines have conflict', (done) => {\r\n            \r\n            //category labels on\r\n            let dataViewMetadataTwoColumnLabels = powerbi.Prototype.inherit(dataViewMetadataTwoColumn);\r\n            dataViewMetadataTwoColumnLabels.objects = { categoryLabels: { show: false }, labels: { show: true } };\r\n            v.onResizing({ height: 600, width: 600 });\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumnLabels,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[0],\r\n                            values: ['John Domo', 'Delta Force', 'Jean Tablau'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[1],\r\n                            values: [300, 5, 5],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let labels = element.find(labelsElement);\r\n                if (!interactiveChart) {\r\n                    //Third label has a conflict with diagonal line of second label\r\n                    expect($(labels).length).toBe(2);\r\n                }\r\n                else\r\n                    expect($(labels).length).toBe(0);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart labels visibility - validate that labels are not cut off', (done) => {\r\n            \r\n            //category labels on\r\n            let dataViewMetadataTwoColumnLabels = powerbi.Prototype.inherit(dataViewMetadataTwoColumn);\r\n            dataViewMetadataTwoColumnLabels.objects = { labels: { show: true, labelStyle: LabelStyle.category } };\r\n            v.onResizing({ height: 600, width: 600 });\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumnLabels,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[0],\r\n                            values: ['John Domo', 'Delta Force', 'Jean Tablau'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[1],\r\n                            values: [300, 140, 400],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let labelsBefore = element.find(labelsElement);\r\n                let labelsBeforeY3 = $(labelsBefore[2]).attr('y');\r\n\r\n                v.onResizing({ height: 600, width: 350 });\r\n\r\n                if (!interactiveChart) {\r\n                    let labelsAfter = element.find(labelsElement);\r\n                    let labelsAfterY3 = $(labelsAfter[2]).attr('y');\r\n\r\n                    //'Jean Tablau' moved up \r\n                    expect(+labelsBeforeY3).toBeGreaterThan(+labelsAfterY3);\r\n                }\r\n                else\r\n                    expect($(labelsBefore).length).toBe(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        xit('pie chart labels visibility - validate font-family', (done) => {\r\n            \r\n            //category labels on\r\n            let dataViewMetadataTwoColumnLabels = powerbi.Prototype.inherit(dataViewMetadataTwoColumn);\r\n            dataViewMetadataTwoColumnLabels.objects = { labels: { show: true, labelStyle: LabelStyle.category } };\r\n            v.onResizing({ height: 600, width: 600 });\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumnLabels,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[0],\r\n                            values: ['John Domo', 'Delta Force', 'Jean Tablau'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[1],\r\n                            values: [300, 140, 400],\r\n                        }])\r\n                }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                let labels = element.find(labelsElement);\r\n                if (!interactiveChart) {\r\n                    let labelsFontFamily = $(labels).css('font-family');\r\n                    let fonts = labelsFontFamily.split(',');\r\n                    expect(fonts[0]).toEqual(fontFamily);\r\n                } else\r\n                    expect($(labels).length).toBe(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart legend interactivity', () => {\r\n            expect($('.donutChart')).toBeInDOM();\r\n\r\n            if (!interactiveChart) {\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataTwoColumn,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataTwoColumn.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataTwoColumn.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                // click on legend item\r\n                let renderLegend = dataViewMetadataTwoColumn.objects && dataViewMetadataTwoColumn.objects['legend'];\r\n                if (renderLegend) {\r\n                    let icons = $('.legend .icon.tall');\r\n                    let slices = $('.donutChart .slice');\r\n\r\n                    (<any>icons.first()).d3Click(0, 0);\r\n                    setTimeout(() => {\r\n                        expect(icons[0].style.backgroundColor).toBe('rgb(1, 184, 170)');\r\n                        expect(icons[1].style.backgroundColor).toBe('rgb(166, 166, 166)');\r\n                        expect(icons[2].style.backgroundColor).toBe('rgb(166, 166, 166)');\r\n\r\n                        expect(parseFloat(slices[0].style.fillOpacity)).toBe(1);\r\n                        expect(parseFloat(slices[1].style.fillOpacity)).toBeLessThan(1);\r\n                        expect(parseFloat(slices[2].style.fillOpacity)).toBeLessThan(1);\r\n                    }, DefaultWaitForRender * 2);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (hasLegendObject) {\r\n            it('legend formatting', (done) => {\r\n                let dataView = {\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                };\r\n\r\n                dataView.metadata.objects = { legend: { show: true } };\r\n\r\n                v.onDataChanged({\r\n                    dataViews: [dataView]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    expect($('.donutChart')).toBeInDOM();\r\n                    expect($('.donutChart .slice').length).toBe(3);\r\n                    if (hasLegendObject) {\r\n                        expect($('.legend').attr('orientation')).toBe(LegendPosition.Top.toString());\r\n                    }\r\n\r\n                    //change legend position\r\n                    dataView.metadata.objects = { legend: { show: true, position: 'Right' } };\r\n\r\n                    v.onDataChanged({\r\n                        dataViews: [dataView]\r\n                    });\r\n                    setTimeout(() => {\r\n                        expect($('.donutChart')).toBeInDOM();\r\n                        expect($('.donutChart .slice').length).toBe(3);\r\n                        if (hasLegendObject) {\r\n                            expect($('.legend').attr('orientation')).toBe(LegendPosition.Right.toString());\r\n                        }\r\n\r\n                        dataView.metadata.objects = { legend: { show: true, position: 'TopCenter', showTitle: true } };\r\n                        v.onDataChanged({\r\n                            dataViews: [dataView]\r\n                        });\r\n                        setTimeout(() => {\r\n                            if (hasLegendObject) {\r\n                                expect($('#legendGroup').attr('transform')).toBeDefined();\r\n                            }\r\n\r\n                            //set title\r\n                            let testTitle = 'Test Title';\r\n                            dataView.metadata.objects = { legend: { show: true, position: 'Right', showTitle: true, titleText: testTitle } };\r\n                            v.onDataChanged({\r\n                                dataViews: [dataView]\r\n                            });\r\n                            setTimeout(() => {\r\n                                expect($('.donutChart')).toBeInDOM();\r\n                                if (hasLegendObject) {\r\n                                    expect($('.legend').attr('orientation')).toBe(LegendPosition.Right.toString());\r\n                                    expect(helpers.findElementText($('.legendTitle'))).toBe(testTitle);\r\n                                    expect(helpers.findElementTitle($('.legendTitle'))).toBe(testTitle);\r\n                                    expect($('#legendGroup').attr('transform')).not.toBeDefined();\r\n                                }\r\n                                \r\n                                //hide legend\r\n                                dataView.metadata.objects = { legend: { show: false, position: 'Right' } };\r\n                                v.onDataChanged({\r\n                                    dataViews: [dataView]\r\n                                });\r\n                                setTimeout(() => {\r\n                                    expect($('.donutChart')).toBeInDOM();\r\n                                    if (hasLegendObject) {\r\n                                        expect($('.legend').attr('orientation')).toBe(LegendPosition.None.toString());\r\n                                    }\r\n                                    done();\r\n                                }, DefaultWaitForRender);\r\n                            }, DefaultWaitForRender);\r\n                        }, DefaultWaitForRender);\r\n                    }, DefaultWaitForRender);\r\n                }, DefaultWaitForRender);\r\n            });\r\n        }\r\n\r\n        if (interactiveChart) {\r\n            it('pie chart arrow scale normal size', (done) => {\r\n                const regexScaleIsNormal = /scale\\(\\s*1(\\.0+)?\\s*\\)/i;\r\n\r\n                let viewportHeight = visualPluginFactory.MobileVisualPluginService.MaxHeightToScaleDonutLegend\r\n                    + DonutChart.InteractiveLegendContainerHeight * 2;\r\n\r\n                v.onResizing({ height: viewportHeight, width: 400 });\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataTwoColumn,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataTwoColumn.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataTwoColumn.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n                \r\n                setTimeout(() => {\r\n                    expect($('.donutChart')).toBeInDOM();\r\n                    let arrowG = $('.donutLegendArrow').parent();\r\n                    expect(arrowG).toBeInDOM();\r\n                    expect(arrowG.attr('transform')).toMatch(regexScaleIsNormal);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n\r\n            it('pie chart arrow scale small size', (done) => {\r\n                const regexScaleIsLessThanOne = /scale\\(\\s*0\\.\\d+\\s*\\)/i;\r\n\r\n                let viewportHeight = visualPluginFactory.MobileVisualPluginService.MaxHeightToScaleDonutLegend - 10\r\n                    + DonutChart.InteractiveLegendContainerHeight * 2;\r\n                v.onResizing({ height: viewportHeight, width: 400 });\r\n                v.onDataChanged({\r\n                    dataViews: [{\r\n                        metadata: dataViewMetadataTwoColumn,\r\n                        categorical: {\r\n                            categories: [{\r\n                                source: dataViewMetadataTwoColumn.columns[0],\r\n                                values: ['a', 'b', 'c'],\r\n                                identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                                identityFields: [categoryColumnRef],\r\n                            }],\r\n                            values: DataViewTransform.createValueColumns([{\r\n                                source: dataViewMetadataTwoColumn.columns[1],\r\n                                values: [100, 200, 700],\r\n                            }])\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    expect($('.donutChart')).toBeInDOM();\r\n                    let arrowG = $('.donutLegendArrow').parent();\r\n                    expect(arrowG).toBeInDOM();\r\n                    expect(arrowG.attr('transform')).toMatch(regexScaleIsLessThanOne);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            });\r\n        }\r\n    }\r\n\r\n    describe(\"PieChart DOM validation\", () => pieChartDomValidation(false, false));\r\n    describe(\"PieChart DOM validation - with legend\", () => pieChartDomValidation(false, true));\r\n    describe(\"Interactive PieChart DOM validation\", () => pieChartDomValidation(true, false));\r\n\r\n    describe(\"Dashboard PieChart DOM validation\", () => () => {\r\n        let v: powerbi.IVisual, element: JQuery;\r\n        let hostServices = mocks.createVisualHostServices();\r\n\r\n        let dataViewMetadataTwoColumn: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: 'col1',\r\n                    queryName: 'col1',\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                }, {\r\n                    displayName: 'col2',\r\n                    queryName: 'col2',\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                }\r\n            ],\r\n        };\r\n\r\n        let categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'p' });\r\n\r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            v = visualPluginFactory.createDashboard({}, { tooltipsEnabled: true }).getPlugin('donutChart').create();\r\n            v.init({\r\n                element: element,\r\n                host: hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                interactivity: { isInteractiveLegend: false, selection: true },\r\n                animation: { transitionImmediate: true }\r\n            });\r\n        });\r\n\r\n        it('culls data by default', (done) => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 50, 0.000001],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n\r\n            setTimeout(() => {\r\n                expect($('.donutChart')).toBeInDOM();\r\n                expect($('.donutChart .slice').length).toBe(2);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"Pie Chart Interactivity\", () => {\r\n        let v: powerbi.IVisual, element: JQuery;\r\n        let hostServices = powerbitests.mocks.createVisualHostServices();\r\n        let dataViewMetadataTwoColumn: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: 'col1',\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                }, {\r\n                    displayName: 'col2',\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                }\r\n            ],\r\n        };\r\n\r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            v = visualPluginFactory.create().getPlugin('pieChart').create();\r\n            v.init({\r\n                element: element,\r\n                host: hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                interactivity: { isInteractiveLegend: true },\r\n                animation: { transitionImmediate: true }, // disable animations for testing\r\n            });\r\n\r\n            let dataViewMetadataTwoColumnLabels = powerbi.Prototype.inherit(dataViewMetadataTwoColumn);\r\n            dataViewMetadataTwoColumnLabels.objects = { labels: { show: true, labelStyle: LabelStyle.category }, legend: { show: true, position: 'Top' } };\r\n            let categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'p' });\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumnLabels,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumnLabels.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            });\r\n        });\r\n\r\n        it('legend structure', (done) => {\r\n            setTimeout(() => {\r\n                expect($('[data-legend-index=0]>.category').text()).toBe(\"a\");\r\n                expect($('[data-legend-index=0]>.value').text()).toBe(\"100\");\r\n                helpers.assertColorsMatch($('[data-legend-index=0]>.percentage').css('color'), $('.slice').eq(0).css('fill'));\r\n                expect($('[data-legend-index=1]>.category').text()).toBe(\"b\");\r\n                expect($('[data-legend-index=1]>.value').text()).toBe(\"200\");\r\n                helpers.assertColorsMatch($('[data-legend-index=1]>.percentage').css('color'), $('.slice').eq(1).css('fill'));\r\n                expect($('[data-legend-index=2]>.category').text()).toBe(\"c\");\r\n                expect($('[data-legend-index=2]>.value').text()).toBe(\"700\");\r\n                helpers.assertColorsMatch($('[data-legend-index=2]>.percentage').css('color'), $('.slice').eq(2).css('fill'));\r\n                expect($('.donutLegend').length).toBe(1);\r\n                expect($('.legend-item').length).toBe(3);\r\n                expect($('.donutChart .slice').length).toBe(3);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('legend - test that there is only one interactive legend', (done) => {\r\n            v.onResizing({ height: 600, width: 600 });\r\n\r\n            setTimeout(() => {    \r\n                // interactive-legend is the type of interactive legend for all visuals except donut, for this visual we have special legend called donutLegend\r\n                expect($('.interactive-legend')).not.toBeInDOM();\r\n                expect($('.donutLegend')).toBeInDOM();\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('slice drag', (done) => {\r\n\r\n            function setD3Event(x, y) {\r\n                let event = <any>document.createEvent('MouseEvents');\r\n                event.sourceEvent = {\r\n                    type: 'mouseEvent',\r\n                    pageX: x,\r\n                    pageY: y,\r\n                    stopPropagation: () => { },\r\n                };\r\n                d3.event = <any>event;\r\n            }\r\n\r\n            let pieChart: any = v;\r\n            let interactivityState = pieChart.interactivityState;\r\n\r\n            spyOn(powerbi.visuals.SVGUtil, 'translateAndRotate');\r\n            spyOn(pieChart, 'setInteractiveChosenSlice').and.callThrough();\r\n            spyOn(pieChart, 'getAngleFromDragEvent').and.callThrough();\r\n\r\n            // simulate a drag gesture from below the center of the donut to it's upper part, 180 degrees drag.\r\n            let centerCoordinates = interactivityState.donutCenter;\r\n            let dragFromCoordinates = { x: centerCoordinates.x, y: centerCoordinates.y - 20 };\r\n            let dragToCoordinates = { x: centerCoordinates.x, y: centerCoordinates.y + 20 };\r\n\r\n            let currentRotation = pieChart.interactivityState.currentRotate; \r\n            \r\n            // simulate dragging using setting d3.event\r\n            setD3Event(dragFromCoordinates.x, dragFromCoordinates.y);\r\n            pieChart.interactiveDragStart(); // call dragStart\r\n            setD3Event(dragToCoordinates.x, dragToCoordinates.y);\r\n            pieChart.interactiveDragMove(); // call dragMove\r\n            pieChart.interactiveDragEnd(); // complete the drag - call dragEnd\r\n\r\n            expect(pieChart.getAngleFromDragEvent.calls.count()).toBe(2); // angle should have been calculated twice (first for dragstart and second for dragEnd)\r\n            expect((<any>powerbi.visuals.SVGUtil.translateAndRotate).calls.first().args[4]).toBe(currentRotation + 180); // first call to rotate (mathches dragMove) should rotate the chart by 180 degrees\r\n            expect(pieChart.setInteractiveChosenSlice).toHaveBeenCalledWith(2);\r\n            done();\r\n        });\r\n\r\n        function swipeTest(swipeLeft: boolean, expectedSliceIndex: number, done: any) {\r\n            let pieChart: any = v;\r\n            let interactivityState = pieChart.interactivityState;\r\n            var pieLegend = interactivityState.interactiveLegend;\r\n\r\n            spyOn(pieChart, 'setInteractiveChosenSlice').and.callThrough();\r\n            spyOn(pieLegend, 'updateLegend').and.callThrough();\r\n\r\n            // drag on the legend\r\n            pieLegend.dragLegend(swipeLeft);\r\n            setTimeout(() => {\r\n                expect(pieChart.setInteractiveChosenSlice).toHaveBeenCalledWith(expectedSliceIndex);\r\n                expect(pieLegend.updateLegend).toHaveBeenCalledWith(expectedSliceIndex);\r\n                expect($('.donutChart').length).toBe(1);\r\n                expect($('.donutLegend').length).toBe(1);\r\n                expect($('.legend-item').length).toBe(3);\r\n                expect($('.donutChart .slice').length).toBe(3);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        }\r\n\r\n        it('legend items swipe right', (done) => swipeTest(false, 2, done)); // swiping right - exepecting to get the last slice index\r\n        it('legend items swipe left', (done) => swipeTest(true, 1, done)); // swiping left - exepecting to get the second slice index\r\n\r\n        function rotateValidation(swipeLeft: boolean, done: any) {\r\n            let pieChart: any = v;\r\n            let interactivityState = pieChart.interactivityState;\r\n            var pieLegend = interactivityState.interactiveLegend;\r\n\r\n            spyOn(pieChart, 'setInteractiveChosenSlice').and.callThrough();\r\n            spyOn(pieLegend, 'updateLegend').and.callThrough();\r\n\r\n            // verify the order of the legend items, and their rotation.\r\n            // the middle should be item 0, to the right, item 1 and to the left of item 0 is item 2.\r\n            // meaning, DOM elements order is item2 -> item0 -> item1\r\n            let legendItems = $('.legend-item');\r\n            expect(legendItems.length).toEqual(3);\r\n            expect(legendItems.eq(0).attr('data-legend-index')).toEqual('2');\r\n            expect(legendItems.eq(1).attr('data-legend-index')).toEqual('0');\r\n            expect(legendItems.eq(2).attr('data-legend-index')).toEqual('1');\r\n\r\n            // drag on the legend\r\n            pieLegend.dragLegend(swipeLeft);\r\n\r\n            setTimeout(() => {    \r\n                // items should be rotated\r\n                let rotatedLegendItems = $('.legend-item');\r\n                if (swipeLeft) {\r\n                    expect(rotatedLegendItems.eq(0).attr('data-legend-index')).toBe('0');\r\n                    expect(rotatedLegendItems.eq(1).attr('data-legend-index')).toBe('1');\r\n                    expect(rotatedLegendItems.eq(2).attr('data-legend-index')).toBe('2');\r\n                } else {\r\n                    expect(rotatedLegendItems.eq(0).attr('data-legend-index')).toBe('1');\r\n                    expect(rotatedLegendItems.eq(1).attr('data-legend-index')).toBe('2');\r\n                    expect(rotatedLegendItems.eq(2).attr('data-legend-index')).toBe('0');\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        }\r\n\r\n        it('legend items are rotated correctly when swiping right', (done) => rotateValidation(false, done));\r\n        it('legend items are rotated correctly when swiping left', (done) => rotateValidation(true, done));\r\n    });\r\n\r\n    describe(\"Enumerate Objects\", () => {\r\n        let v: powerbi.IVisual, element: JQuery;\r\n        let dataViewMetadataTwoColumn: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: 'col1',\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                }, {\r\n                    displayName: 'col2',\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                }\r\n            ],\r\n        };\r\n        let categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'p' });\r\n\r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            v = visualPluginFactory.create().getPlugin('donutChart').create();\r\n\r\n            v.init({\r\n                element: element,\r\n                host: powerbitests.mocks.createVisualHostServices(),\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true }\r\n            });\r\n        });\r\n\r\n        it('Check enumeration for categorical', (done) => {\r\n            dataViewMetadataTwoColumn.objects = {\r\n                labels: { show: true, labelStyle: LabelStyle.category },\r\n            };\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            v.onDataChanged(dataChangedOptions);\r\n            let points = <VisualObjectInstanceEnumerationObject>v.enumerateObjectInstances({ objectName: 'dataPoint' });\r\n            expect(points.instances.length).toBe(3);\r\n            expect(points.instances[0].displayName).toEqual('a');\r\n            expect(points.instances[0].properties['fill']).toBeDefined();\r\n            expect(points.instances[1].displayName).toEqual('b');\r\n            expect(points.instances[1].properties['fill']).toBeDefined();\r\n            expect(points.instances[2].displayName).toEqual('c');\r\n            expect(points.instances[2].properties['fill']).toBeDefined();\r\n            done();\r\n        });\r\n\r\n        it('Check enumeration for category and series', (done) => {\r\n            let dataViewMetadata1Category2Measure: powerbi.DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: 'col1' },\r\n                    { displayName: 'col2', isMeasure: true },\r\n                    { displayName: 'col3', isMeasure: true }]\r\n            };\r\n\r\n            let categoryIdentities = [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')];\r\n            let dataChangedOptions = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadata1Category2Measure.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: categoryIdentities,\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadata1Category2Measure.columns[1],\r\n                            values: [-200, null, 150],\r\n                            identity: mocks.dataViewScopeIdentity('foo'),\r\n                        }, {\r\n                                source: dataViewMetadata1Category2Measure.columns[2],\r\n                                values: [-300, 300, -50],\r\n                                identity: mocks.dataViewScopeIdentity('bar'),\r\n                            }])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            v.onDataChanged(dataChangedOptions);\r\n\r\n            let points = <VisualObjectInstanceEnumerationObject>v.enumerateObjectInstances({ objectName: 'dataPoint' });\r\n            expect(points.instances.length).toBe(3);\r\n            expect(points.instances[0].displayName).toEqual('a');\r\n            expect(points.instances[0].properties['fill']).toBeDefined();\r\n            expect(points.instances[1].displayName).toEqual('b');\r\n            expect(points.instances[1].properties['fill']).toBeDefined();\r\n            expect(points.instances[2].displayName).toEqual('c');\r\n            expect(points.instances[2].properties['fill']).toBeDefined();\r\n            done();\r\n        });\r\n\r\n        it('Check datapoints enumeration after hiding legend', (done) => {\r\n            let dataView = {\r\n                metadata: dataViewMetadataTwoColumn,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadataTwoColumn.columns[0],\r\n                        values: ['a', 'b', 'c'],\r\n                        identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                        identityFields: [categoryColumnRef],\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([{\r\n                        source: dataViewMetadataTwoColumn.columns[1],\r\n                        values: [100, 200, 700],\r\n                    }])\r\n                }\r\n            };\r\n\r\n            dataView.metadata.objects = { legend: { show: false } };\r\n\r\n            v.onDataChanged({\r\n                dataViews: [dataView]\r\n            });\r\n\r\n            setTimeout(() => {    \r\n                // Check legend is hidden\r\n                expect($('.legend').attr('orientation')).toBe(LegendPosition.None.toString());\r\n                let points = <VisualObjectInstanceEnumerationObject>v.enumerateObjectInstances({ objectName: 'dataPoint' });\r\n                expect(points.instances.length).toBe(3);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"Pie Chart Web Animation\", () => {\r\n        let v: powerbi.IVisual, element: JQuery;\r\n        let hostServices = powerbitests.mocks.createVisualHostServices();\r\n        let dataViewMetadataTwoColumn: powerbi.DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: 'col1',\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n                }, {\r\n                    displayName: 'col2',\r\n                    isMeasure: true,\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double)\r\n                }\r\n            ],\r\n        };\r\n        let categoryColumnRef = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'p' });\r\n\r\n        beforeEach(() => {\r\n\r\n            element = powerbitests.helpers.testDom('500', '500');\r\n            v = visualPluginFactory.createMinerva({}).getPlugin('pieChart').create();\r\n            v.init({\r\n                element: element,\r\n                host: hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                interactivity: { selection: true },\r\n                animation: { transitionImmediate: true }\r\n            });\r\n        });\r\n\r\n        it('pie chart partial highlight animations', (done) => {\r\n            let dataViewsNoHighlights = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            };\r\n            let dataViewsHighlightsA = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                            highlights: [50, 26, 560],\r\n                        }])\r\n                    }\r\n                }]\r\n            };\r\n            let dataViewsHighlightsB = {\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                            highlights: [20, 126, 60],\r\n                        }])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            v.onDataChanged(dataViewsNoHighlights);\r\n            setTimeout(() => {\r\n                let svgInit = $('.donutChart');\r\n                let initialHeight = svgInit.attr('height'), initialWidth = svgInit.attr('width');\r\n\r\n                let animator = <powerbi.visuals.WebDonutChartAnimator>(<DonutChart>v).animator;\r\n                spyOn(animator, 'animate').and.callThrough();\r\n\r\n                v.onDataChanged(dataViewsHighlightsA);\r\n                v.onDataChanged(dataViewsHighlightsB);\r\n                v.onDataChanged(dataViewsNoHighlights);\r\n\r\n                expect(animator).toBeTruthy();\r\n                expect(animator.animate).toHaveBeenCalled();\r\n\r\n                setTimeout(() => {\r\n                    let svg = $('.donutChart');\r\n                    expect(svg).toBeInDOM();\r\n\r\n                    expect(svg.attr('height')).toBe(initialHeight);\r\n                    expect(svg.attr('width')).toBe(initialWidth);\r\n\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('pie chart partial highlight animations - suppressAnimations', (done) => {\r\n            let dataViewsNoHighlights = {\r\n                suppressAnimations: true,\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                        }])\r\n                    }\r\n                }]\r\n            };\r\n            let dataViewsHighlightsA = {\r\n                suppressAnimations: true,\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                            highlights: [50, 26, 560],\r\n                        }])\r\n                    }\r\n                }]\r\n            };\r\n            let dataViewsHighlightsB = {\r\n                suppressAnimations: true,\r\n                dataViews: [{\r\n                    metadata: dataViewMetadataTwoColumn,\r\n                    categorical: {\r\n                        categories: [{\r\n                            source: dataViewMetadataTwoColumn.columns[0],\r\n                            values: ['a', 'b', 'c'],\r\n                            identity: [mocks.dataViewScopeIdentity('a'), mocks.dataViewScopeIdentity('b'), mocks.dataViewScopeIdentity('c')],\r\n                            identityFields: [categoryColumnRef],\r\n                        }],\r\n                        values: DataViewTransform.createValueColumns([{\r\n                            source: dataViewMetadataTwoColumn.columns[1],\r\n                            values: [100, 200, 700],\r\n                            highlights: [20, 126, 60],\r\n                        }])\r\n                    }\r\n                }]\r\n            };\r\n\r\n            v.onDataChanged(dataViewsNoHighlights);\r\n            setTimeout(() => {\r\n                let svgInit = $('.donutChart');\r\n                let initialHeight = svgInit.attr('height'), initialWidth = svgInit.attr('width');\r\n\r\n                let animator = <powerbi.visuals.WebDonutChartAnimator>(<DonutChart>v).animator;\r\n                spyOn(animator, 'animate').and.callThrough();\r\n\r\n                v.onDataChanged(dataViewsHighlightsA);\r\n                v.onDataChanged(dataViewsHighlightsB);\r\n                v.onDataChanged(dataViewsNoHighlights);\r\n\r\n                expect(animator).toBeTruthy();\r\n                expect(animator.animate).not.toHaveBeenCalled();\r\n\r\n                setTimeout(() => {\r\n                    let svg = $('.donutChart');\r\n                    expect(svg).toBeInDOM();\r\n\r\n                    expect(svg.attr('height')).toBe(initialHeight);\r\n                    expect(svg.attr('width')).toBe(initialWidth);\r\n\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n}\r\n"],"sourceRoot":"/source/"}