{"version":3,"sources":["visuals/dataColorPaletteTests.ts"],"names":["powerbitests"],"mappings":"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","file":"visuals/dataColorPaletteTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    const colors = [\r\n        { value: \"#000000\" },\r\n        { value: \"#000001\" },\r\n        { value: \"#000002\" },\r\n        { value: \"#000003\" }\r\n    ];\r\n\r\n    describe(\"DataColorPalette\", () => {\r\n        let dataColors = new powerbi.visuals.DataColorPalette();\r\n\r\n        it(\"Check get color no duplicates until wrap-around\", () => {\r\n            // Note (param 0): Since conditional formatting is currently not supported, the datavalue param is ignored. For now the\r\n            //                 test will pass in various objects just to make sure we don\"t crash. Once conditional formatting is\r\n            //                 supported we should pass in objects that will excercise that the conditional formatting code.\r\n            // Note (param 1): We need to support any object as the index key, since some charts will use number or string index keys\r\n\r\n            let scale = dataColors.getNewColorScale();\r\n            let color0 = scale.getColor(\"test datavalue\");\r\n            expect(color0).toExist();\r\n\r\n            let color1 = scale.getColor(\"series index N\");\r\n            expect(color1).toExist();\r\n            helpers.assertColorsMatch(color0.value, color1.value, true);\r\n\r\n            let color2 = scale.getColor({ seriesProperty: \"X\" });\r\n            expect(color2).toExist();\r\n            helpers.assertColorsMatch(color1.value, color2.value, true);\r\n\r\n            let color3 = scale.getColor(-1);\r\n            expect(color3).toExist();\r\n            helpers.assertColorsMatch(color2.value, color3.value, true);\r\n\r\n            // Wrap around occurs after 40 (base color count) * 12 (cycles) colors currently. We should have no duplicates\r\n            // until that point.\r\n            let previousColor = color3;\r\n            for (let i = 4; i < 480; ++i) {\r\n                let nextColor = scale.getColor(i);\r\n                expect(nextColor).toExist();\r\n                helpers.assertColorsMatch(nextColor.value, previousColor.value, true);\r\n                previousColor = nextColor;\r\n            }\r\n\r\n            // Wrap around should occur now, verify we are back to the start\r\n            helpers.assertColorsMatch(scale.getColor(\"abc series\").value, color0.value);\r\n        });\r\n\r\n        // The Sentiment/KPI color API is just temporary until conditional formatting is avaiable, but while the API is active it needs to be tested.\r\n        // We can remove this test once the Sentiment API is superseded by conditional formatting.\r\n        it(\"Check get Sentiment color\", () => {\r\n            let sentimentColors = dataColors.getSentimentColors();\r\n\r\n            // For now our visuals assume that there are 3 colors\r\n            expect(sentimentColors.length).toBe(3);\r\n\r\n            // Check for duplicates\r\n            helpers.assertColorsMatch(sentimentColors[0].value, sentimentColors[1].value, true);\r\n            helpers.assertColorsMatch(sentimentColors[1].value, sentimentColors[2].value, true);\r\n            helpers.assertColorsMatch(sentimentColors[0].value, sentimentColors[2].value, true);\r\n        });\r\n\r\n        it(\"Check parameter colors\", () => {\r\n            let localDataColors = new powerbi.visuals.DataColorPalette([{ value: \"#112233\" }]);\r\n            let firstColor = localDataColors.getNewColorScale().getColor(0);\r\n            helpers.assertColorsMatch(firstColor.value, \"#112233\");\r\n        });\r\n\r\n        describe(\"getColorScaleByKey\", () => {\r\n            let color1 = dataColors.getColorScaleByKey(\"scale1\").getColor(\"a\");\r\n            let color2 = dataColors.getColorScaleByKey(\"scale1\").getColor(\"b\");\r\n            let color3 = dataColors.getColorScaleByKey(\"scale2\").getColor(\"a\");\r\n            let color4 = dataColors.getColorScaleByKey(\"scale1\").getColor(\"a\");\r\n\r\n            it(\"should return the same color for the same scale and key\", () => {\r\n                helpers.assertColorsMatch(color1.value, color4.value);\r\n            });\r\n\r\n            it(\"should return the same color for the first key in each scale\", () => {\r\n                helpers.assertColorsMatch(color1.value, color3.value);\r\n            });\r\n\r\n            it(\"should return different colors for different values in the same scale\", () => {\r\n                helpers.assertColorsMatch(color1.value, color2.value, true);\r\n            });\r\n        });\r\n\r\n        it(\"getColorByIndex\", () => {\r\n            let localDataColors = new powerbi.visuals.DataColorPalette(colors);\r\n\r\n            for (let i = 0; i < colors.length; i++) {\r\n                helpers.assertColorsMatch(localDataColors.getColorByIndex(i).value, colors[i].value);\r\n            }\r\n        });\r\n    });\r\n\r\n    describe(\"D3ColorScale\", () => {\r\n        let scale: powerbi.visuals.D3ColorScale;\r\n\r\n        beforeEach(() => {\r\n            scale = powerbi.visuals.D3ColorScale.createFromColors(colors);\r\n        });\r\n\r\n        it(\"should cover all colors and wrap around\", () => {\r\n            for (let i = 0; i < colors.length; i++) {\r\n                helpers.assertColorsMatch(scale.getColor(i).value, colors[i].value);\r\n            }\r\n\r\n            helpers.assertColorsMatch(scale.getColor(colors.length).value, colors[0].value);\r\n        });\r\n\r\n        it(\"Check get color same index key returns same color\", () => {\r\n            let indexKey0 = 4;\r\n            let indexKey1 = \"pie slice 7\";\r\n\r\n            let color0_firstGet = scale.getColor(indexKey0);\r\n            expect(color0_firstGet).toExist();\r\n\r\n            let color1_firstGet = scale.getColor(indexKey1);\r\n            expect(color1_firstGet).toExist();\r\n\r\n            let color0_secondGet = scale.getColor(indexKey0);\r\n            expect(color0_secondGet).toExist();\r\n            helpers.assertColorsMatch(color0_secondGet.value, color0_firstGet.value);\r\n\r\n            let color1_secondGet = scale.getColor(indexKey1);\r\n            expect(color1_secondGet).toExist();\r\n            helpers.assertColorsMatch(color1_firstGet.value, color1_secondGet.value);\r\n        });\r\n\r\n        it(\"clearAndRotate should clear any allocated colors and return the next color\", () => {\r\n            let color1 = scale.getColor(0);\r\n            let color2 = scale.getColor(1);\r\n\r\n            scale.clearAndRotateScale();\r\n\r\n            let color3 = scale.getColor(0);\r\n\r\n            helpers.assertColorsMatch(color1.value, colors[0].value);\r\n            helpers.assertColorsMatch(color2.value, colors[1].value);\r\n            helpers.assertColorsMatch(color3.value, colors[2].value);\r\n        });\r\n\r\n        it(\"clone should create a copy preserving allocated colors\", () => {\r\n            let color1 = scale.getColor(0);\r\n            let color2 = scale.getColor(1);\r\n\r\n            let scale2 = scale.clone();\r\n\r\n            let color3 = scale2.getColor(0);\r\n            let color4 = scale2.getColor(2);\r\n\r\n            helpers.assertColorsMatch(color1.value, colors[0].value);\r\n            helpers.assertColorsMatch(color2.value, colors[1].value);\r\n            helpers.assertColorsMatch(color3.value, colors[0].value);\r\n            helpers.assertColorsMatch(color4.value, colors[2].value);\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}