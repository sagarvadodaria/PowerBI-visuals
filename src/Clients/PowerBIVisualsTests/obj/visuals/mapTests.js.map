{"version":3,"sources":["visuals/mapTests.ts"],"names":["powerbitests","powerbitests.getBubbles","powerbitests.getLegendItems","powerbitests.getLegendColor","powerbitests.getShapes","powerbitests.callCreateLabelDataPoints","powerbitests.convertStringToFloatArray","powerbitests.MapDataBuilder","powerbitests.MapDataBuilder.constructor","powerbitests.MapDataBuilder.build","powerbitests.MapDataBuilder.buildWithSeries","powerbitests.MapDataBuilder.getSizeValue","powerbitests.MapDataBuilder.getLatValue","powerbitests.MapDataBuilder.getLongValue","powerbitests.MapDataBuilder.getGradientValue","powerbitests.MapDataBuilder.withAddresses","powerbitests.MapDataBuilder.withoutCategory","powerbitests.MapDataBuilder.withNullCategory","powerbitests.MapDataBuilder.withNullValue","powerbitests.MapDataBuilder.withCategoryLabels","powerbitests.MapDataBuilder.withShortCategoryNames","powerbitests.MapDataBuilder.withCategoriesAsSeries","powerbitests.MapDataBuilder.withNullSeriesName","powerbitests.MapDataBuilder.withNullLatLong","powerbitests.MapDataBuilder.clearNonDiagonalValues","powerbitests.MapDataBuilder.buildCategories","powerbitests.MapVisualBuilder","powerbitests.MapVisualBuilder.constructor","powerbitests.MapVisualBuilder.style","powerbitests.MapVisualBuilder.host","powerbitests.MapVisualBuilder.element","powerbitests.MapVisualBuilder.testGeocoder","powerbitests.MapVisualBuilder.testMapControlFactory","powerbitests.MapVisualBuilder.build","powerbitests.MapVisualBuilder.buildInitOptions","powerbitests.MapVisualBuilder.withSize","Microsoft","Microsoft.Maps"],"mappings":"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A,CAACA;oBACtGA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,OAAOA,CAACA;oBACxDA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,IAAIA,CAACA;oBACrDA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,SAASA,CAACA;oBAC1DA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,OAAOA,CAACA;oBACxDA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,CAACA;oBACvDA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,KAAKA,CAACA;oBACtDA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,eAAeA,CAACA;oBAChEA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,MAAMA,CAACA;oBACvDA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,YAAYA,CAACA,eAAeA,CAACA;iBACnEA,CAACA,CAACA;gBAEHA,MAAMA,CAACA,OAAOA,CAACA,OAAOA,CAACA,eAAeA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,cAAcA,CAACA,GAAGA,CAACA,SAASA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBACtGA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,EAAEA,WAAWA,CAACA;iBAC5EA,CAACA,CAACA;gBAEHA,MAAMA,CAACA,OAAOA,CAACA,OAAOA,CAACA,eAAeA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,cAAcA,CAACA,GAAGA,CAACA,SAASA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBACtGA,SAASA,CAACA,4BAA4BA,CAACA,aAAaA,CAACA,MAAMA,EAAEA,UAAUA,CAACA;iBAC3EA,CAACA,CAACA;YACPA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,+CAA+CA,EAAEA;gBAChDA,MAAMA,CAACA,OAAOA,CAACA,IAAIA,CAACA,yBAAyBA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,OAAOA,CAACA,eAAeA,CAACA,OAAOA,CAACA,CAACA,CAACA,OAAOA,CAACA,OAAOA,CAACA,OAAOA,CAACA,QAAQA,CAACA,OAAOA,CAACA,YAAYA,CAACA,CAACA;YACpKA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,uBAAuBA,EAAEA;YACxBA,IAAIA,QAAQA,GAAGA,IAAIA,cAAcA,EAAEA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,CAACA;YACtDA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,WAAWA,CAACA,MAAMA,CAACA,OAAOA,EAAEA,CAACA;YAEpDA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,CAACA,qBAAqBA,CAACA,OAAOA,EAAEA,iBAAiBA,CAACA,CAACA;YAC3FA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAExBA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,CAACA,qBAAqBA,CAACA,OAAOA,EAAEA,MAAMA,CAACA,CAACA;YAC5EA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAEvBA,MAAMA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,CAACA,qBAAqBA,CAACA,OAAOA,EAAEA,GAAGA,CAACA,CAACA;YACzEA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QAC3BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,qBAAqBA,EAAEA;YACtBA,IAAIA,QAAQA,GAAGA,IAAIA,cAAcA,EAAEA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,KAAKA,CAACA,CAACA;YACvDA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,WAAWA,CAACA,MAAMA,CAACA,OAAOA,EAAEA,CAACA;YAEpDA,IAAIA,eAAeA,GAAGA,EAAEA,CAACA;YACzBA,IAAIA,KAAKA,GAAGA,IAAIA,CAACA;YACjBA,IAAIA,SAASA,GAAGA,CAACA,CAACA;YAClBA,IAAIA,MAAMA,GAAGA,GAAGA,CAACA,mBAAmBA,CAACA,QAAQA,CAACA,WAAWA,EAAEA,OAAOA,EAAEA,eAAeA,EAAEA,SAASA,EAAEA,KAAKA,CAACA,CAACA;YACvGA,MAAMA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAC7BA,MAAMA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAC7BA,MAAMA,CAACA,eAAeA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACvCA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YACrCA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YACrCA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAErCA,eAAeA,GAAGA,EAAEA,CAACA;YACrBA,SAASA,GAAGA,CAACA,CAACA,CAACA;YACfA,MAAMA,GAAGA,GAAGA,CAACA,mBAAmBA,CAACA,QAAQA,CAACA,WAAWA,EAAEA,OAAOA,EAAEA,eAAeA,EAAEA,SAASA,EAAEA,KAAKA,CAACA,CAACA;YACnGA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YAC1BA,MAAMA,CAACA,eAAeA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACvCA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YACtCA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CA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CA,eAAeA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;YACnDA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,OAAOA,CAACA,YAAYA,CAACA,CAACA;YACtDA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;QACvDA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6CAA6CA,EAAEA;YAC9CA,IAAIA,QAAQA,GAAGA,IAAIA,cAAcA,EAAEA,CAACA,kBAAkBA,EAAEA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,CAACA;YAC7EA,CAACA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAE3CA,IAAIA,eAAeA,GAAGA,yBAAyBA,CAACA,CAACA,CAACA,CAACA;YACnDA,oBAAOA,CAACA,iBAAiBA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,WAAWA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,iBAAiBA,CAACA,uBAAuBA,CAACA,CAACA;YACrHA,oBAAOA,CAACA,iBAAiBA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,WAAWA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,iBAAiBA,CAACA,uBAAuBA,CAACA,CAACA;YACrHA,oBAAOA,CAACA,iBAAiBA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,WAAWA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,iBAAiBA,CAACA,uBAAuBA,CAACA,CAACA;YACrHA,oBAAOA,CAACA,iBAAiBA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,OAAOA,CAACA,OAAOA,CAACA,iBAAiBA,CAACA,uBAAuBA,CAACA,CAACA;YACpHA,oBAAOA,CAACA,iBAAiBA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,OAA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","file":"visuals/mapTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import Map = powerbi.visuals.Map;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import SQExprShortSerializer = powerbi.data.SQExprShortSerializer;\r\n    import LegendPosition = powerbi.visuals.LegendPosition;\r\n    import ILegend = powerbi.visuals.ILegend;\r\n    import dataLabelUtils = powerbi.visuals.dataLabelUtils;\r\n    import PixelConverter = jsCommon.PixelConverter;\r\n    import MapShapeDataPointRenderer = powerbi.visuals.MapShapeDataPointRenderer;\r\n    import ColorHelper = powerbi.visuals.ColorHelper;\r\n    import DataView = powerbi.DataView;\r\n    import SelectionIdBuilder = powerbi.visuals.SelectionIdBuilder;\r\n    import IGeoTaggingAnalyzerService = powerbi.IGeoTaggingAnalyzerService;\r\n    import MapData = powerbi.visuals.MapData;\r\n    import Color = jsCommon.Color;\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    describe(\"Map\", () => {\r\n        let element: JQuery;\r\n        let mockGeotaggingAnalyzerService;\r\n\r\n        var viewport = {\r\n            height: 800,\r\n            width: 500,\r\n        };\r\n\r\n        beforeEach(() => {\r\n            mockGeotaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService((stringId: string) => mocks.getLocalizedString(stringId));\r\n            element = powerbitests.helpers.testDom(viewport.height.toString(), viewport.width.toString());\r\n        });\r\n\r\n        describe('capabilities', () => {\r\n\r\n            it('Map registered capabilities', () => {\r\n                expect(powerbi.visuals.visualPluginFactory.create().getPlugin('map').capabilities).toBe(powerbi.visuals.mapCapabilities);\r\n            });\r\n\r\n            it('Capabilities should include dataViewMappings', () => {\r\n                expect(powerbi.visuals.mapCapabilities.dataViewMappings).toBeDefined();\r\n            });\r\n\r\n            it('Capabilities should include dataRoles', () => {\r\n                expect(powerbi.visuals.mapCapabilities.dataRoles).toBeDefined();\r\n            });\r\n\r\n            it('Capabilities should not suppressDefaultTitle', () => {\r\n                expect(powerbi.visuals.mapCapabilities.suppressDefaultTitle).toBeUndefined();\r\n            });\r\n\r\n            it('Capabilities DataRole preferredTypes', () => {\r\n                //Map's Category, X and Y fieldWells have preferences for geographic locations, longitude and latitude respectively\r\n                expect(powerbi.visuals.mapCapabilities.dataRoles.map(r => !!r.preferredTypes)).toEqual([\r\n                    true,\r\n                    false,\r\n                    true,\r\n                    true,\r\n                    false,\r\n                    false,\r\n                ]);\r\n\r\n                expect(powerbi.visuals.mapCapabilities.dataRoles[0].preferredTypes.map(ValueType.fromDescriptor)).toEqual([\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.Address),\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.City),\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.Continent),\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.Country),\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.County),\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.Place),\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.PostalCode_Text),\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.Region),\r\n                    ValueType.fromExtendedType(powerbi.ExtendedType.StateOrProvince)\r\n                ]);\r\n\r\n                expect(powerbi.visuals.mapCapabilities.dataRoles[2].preferredTypes.map(ValueType.fromDescriptor)).toEqual([\r\n                    ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double, \"Longitude\")\r\n                ]);\r\n\r\n                expect(powerbi.visuals.mapCapabilities.dataRoles[3].preferredTypes.map(ValueType.fromDescriptor)).toEqual([\r\n                    ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double, \"Latitude\")\r\n                ]);\r\n            });\r\n\r\n            it('FormatString property should match calculated', () => {\r\n                expect(powerbi.data.DataViewObjectDescriptors.findFormatString(powerbi.visuals.mapCapabilities.objects)).toEqual(powerbi.visuals.mapProps.general.formatString);\r\n            });\r\n        });\r\n\r\n        it('getMeasureIndexOfRole', () => {\r\n            let dataView = new MapDataBuilder().build(true, true);\r\n            let grouped = dataView.categorical.values.grouped();\r\n\r\n            let result = powerbi.data.DataRoleHelper.getMeasureIndexOfRole(grouped, \"InvalidRoleName\");\r\n            expect(result).toBe(-1);\r\n\r\n            result = powerbi.data.DataRoleHelper.getMeasureIndexOfRole(grouped, \"Size\");\r\n            expect(result).toBe(0);\r\n\r\n            result = powerbi.data.DataRoleHelper.getMeasureIndexOfRole(grouped, \"X\");\r\n            expect(result).toBe(1);\r\n        });\r\n\r\n        it('calculateGroupSizes', () => {\r\n            let dataView = new MapDataBuilder().build(true, false);\r\n            var grouped = dataView.categorical.values.grouped();\r\n\r\n            let groupSizeTotals = [];\r\n            let range = null;\r\n            let sizeIndex = 0;\r\n            let result = Map.calculateGroupSizes(dataView.categorical, grouped, groupSizeTotals, sizeIndex, range);\r\n            expect(result.min).toBe(100);\r\n            expect(result.max).toBe(300);\r\n            expect(groupSizeTotals.length).toBe(3);\r\n            expect(groupSizeTotals[0]).toBe(100);\r\n            expect(groupSizeTotals[1]).toBe(200);\r\n            expect(groupSizeTotals[2]).toBe(300);\r\n\r\n            groupSizeTotals = [];\r\n            sizeIndex = -1;\r\n            result = Map.calculateGroupSizes(dataView.categorical, grouped, groupSizeTotals, sizeIndex, range);\r\n            expect(result).toBe(null);\r\n            expect(groupSizeTotals.length).toBe(3);\r\n            expect(groupSizeTotals[0]).toBe(null);\r\n            expect(groupSizeTotals[1]).toBe(null);\r\n            expect(groupSizeTotals[2]).toBe(null);\r\n        });\r\n\r\n        it('calculateRadius', () => {\r\n            var range: powerbi.visuals.SimpleRange = { min: -100, max: 100 };\r\n\r\n            // Null should be the minimum size\r\n            let diff = 0;\r\n            let result = Map.calculateRadius(range, null);\r\n            expect(result).toBe(6);\r\n\r\n            // Min\r\n            diff = range.max - range.min;\r\n            result = Map.calculateRadius(range, -100);\r\n            expect(result).toBe(6);\r\n\r\n            // Middle of zero\r\n            result = Map.calculateRadius(range, 0);\r\n            expect(result).toBe(14 / 2 + 6);\r\n\r\n            // Max\r\n            result = Map.calculateRadius(range, 100);\r\n            expect(result).toBe(20);\r\n\r\n            // No scale (div by zero or no range scenario\r\n            result = Map.calculateRadius({ min: 100, max: 100 }, 100);\r\n            expect(result).toBe(6);\r\n        });\r\n\r\n        describe('getGeocodingCategory', () => {\r\n            it('from role', () => {\r\n                let dataBuilder = new MapDataBuilder();\r\n                dataBuilder.categoryColumn.displayName = 'foo';\r\n                dataBuilder.categoryColumn.roles = { Country: true };\r\n                let dataView = dataBuilder.build(true, false);\r\n\r\n                var result = Map.getGeocodingCategory(dataView.categorical, mockGeotaggingAnalyzerService);\r\n                expect(result).toBe(\"Country\");\r\n            });\r\n\r\n            it('from column name', () => {\r\n                let dataBuilder = new MapDataBuilder();\r\n                dataBuilder.categoryColumn.displayName = 'country';\r\n                let dataView = dataBuilder.build(true, false);\r\n\r\n                var result = Map.getGeocodingCategory(dataView.categorical, mockGeotaggingAnalyzerService);\r\n                expect(result).toBe(\"Country\");\r\n            });\r\n\r\n            it('from value type', () => {\r\n                let dataBuilder = new MapDataBuilder();\r\n                dataBuilder.categoryColumn.type = ValueType.fromDescriptor({ geography: { country: true } });\r\n                let dataView = dataBuilder.build(true, false);\r\n\r\n                var result = Map.getGeocodingCategory(dataView.categorical, mockGeotaggingAnalyzerService);\r\n                expect(result).toBe(\"Country\");\r\n            });\r\n        });\r\n\r\n        describe('hasSizeField', () => {\r\n            it('with no measure columns', () => {\r\n                let dataBuilder = new MapDataBuilder();\r\n                let dataView = dataBuilder.build(false, false);\r\n                expect(Map.hasSizeField(dataView.categorical.values, 0)).toBe(false);\r\n            });\r\n\r\n            it('with meaure column with \"Size\" role', () => {\r\n                let dataBuilder = new MapDataBuilder();\r\n                let dataView = dataBuilder.build(true, false);\r\n                expect(Map.hasSizeField(dataView.categorical.values, 0)).toBe(true);\r\n            });\r\n\r\n            it('with measure column, but no \"Size\" role', () => {\r\n                let dataBuilder = new MapDataBuilder();\r\n                dataBuilder.sizeColumn.roles = undefined;\r\n                let dataView = dataBuilder.build(true, false);\r\n                expect(Map.hasSizeField(dataView.categorical.values, 0)).toBe(true);\r\n            });\r\n\r\n            if ('with multiple measure columns, no \"Size\" role, none numeric', () => {\r\n                let dataBuilder = new MapDataBuilder();\r\n                dataBuilder.sizeColumn.roles = undefined;\r\n                dataBuilder.sizeColumn.type = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text);\r\n                dataBuilder.latitudeColumn.type = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text);\r\n                dataBuilder.longitudeColumn.type = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text);\r\n                let dataView = dataBuilder.build(true, true);\r\n                expect(Map.hasSizeField(dataView.categorical.values, 0)).toBe(false);\r\n            });\r\n        });\r\n\r\n        describe('legend', () => {\r\n            it('is explicitly hidden', () => {\r\n                var dataView: powerbi.DataView = {\r\n                    metadata: {\r\n                        columns: [],\r\n                        objects: {\r\n                            legend: {\r\n                                show: false\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                expect(Map.isLegendHidden(dataView)).toBe(true);\r\n            });\r\n\r\n            it('is explicitly shown', () => {\r\n                var dataView: powerbi.DataView = {\r\n                    metadata: {\r\n                        columns: [],\r\n                        objects: {\r\n                            legend: {\r\n                                show: true\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                expect(Map.isLegendHidden(dataView)).toBe(false);\r\n            });\r\n\r\n            it('is implicitly hidden', () => {\r\n                var dataView: powerbi.DataView = {\r\n                    metadata: {\r\n                        columns: [],\r\n                    }\r\n                };\r\n\r\n                expect(Map.isLegendHidden(dataView)).toBe(false);\r\n            });\r\n\r\n            it('position is bottom', () => {\r\n                var dataView: powerbi.DataView = {\r\n                    metadata: {\r\n                        columns: [],\r\n                        objects: {\r\n                            legend: {\r\n                                position: 'Bottom'\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                expect(Map.legendPosition(dataView)).toBe(LegendPosition.Bottom);\r\n            });\r\n\r\n            it('enumerateLegend', () => {\r\n                let dataView: powerbi.DataView = {\r\n                    metadata: {\r\n                        columns: [],\r\n                        objects: {\r\n                            legend: {\r\n                                show: true\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                let legend: ILegend = {\r\n                    changeOrientation: () => { },\r\n                    drawLegend: () => { },\r\n                    getMargins: () => <powerbi.IViewport>{\r\n                        width: 0,\r\n                        height: 0\r\n                    },\r\n                    getOrientation: () => LegendPosition.Top,\r\n                    isVisible: () => true,\r\n                    reset: () => { },\r\n                };\r\n\r\n                let enumerationBuilder = new powerbi.visuals.ObjectEnumerationBuilder();\r\n                Map.enumerateLegend(enumerationBuilder, dataView, legend, \"\");\r\n                let objects = enumerationBuilder.complete();\r\n\r\n                expect(objects.instances.length).toBe(1);\r\n                let firstObject = objects.instances[0];\r\n                expect(firstObject.objectName).toBe('legend');\r\n                expect(firstObject.selector).toBeNull();\r\n\r\n                let properties = firstObject.properties;\r\n                expect(properties).toBeDefined();\r\n                expect(properties['show']).toBe(true);\r\n                expect(properties['position']).toBe('Top');\r\n            });\r\n        });\r\n\r\n        describe('shouldEnumerateDataPoints', () => {\r\n            describe('filled map', () => {\r\n                it('no series, with size role', () => {\r\n                    let dataView = new MapDataBuilder().build(true, false);\r\n                    expect(Map.shouldEnumerateDataPoints(dataView, /*usesSizeForGradient*/ true)).toBe(false);\r\n                });\r\n\r\n                it('no series, without size role', () => {\r\n                    let dataView = new MapDataBuilder().build(false, false);\r\n                    expect(Map.shouldEnumerateDataPoints(dataView, /*usesSizeForGradient*/ true)).toBe(true);\r\n                });\r\n\r\n                it('with series', () => {\r\n                    let dataView = new MapDataBuilder().buildWithSeries(true, false);\r\n                    expect(Map.shouldEnumerateDataPoints(dataView, /*usesSizeForGradient*/ true)).toBe(true);\r\n                });\r\n            });\r\n\r\n            describe('bubble map', () => {\r\n                it('no series, with gradient role', () => {\r\n                    let dataView = new MapDataBuilder().build(false, false, true);\r\n                    expect(Map.shouldEnumerateDataPoints(dataView, /*usesSizeForGradient*/ false)).toBe(false);\r\n                });\r\n\r\n                it('no series, without gradient role', () => {\r\n                    let dataView = new MapDataBuilder().build(false, false, false);\r\n                    expect(Map.shouldEnumerateDataPoints(dataView, /*usesSizeForGradient*/ false)).toBe(true);\r\n                });\r\n\r\n                it('with series', () => {\r\n                    let dataView = new MapDataBuilder().buildWithSeries(false, false, false);\r\n                    expect(Map.shouldEnumerateDataPoints(dataView, /*usesSizeForGradient*/ false)).toBe(true);\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('Regression test for Defect 6414910: should Enumerate Category Labels', () => {\r\n            it('filled Map with filled map feature switch on', () => {\r\n                expect(Map.shouldEnumerateCategoryLabels(/*enableGeoShaping*/ true, /*filledMapDataLabelsEnabled*/ true)).toBe(true);\r\n            });\r\n\r\n            it('filled Map with filled map feature switch off', () => {\r\n                expect(Map.shouldEnumerateCategoryLabels(/*enableGeoShaping*/ true, /*filledMapDataLabelsEnabled*/ false)).toBe(false);\r\n            });\r\n\r\n            it('Bubble Map with filled map feature switch on', () => {\r\n                expect(Map.shouldEnumerateCategoryLabels(/*enableGeoShaping*/ false, /*filledMapDataLabelsEnabled*/ true)).toBe(true);\r\n            });\r\n\r\n            it('Bubble Map with filled map feature switch off', () => {\r\n                expect(Map.shouldEnumerateCategoryLabels(/*enableGeoShaping*/ false, /*filledMapDataLabelsEnabled*/ false)).toBe(true);\r\n            });\r\n        });\r\n\r\n        it(\"enumerateDataPoints with dynamic series\", () => {\r\n            let dataBuilder = new MapDataBuilder();\r\n            let dataView = dataBuilder.buildWithSeries(true, false);\r\n\r\n            let groupIndex: number = 0;\r\n            let sizeIndex = 0;\r\n            let colors = powerbi.visuals.visualStyles.create().colorPalette.dataColors;\r\n            let fillProp = <powerbi.DataViewObjectPropertyIdentifier>{ objectName: \"dataPoint\", propertyName: \"fill\" };\r\n            let colorHelper = new ColorHelper(colors, fillProp);\r\n\r\n            let enumerationBuilder = new powerbi.visuals.ObjectEnumerationBuilder();\r\n            var legendDataPoints = Map.createLegendData(dataView, colorHelper).dataPoints;\r\n            Map.enumerateDataPoints(enumerationBuilder, legendDataPoints, colors, true, null, false, []);\r\n            let enumeratedDataPoints = enumerationBuilder.complete();\r\n\r\n            expect(enumeratedDataPoints.instances.length).toBe(legendDataPoints.length);\r\n            \r\n            // ensure first object is 'fill' and not 'defaultColor'\r\n            expect(enumeratedDataPoints.instances[0]['properties']['fill']).toBeDefined();\r\n        });\r\n\r\n        it('enumerateDataPoints correctly handles hasDynamicSeries=true', () => {\r\n            let dataBuilder = new MapDataBuilder();\r\n            let dataView = dataBuilder.buildWithSeries(true, false);\r\n            let visualBuilder = new MapVisualBuilder();\r\n            let visual = visualBuilder.build(false, true);\r\n\r\n            visual.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let result = visual.enumerateObjectInstances({\r\n                objectName: 'legend',\r\n            });\r\n            expect((<powerbi.VisualObjectInstanceEnumerationObject>result).instances.length).toBe(1);\r\n        });\r\n\r\n        it('enumerateDataPoints correctly handles hasDynamicSeries=false', () => {\r\n            let dataBuilder = new MapDataBuilder();\r\n            let dataView = dataBuilder.build(true, false);\r\n            let visualBuilder = new MapVisualBuilder();\r\n            let visual = visualBuilder.build(false, true);\r\n\r\n            visual.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let result = visual.enumerateObjectInstances({\r\n                objectName: 'legend',\r\n            });\r\n            expect(result).toBeUndefined();\r\n        });\r\n    });\r\n\r\n    describe(\"Map Converter\", () => {\r\n        describe(\"Simple category\", () => {\r\n            let colorHelper: ColorHelper;\r\n            let dataBuilder: MapDataBuilder;\r\n            let dataView: DataView;\r\n            let geoTaggingAnalyzerService: IGeoTaggingAnalyzerService;\r\n            let data: MapData;\r\n            let categoryCount: number;\r\n            const colors = [\r\n                { value: \"#000000\" },\r\n                { value: \"#000001\" },\r\n                { value: \"#000002\" },\r\n                { value: \"#000003\" }\r\n            ];\r\n            const fills = [\r\n                'rgba(0,0,0,0.6)',\r\n                'rgba(0,0,1,0.6)',\r\n                'rgba(0,0,2,0.6)',\r\n                'rgba(0,0,3,0.6)',\r\n            ];\r\n            \r\n            beforeEach(() => {\r\n                dataBuilder = new MapDataBuilder();\r\n                dataView = dataBuilder.build(false, false);\r\n                let fillProp = <powerbi.DataViewObjectPropertyIdentifier>{ objectName: \"dataPoint\", propertyName: \"fill\" };\r\n                let palette = new powerbi.visuals.DataColorPalette(colors);\r\n                colorHelper = new ColorHelper(palette, fillProp);\r\n                geoTaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService(mocks.getLocalizedString);\r\n                data = Map.converter(dataView, colorHelper, geoTaggingAnalyzerService);\r\n                categoryCount = data.dataPoints.length;\r\n            });\r\n\r\n            it(\"Data point count\", () => {\r\n                expect(data.dataPoints.length).toBe(categoryCount);\r\n            });\r\n\r\n            it(\"Geocoding category\", () => {\r\n                expect(data.geocodingCategory).toBe('StateOrProvince');\r\n            });\r\n\r\n            it(\"Category value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.categoryValue).toBe(dataBuilder.categoryValues[categoryIndex]);\r\n                }\r\n            });\r\n\r\n            it(\"Geocode query\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.geocodingQuery).toBe(dataBuilder.categoryValues[categoryIndex]);\r\n                }\r\n            });\r\n\r\n            it(\"SubDataPoint count\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.subDataPoints.length).toBe(1);\r\n                }\r\n            });\r\n\r\n            it(\"SubDataPoint identity\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    let expectedId = new SelectionIdBuilder().withCategory(dataView.categorical.categories[0], categoryIndex).createSelectionId();\r\n                    expect(dataPoint.subDataPoints[0].identity).toEqual(expectedId);\r\n                }\r\n            });\r\n\r\n            it(\"SubDataPoint fill\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.subDataPoints[0].fill).toEqual(fills[0]);\r\n                }\r\n            });\r\n        });\r\n\r\n        describe(\"Simple category with measures\", () => {\r\n            let colorHelper: ColorHelper;\r\n            let dataBuilder: MapDataBuilder;\r\n            let dataView: DataView;\r\n            let geoTaggingAnalyzerService: IGeoTaggingAnalyzerService;\r\n            let data: MapData;\r\n            let categoryCount: number;\r\n\r\n            beforeEach(() => {\r\n                dataBuilder = new MapDataBuilder();\r\n                dataView = dataBuilder.build(true, true);\r\n                let fillProp = <powerbi.DataViewObjectPropertyIdentifier>{ objectName: \"dataPoint\", propertyName: \"fill\" };\r\n                let palette = new powerbi.visuals.DataColorPalette();\r\n                colorHelper = new ColorHelper(palette, fillProp);\r\n                geoTaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService(mocks.getLocalizedString);\r\n                data = Map.converter(dataView, colorHelper, geoTaggingAnalyzerService);\r\n                categoryCount = data.dataPoints.length;\r\n            });\r\n            \r\n            it(\"Size value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.value).toBe(dataBuilder.getSizeValue(categoryIndex));\r\n                }\r\n            });\r\n\r\n            it(\"Latitude value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.location.latitude).toBe(dataBuilder.getLatValue(categoryIndex));\r\n                }\r\n            });\r\n\r\n            it(\"Longitude value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.location.longitude).toBe(dataBuilder.getLongValue(categoryIndex));\r\n                }\r\n            });\r\n        });\r\n        \r\n        describe(\"Simple category with null measures\", () => {\r\n            let colorHelper: ColorHelper;\r\n            let dataBuilder: MapDataBuilder;\r\n            let dataView: DataView;\r\n            let geoTaggingAnalyzerService: IGeoTaggingAnalyzerService;\r\n            let data: MapData;\r\n            let categoryCount: number;\r\n\r\n            beforeEach(() => {\r\n                dataBuilder = new MapDataBuilder();\r\n                dataView = dataBuilder.withNullLatLong().build(true, true);\r\n                let fillProp = <powerbi.DataViewObjectPropertyIdentifier>{ objectName: \"dataPoint\", propertyName: \"fill\" };\r\n                let palette = new powerbi.visuals.DataColorPalette();\r\n                colorHelper = new ColorHelper(palette, fillProp);\r\n                geoTaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService(mocks.getLocalizedString);\r\n                data = Map.converter(dataView, colorHelper, geoTaggingAnalyzerService);\r\n                categoryCount = data.dataPoints.length;\r\n            });\r\n\r\n            it(\"Size value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.value).toBe(dataBuilder.getSizeValue(categoryIndex));\r\n                }\r\n            });\r\n\r\n            it(\"Latitude value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    if (categoryIndex === 1) {\r\n                        expect(dataPoint.location).toBeUndefined();\r\n                    }\r\n                    else {\r\n                        expect(dataPoint.location.latitude).toBe(dataBuilder.getLatValue(categoryIndex));\r\n                    }\r\n                }\r\n            });\r\n\r\n            it(\"Longitude value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    if (categoryIndex === 1) {\r\n                        expect(dataPoint.location).toBeUndefined();\r\n                    }\r\n                    else {\r\n                        expect(dataPoint.location.longitude).toBe(dataBuilder.getLongValue(categoryIndex));\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        describe(\"Category and series\", () => {\r\n            let colorHelper: ColorHelper;\r\n            let dataBuilder: MapDataBuilder;\r\n            let dataView: DataView;\r\n            let geoTaggingAnalyzerService: IGeoTaggingAnalyzerService;\r\n            let data: MapData;\r\n            let categoryCount: number;\r\n            let seriesCount: number;\r\n            const colors = [\r\n                { value: \"#000000\" },\r\n                { value: \"#000001\" },\r\n                { value: \"#000002\" },\r\n                { value: \"#000003\" }\r\n            ];\r\n            const fills = [\r\n                'rgba(0,0,0,0.6)',\r\n                'rgba(0,0,1,0.6)',\r\n                'rgba(0,0,2,0.6)',\r\n                'rgba(0,0,3,0.6)',\r\n            ];\r\n\r\n            beforeEach(() => {\r\n                dataBuilder = new MapDataBuilder();\r\n                dataView = dataBuilder.buildWithSeries(true, true);\r\n                let fillProp = <powerbi.DataViewObjectPropertyIdentifier>{ objectName: \"dataPoint\", propertyName: \"fill\" };\r\n                let palette = new powerbi.visuals.DataColorPalette(colors);\r\n                colorHelper = new ColorHelper(palette, fillProp);\r\n                geoTaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService(mocks.getLocalizedString);\r\n                data = Map.converter(dataView, colorHelper, geoTaggingAnalyzerService);\r\n                categoryCount = data.dataPoints.length;\r\n                seriesCount = data.dataPoints[0].subDataPoints.length;\r\n            });\r\n\r\n            it(\"Size value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    for (let seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) {\r\n                        expect(dataPoint.subDataPoints[seriesIndex].value).toBe(dataBuilder.getSizeValue(categoryIndex, seriesIndex));\r\n                    }\r\n                }\r\n            });\r\n\r\n            it(\"Fill value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    for (let seriesIndex = 0; seriesIndex < seriesCount; seriesIndex++) {\r\n                        expect(dataPoint.subDataPoints[seriesIndex].fill).toBe(fills[seriesIndex]);\r\n                    }\r\n                }\r\n            });\r\n\r\n            it(\"Null series name doesn't throw exception\", () => {\r\n                dataView = dataBuilder.withNullSeriesName().buildWithSeries(true, true);\r\n                data = Map.converter(dataView, colorHelper, geoTaggingAnalyzerService);\r\n                let legendData = Map.createLegendData(dataView, colorHelper);\r\n                expect(data).toBeTruthy(); // Simple checks to expect this not to fail\r\n                expect(legendData).toBeTruthy();\r\n            });\r\n        });\r\n\r\n        describe(\"Category and series with category === series (rainbow chart/identity matrix)\", () => {\r\n            let colorHelper: ColorHelper;\r\n            let dataBuilder: MapDataBuilder;\r\n            let dataView: DataView;\r\n            let geoTaggingAnalyzerService: IGeoTaggingAnalyzerService;\r\n            let data: MapData;\r\n            let categoryCount: number;\r\n            let seriesCount: number;\r\n            const colors = [\r\n                { value: \"#000000\" },\r\n                { value: \"#000001\" },\r\n                { value: \"#000002\" },\r\n                { value: \"#000003\" }\r\n            ];\r\n            const fills = [\r\n                'rgba(0,0,0,0.6)',\r\n                'rgba(0,0,1,0.6)',\r\n                'rgba(0,0,2,0.6)',\r\n                'rgba(0,0,3,0.6)',\r\n            ];\r\n\r\n            beforeEach(() => {\r\n                dataBuilder = new MapDataBuilder();\r\n                dataView = dataBuilder.withCategoriesAsSeries().buildWithSeries(true, true);\r\n                let fillProp = <powerbi.DataViewObjectPropertyIdentifier>{ objectName: \"dataPoint\", propertyName: \"fill\" };\r\n                let palette = new powerbi.visuals.DataColorPalette(colors);\r\n                colorHelper = new ColorHelper(palette, fillProp);\r\n                geoTaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService(mocks.getLocalizedString);\r\n                data = Map.converter(dataView, colorHelper, geoTaggingAnalyzerService);\r\n                categoryCount = data.dataPoints.length;\r\n                seriesCount = data.dataPoints[0].subDataPoints.length;\r\n            });\r\n\r\n            it(\"Category and series count\", () => {\r\n                expect(categoryCount).toBe(3);\r\n                expect(seriesCount).toBe(1);\r\n            });\r\n\r\n            it(\"Size value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.value).toBe(dataBuilder.getSizeValue(categoryIndex, categoryIndex));\r\n                    expect(dataPoint.subDataPoints[0].value).toBe(dataBuilder.getSizeValue(categoryIndex, categoryIndex));\r\n                }\r\n            });\r\n\r\n            it(\"Fill value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.subDataPoints[0].fill).toBe(fills[categoryIndex]);\r\n                }\r\n            });\r\n\r\n            it(\"Latitude value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.location.latitude).toBe(dataBuilder.getLatValue(categoryIndex, categoryIndex));\r\n                }\r\n            });\r\n\r\n            it(\"Longitude value\", () => {\r\n                for (let categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\r\n                    let dataPoint = data.dataPoints[categoryIndex];\r\n                    expect(dataPoint.location.longitude).toBe(dataBuilder.getLongValue(categoryIndex, categoryIndex));\r\n                }\r\n            });\r\n        });\r\n\r\n        describe('tooltipInfo', () => {\r\n            let v: Map;\r\n            let visualBuilder: MapVisualBuilder;\r\n            var viewport = {\r\n                height: 800,\r\n                width: 500,\r\n            };\r\n            beforeEach(() => {\r\n                visualBuilder = new MapVisualBuilder();\r\n                v = visualBuilder.build(false);\r\n            });\r\n            //Test Defect 6170871 - Map tooltip doesn't show Color Saturation value\r\n            it('Map.calculateSeriesInfo - Gradient tooltip', () => {\r\n                let dataView = new MapDataBuilder().build(true, false, true);\r\n                let labelSettings = dataLabelUtils.getDefaultMapLabelSettings();\r\n                let options = visualBuilder.buildInitOptions();\r\n                let interactivityService = powerbi.visuals.createInteractivityService(options.host);\r\n                v.onDataChanged({ dataViews: [dataView] });\r\n                let map = <any>v;\r\n                let actualData = map.dataPointRenderer.converter(viewport, dataView, labelSettings, interactivityService);\r\n\r\n                expect(actualData.bubbleData[0].tooltipInfo).toEqual([{ displayName: 'state', value: 'Montana' }, { displayName: 'size', value: '100.00' }, { displayName: 'gradient', value: '75' }]);\r\n                expect(actualData.bubbleData[1].tooltipInfo).toEqual([{ displayName: 'state', value: 'California' }, { displayName: 'size', value: '200.00' }, { displayName: 'gradient', value: '50' }]);\r\n                expect(actualData.bubbleData[2].tooltipInfo).toEqual([{ displayName: 'state', value: 'Arizona' }, { displayName: 'size', value: '300.00' }, { displayName: 'gradient', value: '0' }]);\r\n            });\r\n\r\n            it('validate tooltip info not being created when tooltips are disabled', () => {\r\n                let dataView = new MapDataBuilder().build(true, false, true);\r\n                let labelSettings = dataLabelUtils.getDefaultMapLabelSettings();\r\n                let options = visualBuilder.buildInitOptions();\r\n                let interactivityService = powerbi.visuals.createInteractivityService(options.host);\r\n                v.onDataChanged({ dataViews: [dataView] });\r\n                let map = <any>v;\r\n                let actualData = map.dataPointRenderer.converter(viewport, dataView, labelSettings, interactivityService, false);\r\n\r\n                expect(actualData.bubbleData[0].tooltipInfo).toBeUndefined();\r\n                expect(actualData.bubbleData[1].tooltipInfo).toBeUndefined();\r\n                expect(actualData.bubbleData[2].tooltipInfo).toBeUndefined();\r\n            });\r\n\r\n        });\r\n    });\r\n\r\n    describe(\"Bubble Map DOM Tests\", () => {\r\n        let visualBuilder: MapVisualBuilder;\r\n        let v: powerbi.IVisual;\r\n\r\n        beforeEach(() => {\r\n            visualBuilder = new MapVisualBuilder();\r\n            v = visualBuilder.build(false);\r\n        });\r\n\r\n        it(\"should create map chart element\", (done) => {\r\n            let dataView = new MapDataBuilder().build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                expect($('.mapControl')).toBeInDOM();\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"should have bubble for each category\", (done) => {\r\n            let dataBuilder = new MapDataBuilder();\r\n            let dataView = dataBuilder.build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let bubbles = getBubbles();\r\n                expect(bubbles.length).toBe(dataBuilder.categoryValues.length);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"should draw category labels when enabled\", (done) => {\r\n            let dataView = new MapDataBuilder().withCategoryLabels().withShortCategoryNames().build(false, false);\r\n\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                expect($(\".labelGraphicsContext\")).toBeInDOM();\r\n                expect($(\".labelGraphicsContext .label\").length).toBe(3);\r\n                expect($(\".labelGraphicsContext .label\").first().css('font-size')).toBe(PixelConverter.fromPoint(dataLabelUtils.DefaultFontSizeInPt));\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"should draw category labels with different font size\", (done) => {\r\n            let dataView = new MapDataBuilder().withCategoryLabels(null, null, null, 18).withShortCategoryNames().build(false, false);\r\n\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                expect($(\".labelGraphicsContext\")).toBeInDOM();\r\n                expect($(\".labelGraphicsContext .label\").length).toBe(3);\r\n                expect($(\".labelGraphicsContext .label\").first().css('font-size')).toBe(PixelConverter.fromPoint(18));\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('legend colors should be in order', (done) => {\r\n            let visualBuilder = new MapVisualBuilder();\r\n            let v = visualBuilder.build(false);\r\n            let dataBuilder = new MapDataBuilder();\r\n            let dataView = dataBuilder.buildWithSeries(true, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let seriesExpr = powerbi.data.SQExprShortSerializer.serializeArray(<powerbi.data.SQExpr[]>dataView.categorical.values.identityFields);\r\n            let scale = visualBuilder.style.colorPalette.dataColors.getColorScaleByKey(seriesExpr);\r\n            let colors = _.map(scale.getDomain(), (k) => scale.getColor(k));\r\n\r\n            setTimeout(() => {\r\n                let legendItems = getLegendItems();\r\n\r\n                expect(legendItems.length).toBe(dataBuilder.seriesValues.length);\r\n\r\n                for (let i = 0; i < legendItems.length; i++) {\r\n                    let legendItem = legendItems.eq(i);\r\n                    let legendColor = getLegendColor(legendItem);\r\n                    let color = jsCommon.Color.parseColorString(legendColor);\r\n                    let expectedColor = jsCommon.Color.parseColorString(colors[i].value);\r\n                    expect(color).toEqual(expectedColor);\r\n                }\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        function getBubbles(): JQuery {\r\n            return $('.mapControl circle.bubble');\r\n        }\r\n\r\n        function getLegendItems(): JQuery {\r\n            return $('.legend .legendItem');\r\n        }\r\n\r\n        function getLegendColor(legendItem: JQuery): string {\r\n            return legendItem.children('.legendIcon').css('fill');\r\n        }\r\n    });\r\n\r\n    describe(\"Filled Map DOM Tests\", () => {\r\n        let visualBuilder: MapVisualBuilder;\r\n        let v: powerbi.IVisual;\r\n\r\n        beforeEach(() => {\r\n            visualBuilder = new MapVisualBuilder();\r\n            v = visualBuilder.build(true);\r\n        });\r\n\r\n        it(\"should create map chart element\", (done) => {\r\n            let dataView = new MapDataBuilder().build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                expect($('.mapControl')).toBeInDOM();\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Should draw category labels when enabled, plus stems\", function (done) {\r\n            var dataView = new MapDataBuilder().withCategoryLabels().withShortCategoryNames().build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(function () {\r\n\r\n                expect($(\".labelGraphicsContext\")).toBeInDOM();\r\n                expect($(\".labelGraphicsContext .label\").length).toBe(3);\r\n                expect($(\".labelGraphicsContext .label\").first().css('font-size')).toBe(PixelConverter.fromPoint(dataLabelUtils.DefaultFontSizeInPt));\r\n\r\n                expect($(\".leader-lines\")).toBeInDOM();\r\n                expect($(\".leader-lines .line-label\").length).toBe(3);\r\n\r\n                done();\r\n            }, powerbitests.DefaultWaitForRender);\r\n        });\r\n        \r\n        it(\"Selecting the main shape of a location by polygon area\", function () {\r\n\r\n            let smallAreaShape: powerbi.IGeocodeBoundaryPolygon = {\r\n                nativeBing: '', //contents aren't used.\r\n                absoluteString: \"\",\r\n                absolute: convertStringToFloatArray(\"651.42857 598.07649 360.71069 399.14985 232.41705 700.51064 331.77076 362.54979 5.5147103 333.66089 357.63656 323.71624 284.29287 \" +\r\n                    \"4.5011369 402.56243 336.31585 683.48959 167.91896 404.46235 382.93639\"),\r\n                geographic: new Float64Array(3),\r\n                absoluteBounds: {\r\n                    left: 10,\r\n                    top: 10,\r\n                    width: 100,\r\n                    height: 100,\r\n                },\r\n            };\r\n\r\n            let largeAreaShape: powerbi.IGeocodeBoundaryPolygon = {\r\n                nativeBing: '', //contents aren't used.\r\n                absoluteString: \"\",\r\n                absolute: convertStringToFloatArray(\"445.71429 812.36222 243.25675 885.30681 111.31949 715.29937 232.23533 537.2844 438.90267 597.27253\"),\r\n                geographic: new Float64Array(3),\r\n                absoluteBounds: {\r\n                    left: 10,\r\n                    top: 10,\r\n                    width: 30,\r\n                    height: 30,\r\n                }\r\n            };\r\n\r\n            let indexOfLargestShape: number = MapShapeDataPointRenderer.getIndexOfLargestShape([smallAreaShape, largeAreaShape]);\r\n            expect(indexOfLargestShape).toBe(1);\r\n        });\r\n\r\n        it(\"should have path for each category\", (done) => {\r\n            let dataBuilder = new MapDataBuilder();\r\n            let dataView = dataBuilder.build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let shapes = getShapes();\r\n                expect(shapes.length).toBe(dataBuilder.categoryValues.length);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"should raise warning with address data\", (done) => {\r\n            let warningSpy = jasmine.createSpy('setWarnings');\r\n            visualBuilder.host.setWarnings = warningSpy;\r\n            let dataBuilder = new MapDataBuilder();\r\n            let dataView = dataBuilder.withAddresses().build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalledWith([new powerbi.visuals.FilledMapWithoutValidGeotagCategoryWarning()]);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"should gracefully handle null data\", (done) => {\r\n            let dataBuilder = new MapDataBuilder();\r\n            let dataView = dataBuilder.withNullValue().build(true, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let shapes = getShapes();\r\n                expect(shapes.length).toBe(dataBuilder.categoryValues.length - 1);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        function getShapes(): JQuery {\r\n            return $('.mapControl polygon.shape');\r\n        }\r\n    });\r\n\r\n    describe(\"label data point creation\", () => {\r\n        let v: powerbi.IVisual;\r\n\r\n        beforeEach(() => {\r\n            v = new MapVisualBuilder().build(false);\r\n        });\r\n\r\n        it(\"Label data points have correct text\", () => {\r\n            let dataView = new MapDataBuilder().withCategoryLabels().build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let labelDataPoints = callCreateLabelDataPoints(v);\r\n            expect(labelDataPoints[0].text).toEqual(\"Montana\");\r\n            expect(labelDataPoints[1].text).toEqual(\"California\");\r\n            expect(labelDataPoints[2].text).toEqual(\"Arizona\");\r\n        });\r\n\r\n        it(\"Label data points have correct default fill\", () => {\r\n            let dataView = new MapDataBuilder().withCategoryLabels().build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let labelDataPoints = callCreateLabelDataPoints(v);\r\n            helpers.assertColorsMatch(labelDataPoints[0].outsideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[1].outsideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[2].outsideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[0].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[1].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[2].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n        });\r\n\r\n        it(\"Label data points have correct fill\", () => {\r\n            let labelColor = \"#007700\";\r\n            let dataView = new MapDataBuilder().withCategoryLabels(labelColor).build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let labelDataPoints = callCreateLabelDataPoints(v);\r\n            helpers.assertColorsMatch(labelDataPoints[0].outsideFill, labelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[1].outsideFill, labelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[2].outsideFill, labelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[0].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[1].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[2].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n        });\r\n    });\r\n\r\n    describe(\"Filled Map label data point creation\", () => {\r\n        let v: powerbi.IVisual;\r\n\r\n        beforeEach(() => {\r\n            v = new MapVisualBuilder().build(true);\r\n        });\r\n\r\n        it(\"Label data points have correct text\", () => {\r\n            let dataView = new MapDataBuilder().withCategoryLabels().build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let labelDataPoints = callCreateLabelDataPoints(v);\r\n            expect(labelDataPoints[0].text).toEqual(\"Montana\");\r\n            expect(labelDataPoints[1].text).toEqual(\"California\");\r\n            expect(labelDataPoints[2].text).toEqual(\"Arizona\");\r\n        });\r\n\r\n        it(\"Label data points have correct default fill\", () => {\r\n            let dataView = new MapDataBuilder().withCategoryLabels().build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let labelDataPoints = callCreateLabelDataPoints(v);\r\n            helpers.assertColorsMatch(labelDataPoints[0].outsideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[1].outsideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[2].outsideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[0].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[1].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[2].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n        });\r\n\r\n        it(\"Label data points have correct fill\", () => {\r\n            let labelColor = \"#ffffff\";\r\n            let dataView = new MapDataBuilder().withCategoryLabels(labelColor).build(false, false);\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let labelDataPoints = callCreateLabelDataPoints(v);\r\n            helpers.assertColorsMatch(labelDataPoints[0].outsideFill, labelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[1].outsideFill, labelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[2].outsideFill, labelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[0].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[1].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n            helpers.assertColorsMatch(labelDataPoints[2].insideFill, powerbi.visuals.NewDataLabelUtils.defaultInsideLabelColor);\r\n        });\r\n    });\r\n\r\n    function callCreateLabelDataPoints(v: powerbi.IVisual): powerbi.LabelDataPoint[] {\r\n        let map = <any>v;\r\n        return map.dataPointRenderer.createLabelDataPoints();\r\n    }\r\n\r\n    function convertStringToFloatArray(path: string): Float64Array {\r\n        let stringArray = path.split(\" \");\r\n        let f64s = new Float64Array(stringArray.length);\r\n\r\n        for (let i: number = 0; i < stringArray.length; i++) {\r\n            f64s[i] = parseFloat(stringArray[i]);\r\n        }\r\n        return f64s;\r\n    }\r\n\r\n    class MapDataBuilder {\r\n        public categoryColumn: powerbi.DataViewMetadataColumn = { displayName: 'state', queryName: 'state', roles: { Category: true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) };\r\n        public categoryValues = ['Montana', 'California', 'Arizona'];\r\n        public shortCategoryValues = ['MT', 'CA', 'AZ'];\r\n        public categoryColumnExpr: powerbi.data.SQExpr = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'state' });\r\n        public addressCategoryColumn: powerbi.DataViewMetadataColumn = { displayName: 'address', queryName: 'address', roles: { Category: true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) };\r\n        public addressCategoryValues = ['Some address', 'Some different address', 'Another different address'];\r\n        public addressColumnExpr: powerbi.data.SQExpr = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'address' });\r\n\r\n        public seriesColumn: powerbi.DataViewMetadataColumn = { displayName: 'region', queryName: 'region', roles: { Series: true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) };\r\n        public seriesColumnExpr: powerbi.data.SQExpr = powerbi.data.SQExprBuilder.fieldDef({ schema: 's', entity: 'e', column: 'region' });;\r\n\r\n        public sizeColumn: powerbi.DataViewMetadataColumn = { displayName: 'size', queryName: 'size', isMeasure: true, format: '#,0.00', roles: { Size: true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) };\r\n        public longitudeColumn: powerbi.DataViewMetadataColumn = { displayName: 'longitude', queryName: 'longitude', isMeasure: true, roles: { X: true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) };\r\n        public latitudeColumn: powerbi.DataViewMetadataColumn = { displayName: 'latitude', queryName: 'latitude', isMeasure: true, roles: { Y: true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) };\r\n        public gradientColumn: powerbi.DataViewMetadataColumn = { displayName: 'gradient', queryName: 'gradient', isMeasure: true, roles: { Gradient: true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) };\r\n\r\n        public seriesValues = ['A', 'B', 'C', 'D'];\r\n\r\n        public objects: powerbi.DataViewObjects;\r\n        public categoryObjects: powerbi.DataViewObjects[];\r\n\r\n        private suppressCategories = false;\r\n\r\n        private sizeValues: SeriesValues[] = [\r\n            {\r\n                values: [100, 200, 300],\r\n                subtotal: 600,\r\n            }, {\r\n                values: [10, 20, 30],\r\n                subtotal: 60,\r\n            }, {\r\n                values: [1000, 2000, 3000],\r\n                subtotal: 6000,\r\n            }, {\r\n                values: [1, 2, 3],\r\n                subtotal: 6,\r\n            }\r\n        ];\r\n        private longitudeValues: SeriesValues[] = [\r\n            {\r\n                values: [46.87, 37.81, 34.68],\r\n                subtotal: 119.36\r\n            }, {\r\n                values: [460.87, 370.81, 340.68],\r\n                subtotal: 1172.36\r\n            }, {\r\n                values: [4.87, 3.81, 3.68],\r\n                subtotal: 12.36\r\n            }, {\r\n                values: [40.87, 30.81, 30.68],\r\n                subtotal: 101.36\r\n            }\r\n        ];\r\n        private latitudeValues: SeriesValues[] = [\r\n            {\r\n                values: [-114, -122.46, -111.76],\r\n                subtotal: -348.22\r\n            }, {\r\n                values: [-1140, -1220.46, -1110.76],\r\n                subtotal: -3471.22\r\n            }, {\r\n                values: [-11, -12.46, -11.76],\r\n                subtotal: -35.22\r\n            }, {\r\n                values: [-1, -1.46, -1.76],\r\n                subtotal: -4.22\r\n            }\r\n        ];\r\n        private gradientValues: SeriesValues[] = [\r\n            {\r\n                values: [75, 50, 0],\r\n                subtotal: 125,\r\n            }, {\r\n                values: [25, 10, 40],\r\n                subtotal: 75,\r\n            }, {\r\n                values: [50, 30, 20],\r\n                subtotal: 100,\r\n            }, {\r\n                values: [80, 20, 70],\r\n                subtotal: 170,\r\n            },\r\n        ];\r\n\r\n        private sizeValuesCatEqualsSer: SeriesValues[] = [\r\n            {\r\n                values: [100, null, null],\r\n                subtotal: 100,\r\n            }, {\r\n                values: [null, 20, null],\r\n                subtotal: 20,\r\n            }, {\r\n                values: [null, null, 300],\r\n                subtotal: 300,\r\n            }\r\n        ];\r\n        private longitudeValuesCatEqualsSer: SeriesValues[] = [\r\n            {\r\n                values: [46.87, null, null],\r\n                subtotal: 46.87\r\n            }, {\r\n                values: [null, 370.81, null],\r\n                subtotal: 370.81\r\n            }, {\r\n                values: [null, null, 3.68],\r\n                subtotal: 3.68\r\n            }\r\n        ];\r\n        private latitudeValuesCatEqualsSer: SeriesValues[] = [\r\n            {\r\n                values: [-114, null, null],\r\n                subtotal: -114\r\n            }, {\r\n                values: [null, -1220.46, null],\r\n                subtotal: -1220.46\r\n            }, {\r\n                values: [null, null, -11.76],\r\n                subtotal: -11.76\r\n            }\r\n        ];\r\n        private gradientValuesCatEqualsSer: SeriesValues[] = [\r\n            {\r\n                values: [75, null, null],\r\n                subtotal: 75,\r\n            }, {\r\n                values: [null, 10, null],\r\n                subtotal: 10,\r\n            }, {\r\n                values: [null, null, 20],\r\n                subtotal: 20,\r\n            }\r\n        ];\r\n\r\n        public build(size: boolean, longLat: boolean, gradient: boolean = false): powerbi.DataView {\r\n            var dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: [],\r\n            };\r\n            if (this.objects)\r\n                dataViewMetadata.objects = this.objects;\r\n\r\n            var valueDataArray: powerbi.DataViewValueColumn[] = [];\r\n            var categories: powerbi.DataViewCategoryColumn[] = this.buildCategories(dataViewMetadata);\r\n            if (size) {\r\n                dataViewMetadata.columns.push(this.sizeColumn);\r\n                valueDataArray.push({\r\n                    source: this.sizeColumn,\r\n                    values: this.sizeValues[0].values,\r\n                    subtotal: this.sizeValues[0].subtotal,\r\n                });\r\n            }\r\n            if (longLat) {\r\n                dataViewMetadata.columns.push(this.longitudeColumn);\r\n                dataViewMetadata.columns.push(this.latitudeColumn);\r\n                valueDataArray.push({\r\n                    source: this.longitudeColumn,\r\n                    values: this.longitudeValues[0].values,\r\n                    subtotal: this.longitudeValues[0].subtotal,\r\n                });\r\n                valueDataArray.push({\r\n                    source: this.latitudeColumn,\r\n                    values: this.latitudeValues[0].values,\r\n                    subtotal: this.latitudeValues[0].subtotal,\r\n                });\r\n            }\r\n            if (gradient) {\r\n                dataViewMetadata.columns.push(this.gradientColumn);\r\n                valueDataArray.push({\r\n                    source: this.gradientColumn,\r\n                    values: this.gradientValues[0].values,\r\n                    subtotal: this.gradientValues[0].subtotal,\r\n                });\r\n            }\r\n\r\n            return <powerbi.DataView> {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: categories,\r\n                    values: DataViewTransform.createValueColumns(valueDataArray),\r\n                },\r\n            };\r\n        }\r\n\r\n        public buildWithSeries(size: boolean, longLat: boolean, gradient: boolean = false): powerbi.DataView {\r\n            var dataViewMetadata: powerbi.DataViewMetadata = {\r\n                columns: []\r\n            };\r\n            if (this.objects)\r\n                dataViewMetadata.objects = this.objects;\r\n\r\n            var valueDataArray: powerbi.DataViewValueColumn[] = [];\r\n            var categories: powerbi.DataViewCategoryColumn[] = this.buildCategories(dataViewMetadata);\r\n\r\n            dataViewMetadata.columns.push(this.seriesColumn);\r\n\r\n            for (let seriesIdx = 0; seriesIdx < this.seriesValues.length; seriesIdx++) {\r\n                let seriesValue = this.seriesValues[seriesIdx];\r\n                let seriesIdentity = mocks.dataViewScopeIdentityWithEquality(this.seriesColumnExpr, seriesValue);\r\n\r\n                if (size) {\r\n                    let sizeColumn: powerbi.DataViewMetadataColumn = $.extend({}, this.sizeColumn);\r\n                    sizeColumn.groupName = seriesValue;\r\n\r\n                    dataViewMetadata.columns.push(sizeColumn);\r\n                    valueDataArray.push({\r\n                        source: sizeColumn,\r\n                        values: this.sizeValues[seriesIdx].values,\r\n                        subtotal: this.sizeValues[seriesIdx].subtotal,\r\n                        identity: seriesIdentity,\r\n                    });\r\n                }\r\n                if (longLat) {\r\n                    let longitudeColumn: powerbi.DataViewMetadataColumn = $.extend({}, this.longitudeColumn);\r\n                    longitudeColumn.groupName = seriesValue;\r\n                    let latitudeColumn: powerbi.DataViewMetadataColumn = $.extend({}, this.latitudeColumn);\r\n                    latitudeColumn.groupName = seriesValue;\r\n\r\n                    dataViewMetadata.columns.push(longitudeColumn);\r\n                    dataViewMetadata.columns.push(latitudeColumn);\r\n                    valueDataArray.push({\r\n                        source: longitudeColumn,\r\n                        values: this.longitudeValues[seriesIdx].values,\r\n                        subtotal: this.longitudeValues[seriesIdx].subtotal,\r\n                        identity: seriesIdentity,\r\n                    });\r\n                    valueDataArray.push({\r\n                        source: latitudeColumn,\r\n                        values: this.latitudeValues[seriesIdx].values,\r\n                        subtotal: this.latitudeValues[seriesIdx].subtotal,\r\n                        identity: seriesIdentity,\r\n                    });\r\n                }\r\n                if (gradient) {\r\n                    let gradientColumn: powerbi.DataViewMetadataColumn = $.extend({}, this.gradientColumn);\r\n                    gradientColumn.groupName = seriesValue;\r\n\r\n                    dataViewMetadata.columns.push(gradientColumn);\r\n                    valueDataArray.push({\r\n                        source: this.gradientColumn,\r\n                        values: this.gradientValues[seriesIdx].values,\r\n                        subtotal: this.gradientValues[seriesIdx].subtotal,\r\n                        identity: seriesIdentity,\r\n                    });\r\n                }\r\n            }\r\n\r\n            return <powerbi.DataView> {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: categories,\r\n                    values: DataViewTransform.createValueColumns(valueDataArray, [this.seriesColumnExpr], this.seriesColumn),\r\n                }\r\n            };\r\n        }\r\n        \r\n        public getSizeValue(categoryIndex: number, seriesIndex: number = 0): number {\r\n            return this.sizeValues[seriesIndex].values[categoryIndex];\r\n        }\r\n\r\n        public getLatValue(categoryIndex: number, seriesIndex: number = 0): number {\r\n            return this.latitudeValues[seriesIndex].values[categoryIndex];\r\n        }\r\n\r\n        public getLongValue(categoryIndex: number, seriesIndex: number = 0): number {\r\n            return this.longitudeValues[seriesIndex].values[categoryIndex];\r\n        }\r\n\r\n        public getGradientValue(categoryIndex: number, seriesIndex: number = 0): number {\r\n            return this.gradientValues[seriesIndex].values[categoryIndex];\r\n        }\r\n\r\n        public withAddresses(): MapDataBuilder {\r\n            this.categoryValues = this.addressCategoryValues;\r\n            this.categoryColumn = this.addressCategoryColumn;\r\n            this.categoryColumnExpr = this.addressColumnExpr;\r\n            return this;\r\n        }\r\n\r\n        public withoutCategory(): MapDataBuilder {\r\n            this.suppressCategories = true;\r\n            return this;\r\n        }\r\n\r\n        public withNullCategory(): MapDataBuilder {\r\n            this.categoryValues[1] = null;\r\n            return this;\r\n        }\r\n\r\n        public withNullValue(): MapDataBuilder {\r\n            this.sizeValues[0].values[1] = null;\r\n            return this;\r\n        }\r\n\r\n        public withCategoryLabels(color?: string, labelDisplayUnits?: number, labelPrecision?: number, fontSize?: number): MapDataBuilder {\r\n            if (!this.objects) {\r\n                this.objects = {};\r\n            }\r\n            this.objects[\"categoryLabels\"] = <powerbi.visuals.DataLabelObject> {\r\n                show: true,\r\n                color: { solid: { color: color } },\r\n                labelDisplayUnits: labelDisplayUnits,\r\n                labelPosition: undefined,\r\n                labelPrecision: labelPrecision,\r\n                fontSize: fontSize || dataLabelUtils.DefaultFontSizeInPt,\r\n            };\r\n            return this;\r\n        };\r\n\r\n        public withShortCategoryNames(): MapDataBuilder {\r\n            this.categoryValues = this.shortCategoryValues;\r\n            return this;\r\n        }\r\n\r\n        public withCategoriesAsSeries(): MapDataBuilder {\r\n            this.seriesColumn = this.categoryColumn;\r\n            this.seriesValues = this.categoryValues;\r\n            this.seriesColumnExpr = this.categoryColumnExpr;\r\n\r\n            // values should only be expressed on the diagonal\r\n            this.clearNonDiagonalValues(this.sizeValues);\r\n            this.clearNonDiagonalValues(this.latitudeValues);\r\n            this.clearNonDiagonalValues(this.longitudeValues);\r\n\r\n            return this;\r\n        }\r\n\r\n        public withNullSeriesName(): MapDataBuilder {\r\n            this.seriesValues[1] = null;\r\n            return this;\r\n        }\r\n\r\n        public withNullLatLong(): MapDataBuilder {\r\n            for (let i = 0, ilen = this.latitudeValues.length; i < ilen; i++) {\r\n                this.latitudeValues[i].values[1] = null;\r\n                this.longitudeValues[i].values[1] = null;\r\n            }\r\n            return this;\r\n        }\r\n\r\n        private clearNonDiagonalValues(array: SeriesValues[]): void {\r\n            for (let i = 0; i < array.length; i++) {\r\n                for (let j = 0; j < array[i].values.length; j++) {\r\n                    if (i !== j)\r\n                        array[i].values[j] = null;\r\n                }\r\n\r\n                array[i].subtotal = array[i].values[i];\r\n            }\r\n        }\r\n\r\n        private buildCategories(dataViewMetadata: powerbi.DataViewMetadata): powerbi.DataViewCategoryColumn[] {\r\n            if (this.suppressCategories)\r\n                return;\r\n\r\n            dataViewMetadata.columns.push(this.categoryColumn);\r\n\r\n            let categoryIdentities = this.categoryValues.map((v) => mocks.dataViewScopeIdentityWithEquality(this.categoryColumnExpr, v));\r\n            var categories: powerbi.DataViewCategoryColumn[] = [{\r\n                source: this.categoryColumn,\r\n                values: this.categoryValues,\r\n                identity: categoryIdentities,\r\n            }];\r\n\r\n            if (this.categoryObjects)\r\n                categories[0].objects = this.categoryObjects;\r\n\r\n            return categories;\r\n        }\r\n    }\r\n\r\n    interface SeriesValues {\r\n        values: number[];\r\n        subtotal: number;\r\n    }\r\n\r\n    class MapVisualBuilder {\r\n        private _style: powerbi.IVisualStyle;\r\n        public get style(): powerbi.IVisualStyle { return this._style; }\r\n\r\n        private _host: powerbi.IVisualHostServices;\r\n        public get host(): powerbi.IVisualHostServices { return this._host; }\r\n\r\n        private _svg: D3.Selection;\r\n        private _viewport: powerbi.IViewport;\r\n\r\n        private _element: JQuery;\r\n        public get element(): JQuery { return this._element; }\r\n\r\n        private _testGeocoder: powerbi.IGeocoder;\r\n        public get testGeocoder(): powerbi.IGeocoder { return this._testGeocoder; }\r\n\r\n        private _testMapControlFactory: powerbi.visuals.IMapControlFactory;\r\n        public get testMapControlFactory(): powerbi.visuals.IMapControlFactory { return this._testMapControlFactory; }\r\n\r\n        private _visual: Map;\r\n\r\n        constructor() {\r\n            this._style = powerbi.visuals.visualStyles.create();\r\n            this._host = mocks.createVisualHostServices();\r\n            this._svg = d3.select($('<svg/>').get(0));\r\n            this._viewport = {\r\n                height: 500,\r\n                width: 500,\r\n            };\r\n            this._element = powerbitests.helpers.testDom('500', '500');\r\n            this._testGeocoder = new mocks.MockGeocoder();\r\n            this._testMapControlFactory = {\r\n                createMapControl: (element, options) => {\r\n                    return <any>(new mocks.MockMapControl(this._element[0], 500, 500));\r\n                },\r\n                ensureMap: (locale: string, action: () => void) => {\r\n                    Microsoft.Maps = <any>mocks.MockMaps; // Hook the mock up to Microsoft.Maps for use in Map code\r\n                    action();\r\n                },\r\n            };\r\n        }\r\n\r\n        public build(filledMap: boolean, minerva: boolean = false): Map {\r\n            this._visual = new Map({ filledMap: filledMap, geocoder: this._testGeocoder, mapControlFactory: this._testMapControlFactory, filledMapDataLabelsEnabled: true });\r\n            this._visual.init(this.buildInitOptions());\r\n\r\n            return this._visual;\r\n        }\r\n\r\n        public buildInitOptions(): powerbi.VisualInitOptions {\r\n            let host = powerbi.Prototype.inherit(this._host, h => h.geocoder = () => this.testGeocoder);\r\n\r\n            return <powerbi.VisualInitOptions> {\r\n                element: this._element,\r\n                host: host,\r\n                style: this._style,\r\n                viewport: this._viewport,\r\n                interactivity: { isInteractiveLegend: false },\r\n                animation: { transitionImmediate: true },\r\n                svg: this._svg,\r\n            };\r\n        }\r\n\r\n        public withSize(width: number, height: number): MapVisualBuilder {\r\n            this._element = powerbitests.helpers.testDom(height.toString(), width.toString());\r\n            this._viewport = {\r\n                width: width,\r\n                height: height,\r\n            };\r\n\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\n// Declaration of the Microsoft.Maps module with something inside it so it actually gets compiled\r\nmodule Microsoft.Maps {\r\n    export let mock;\r\n}"],"sourceRoot":"/source/"}