{"version":3,"sources":["customVisuals/sampleDataViews/forceGraphData.ts"],"names":["powerbitests","powerbitests.customVisuals","powerbitests.customVisuals.sampleDataViews","powerbitests.customVisuals.sampleDataViews.ForceGraphData","powerbitests.customVisuals.sampleDataViews.ForceGraphData.constructor","powerbitests.customVisuals.sampleDataViews.ForceGraphData.getDataView"],"mappings":"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","file":"customVisuals/sampleDataViews/forceGraphData.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests.customVisuals.sampleDataViews {\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n    import DataView = powerbi.DataView;\r\n    import DataViewMetadata = powerbi.DataViewMetadata;\r\n    import ValueType = powerbi.ValueType;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import DataViewValueColumns = powerbi.DataViewValueColumns;\r\n    import DataViewValueColumn = powerbi.DataViewValueColumn;\r\n\r\n    export class ForceGraphData {\r\n\r\n        public getDataView(): DataView {\r\n            let dataViewMetadata: DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: 'Source',\r\n                        roles: { 'Source': true },\r\n                        type: ValueType.fromDescriptor({ text: true }),\r\n                    }, {\r\n                        displayName: 'Target',\r\n                        roles: { 'Target': true },\r\n                        type: ValueType.fromDescriptor({ text: true }),\r\n                    }, {\r\n                        displayName: 'Weight',\r\n                        roles: { 'Weight': true },\r\n                        isMeasure: true,\r\n                        type: ValueType.fromDescriptor({ numeric: true }),\r\n                    }, {\r\n                        displayName: 'LinkType',\r\n                        roles: { 'LinkType': true },\r\n                        type: ValueType.fromDescriptor({ text: true }),\r\n                    }, {\r\n                        displayName: 'SourceType',\r\n                        roles: { 'SourceType': true },\r\n                        type: ValueType.fromDescriptor({ text: true }),\r\n                    }, {\r\n                        displayName: 'TargetType',\r\n                        roles: { 'TargetType': true },\r\n                        type: ValueType.fromDescriptor({ text: true }),\r\n                    }\r\n                ]\r\n            };\r\n\r\n            let sourceValues = [\"Brazil\", \"Canada\",  \"USA\", \"Portugal\"];\r\n            let targetValues = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"];\r\n\r\n            let columns: DataViewValueColumn[] = [{\r\n                    source: dataViewMetadata.columns[0],\r\n                    values: targetValues\r\n                }];\r\n\r\n            let tableDataValues = helpers.getTableDataValues(sourceValues, columns);\r\n\r\n            let dataValues: DataViewValueColumns = DataViewTransform.createValueColumns(columns);\r\n\r\n            let sourceValuesfieldExpr = SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"source\", name: \"source\" } });\r\n            let sourceValuesIdentities = sourceValues.map((value) =>\r\n                powerbi.data.createDataViewScopeIdentity(SQExprBuilder.equal(sourceValuesfieldExpr, SQExprBuilder.text(value))));\r\n\r\n            let targetValuesfieldExpr = SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"target\", name: \"target\" } });\r\n            let targetValuesIdentities = targetValues.map((value) =>\r\n                powerbi.data.createDataViewScopeIdentity(SQExprBuilder.equal(targetValuesfieldExpr, SQExprBuilder.text(value))));\r\n\r\n            return {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                            source: dataViewMetadata.columns[0],\r\n                            values: sourceValues,\r\n                            identity: sourceValuesIdentities\r\n                        }, {\r\n                            source: dataViewMetadata.columns[1],\r\n                            values: targetValues,\r\n                            identity: targetValuesIdentities\r\n                        }],\r\n                    values: dataValues\r\n                },\r\n                table: {\r\n                    rows: tableDataValues,\r\n                    columns: dataViewMetadata.columns,\r\n                }\r\n            };\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}