{"version":3,"sources":["visuals/cartesianChartTests.ts"],"names":["powerbitests","powerbitests.buildSimpleDataView","powerbitests.buildComboDataViews","powerbitests.getCartesianLayers","powerbitests.sampleData","powerbitests.CartesianChartBuilder","powerbitests.CartesianChartBuilder.constructor","powerbitests.CartesianChartBuilder.build"],"mappings":"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","file":"visuals/cartesianChartTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbitests {\r\n    import CartesianChart = powerbi.visuals.CartesianChart;\r\n    import DataView = powerbi.DataView;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import mocks = powerbitests.mocks;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import ValueType = powerbi.ValueType;\r\n    import visuals = powerbi.visuals;\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    describe('CartesianChart', () => {\r\n        let defaultChartType = visuals.plugins.columnChart.name;\r\n\r\n        it('setData called on all layers when data changed', () => {\r\n            let visual = new CartesianChartBuilder().build(visuals.plugins.lineStackedColumnComboChart.name);\r\n\r\n            let dataViews = buildComboDataViews();\r\n            // First onDataChanged initializes layers\r\n            visual.onDataChanged({ dataViews: dataViews });\r\n\r\n            let layers = getCartesianLayers(visual);\r\n            expect(layers.length).toBe(2);\r\n\r\n            let setDataSpy1 = spyOn(layers[0], 'setData');\r\n            let setDataSpy2 = spyOn(layers[1], 'setData');\r\n\r\n            visual.onDataChanged({ dataViews: dataViews });\r\n\r\n            expect(setDataSpy1).toHaveBeenCalled();\r\n            expect(setDataSpy2).toHaveBeenCalled();\r\n        });\r\n\r\n        it('viewport change does not trigger conversion', () => {\r\n            let visual = new CartesianChartBuilder().build(defaultChartType);\r\n\r\n            let categories = ['abc', 'def'];\r\n            let categoryIdentities = _.map(categories, (c) => mocks.dataViewScopeIdentity(c));\r\n            let values = [1, 2];\r\n\r\n            let dataView: DataView = buildSimpleDataView();\r\n            visual.onDataChanged({ dataViews: [dataView] });\r\n\r\n            let layers = getCartesianLayers(visual);\r\n            let setDataSpy = spyOn(layers[0], 'setData');\r\n\r\n            visual.onResizing({\r\n                width: 200,\r\n                height: 200,\r\n            });\r\n\r\n            expect(setDataSpy).not.toHaveBeenCalled();\r\n        });\r\n\r\n        describe('detectScalarMapping', () => {\r\n            it('invalid data mapping', () => {\r\n                expect(CartesianChart.detectScalarMapping(null)).toBe(false);\r\n\r\n                expect(CartesianChart.detectScalarMapping({\r\n                    metadata: {}\r\n                })).toBe(false);\r\n\r\n                expect(CartesianChart.detectScalarMapping({\r\n                    metadata: {},\r\n                    categorical: {}\r\n                })).toBe(false);\r\n\r\n                expect(CartesianChart.detectScalarMapping({\r\n                    metadata: {},\r\n                    categorical: {\r\n                        categories: {\r\n                            for: {\r\n                                in: {\r\n                                    role: 'Category',\r\n                                    items: [],\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                })).toBe(false);\r\n            });\r\n\r\n            it('ordinal value type', () => {\r\n                expect(CartesianChart.detectScalarMapping({\r\n                    metadata: {},\r\n                    categorical: {\r\n                        categories: {\r\n                            for: {\r\n                                in: {\r\n                                    role: 'Category',\r\n                                    items: [{\r\n                                        type: ValueType.fromDescriptor({ text: true }),\r\n                                        queryName: 'select1',\r\n                                    }],\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                })).toBe(false);\r\n            });\r\n\r\n            it('scalar value type', () => {\r\n                expect(CartesianChart.detectScalarMapping({\r\n                    metadata: {},\r\n                    categorical: {\r\n                        categories: {\r\n                            for: {\r\n                                in: {\r\n                                    role: 'Category',\r\n                                    items: [{\r\n                                        type: ValueType.fromDescriptor({ numeric: true }),\r\n                                        queryName: 'select1',\r\n                                    }],\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                })).toBe(true);\r\n            });\r\n\r\n            it('explicit scalar axisType', () => {\r\n                expect(CartesianChart.detectScalarMapping({\r\n                    metadata: {\r\n                        objects: {\r\n                            ['categoryAxis']: {\r\n                                axisType: visuals.axisType.scalar\r\n                            }\r\n                        }\r\n                    },\r\n                    categorical: {\r\n                        categories: {\r\n                            for: {\r\n                                in: {\r\n                                    role: 'Category',\r\n                                    items: [{\r\n                                        type: ValueType.fromDescriptor({ text: true }),\r\n                                        queryName: 'select1',\r\n                                    }],\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                })).toBe(false);\r\n            });\r\n\r\n            it('explicit categorical axisType overrides value type', () => {\r\n                expect(CartesianChart.detectScalarMapping({\r\n                    metadata: {\r\n                        objects: {\r\n                            ['categoryAxis']: {\r\n                                axisType: visuals.axisType.categorical\r\n                            }\r\n                        }\r\n                    },\r\n                    categorical: {\r\n                        categories: {\r\n                            for: {\r\n                                in: {\r\n                                    role: 'Category',\r\n                                    items: [{\r\n                                        type: ValueType.fromDescriptor({ numeric: true }),\r\n                                        queryName: 'select1',\r\n                                    }],\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                })).toBe(false);\r\n            });\r\n        });\r\n    });\r\n\r\n    function buildSimpleDataView(): DataView {\r\n        let categories = ['abc', 'def'];\r\n        let categoryIdentities = _.map(categories, (c) => mocks.dataViewScopeIdentity(c));\r\n        let values = [1, 2];\r\n\r\n        return <DataView> {\r\n            metadata: {\r\n                columns: [sampleData.categoryColumn, sampleData.valueColumn]\r\n            },\r\n            categorical: {\r\n                categories: [{\r\n                    source: sampleData.categoryColumn,\r\n                    values: categories,\r\n                    identity: categoryIdentities,\r\n                }],\r\n                values: DataViewTransform.createValueColumns([\r\n                    {\r\n                        source: sampleData.valueColumn,\r\n                        values: values,\r\n                    }\r\n                ])\r\n            }\r\n        };\r\n    }\r\n\r\n    function buildComboDataViews(): DataView[] {\r\n        let categories = ['abc', 'def'];\r\n        let categoryIdentities = _.map(categories, (c) => mocks.dataViewScopeIdentity(c));\r\n        let values1 = [1, 2];\r\n        let values2 = [3, 4];\r\n\r\n        return <DataView[]>[\r\n            {\r\n                metadata: {\r\n                    columns: [sampleData.categoryColumn, sampleData.y1Column]\r\n                },\r\n                categorical: {\r\n                    categories: [{\r\n                        source: sampleData.categoryColumn,\r\n                        values: categories,\r\n                        identity: categoryIdentities,\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: sampleData.y1Column,\r\n                            values: values1,\r\n                        }\r\n                    ])\r\n                }\r\n            }, {\r\n                metadata: {\r\n                    columns: [sampleData.categoryColumn, sampleData.y2Column]\r\n                },\r\n                categorical: {\r\n                    categories: [{\r\n                        source: sampleData.categoryColumn,\r\n                        values: categories,\r\n                        identity: categoryIdentities,\r\n                    }],\r\n                    values: DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: sampleData.y2Column,\r\n                            values: values2,\r\n                        }\r\n                    ])\r\n                }\r\n            }\r\n        ];\r\n    }\r\n\r\n    function getCartesianLayers(visual: CartesianChart): visuals.ICartesianVisual[] {\r\n        return <visuals.ICartesianVisual[]>visual['layers'];\r\n    }\r\n\r\n    module sampleData {\r\n        export let categoryColumn: powerbi.DataViewMetadataColumn = {\r\n            displayName: 'categories',\r\n            queryName: 'categories',\r\n            type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text),\r\n            roles: { ['Category']: true },\r\n        };\r\n\r\n        export let valueColumn: powerbi.DataViewMetadataColumn = {\r\n            displayName: 'values',\r\n            queryName: 'values',\r\n            isMeasure: true,\r\n            type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n            roles: { ['Values']: true },\r\n        };\r\n\r\n        export let y1Column: powerbi.DataViewMetadataColumn = {\r\n            displayName: 'y1',\r\n            queryName: 'y1',\r\n            isMeasure: true,\r\n            type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n            roles: { ['Y']: true },\r\n        };\r\n\r\n        export let y2Column: powerbi.DataViewMetadataColumn = {\r\n            displayName: 'y2',\r\n            queryName: 'y2',\r\n            isMeasure: true,\r\n            type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n            roles: { ['Y2']: true },\r\n        };\r\n    }\r\n\r\n    class CartesianChartBuilder {\r\n        public visual: CartesianChart;\r\n        public element: JQuery;\r\n        public hostServices: powerbi.IVisualHostServices;\r\n        public viewport: powerbi.IViewport;\r\n\r\n        constructor(width: number = 500, height: number = 500) {\r\n            this.viewport = {\r\n                width: width,\r\n                height: height,\r\n            };\r\n\r\n            this.hostServices = powerbitests.mocks.createVisualHostServices();\r\n        }\r\n\r\n        public build(chartType: string, interactiveChart: boolean = false): CartesianChart {\r\n            this.element = powerbitests.helpers.testDom(this.viewport.width.toString(), this.viewport.height.toString());\r\n\r\n            this.visual = <CartesianChart>powerbi.visuals.visualPluginFactory.create().getPlugin(chartType).create();\r\n            this.visual.init({\r\n                element: this.element,\r\n                host: this.hostServices,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: this.viewport.height,\r\n                    width: this.viewport.width\r\n                },\r\n                interactivity: { isInteractiveLegend: interactiveChart },\r\n                animation: { transitionImmediate: true },\r\n            });\r\n\r\n            return this.visual;\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}