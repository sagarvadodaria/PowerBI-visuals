{"version":3,"sources":["visuals/services/geoTaggingAnalyzerServiceTests.ts"],"names":["powerbitests"],"mappings":"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","file":"visuals/services/geoTaggingAnalyzerServiceTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import getLocalizedString = powerbi.visuals.valueFormatter.getLocalizedString;\r\n     \r\n    describe(\"GeoTaggingAnalyzerService\", () => {\r\n        let geoTaggingAnalyzerService: powerbi.IGeoTaggingAnalyzerService;\r\n        \r\n        beforeEach(() => {\r\n            geoTaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService((stringId: string) => getLocalizedString(stringId));\r\n        });       \r\n\r\n        it(\"can detect longitude and latitude fields\", () => {\r\n            let latitudeString = getLocalizedString(\"GeotaggingString_Latitude\");\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(latitudeString)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeographic(latitudeString)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeocodable(latitudeString)).toBe(false);\r\n\r\n            let shortLatitudeString = getLocalizedString(\"GeotaggingString_Latitude_Short\");\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(shortLatitudeString)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeographic(shortLatitudeString)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeocodable(shortLatitudeString)).toBe(false);\r\n        });\r\n\r\n        it(\"can detect postal code with and without whitespace\", () => {\r\n            const postalCodeStringWithSpace = \"Postal     Code\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(postalCodeStringWithSpace)).toBe(false);\r\n            expect(geoTaggingAnalyzerService.isGeographic(postalCodeStringWithSpace)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeocodable(postalCodeStringWithSpace)).toBe(true);\r\n\r\n            let postalCodeStringWithoutSpace = getLocalizedString(\"GeotaggingString_PostalCode\");\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(postalCodeStringWithoutSpace)).toBe(false);\r\n            expect(geoTaggingAnalyzerService.isGeographic(postalCodeStringWithoutSpace)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeocodable(postalCodeStringWithoutSpace)).toBe(true);\r\n        });\r\n\r\n        it(\"can detect pluralized geocodable locations\", () => {\r\n            let citiesString = getLocalizedString(\"GeotaggingString_Cities\");\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(citiesString)).toBe(false);\r\n            expect(geoTaggingAnalyzerService.isGeographic(citiesString)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeocodable(citiesString)).toBe(true);\r\n\r\n            let countriesString = getLocalizedString(\"GeotaggingString_Countries\");\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(countriesString)).toBe(false);\r\n            expect(geoTaggingAnalyzerService.isGeographic(countriesString)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeocodable(countriesString)).toBe(true);\r\n        });\r\n\r\n        it(\"can verify locations regardless of casing\", () => {\r\n            let citiesString = getLocalizedString(\"GeotaggingString_Cities\");\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(citiesString)).toBe(false);\r\n            expect(geoTaggingAnalyzerService.isGeographic(citiesString)).toBe(true);\r\n            expect(geoTaggingAnalyzerService.isGeocodable(citiesString)).toBe(true);\r\n        });\r\n\r\n        it(\"returns undefined fieldType for null fieldNames\", () => {\r\n            expect(geoTaggingAnalyzerService.getFieldType(undefined)).toBe(undefined);\r\n        });\r\n\r\n        it(\"returns Latitude type for latitude fieldName\", () => {\r\n            expect(geoTaggingAnalyzerService.getFieldType(\"latitude\")).toBe(\"Latitude\");\r\n        });\r\n\r\n        it(\"returns Latitude type for latitude using English fallback\", () => {\r\n            let germanGeoTaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService((stringId: string) => getLocalizedString(stringId));\r\n            germanGeoTaggingAnalyzerService[\"GeotaggingString_Latitude\"] = \"breitengrad\";\r\n            expect(germanGeoTaggingAnalyzerService.getFieldType(\"breitengrad\")).toBe(\"Latitude\");\r\n            expect(germanGeoTaggingAnalyzerService.getFieldType(\"latitude\")).toBe(\"Latitude\");\r\n        });\r\n        \r\n        it(\"isGeoshapable uses English backup\", () => {\r\n            let germanGeoTaggingAnalyzerService = powerbi.createGeoTaggingAnalyzerService((stringId: string) => getLocalizedString(stringId));\r\n            germanGeoTaggingAnalyzerService[\"GeotaggingString_State\"] = \"zustand\";\r\n            germanGeoTaggingAnalyzerService[\"GeotaggingString_Latitude\"] = \"breitengrad\";\r\n            expect(germanGeoTaggingAnalyzerService.isGeoshapable(\"zustand\")).toBe(true);\r\n            expect(germanGeoTaggingAnalyzerService.isGeoshapable(\"breitengrad\")).toBe(false);\r\n            expect(germanGeoTaggingAnalyzerService.isGeoshapable(\"state\")).toBe(true);\r\n            expect(germanGeoTaggingAnalyzerService.isGeoshapable(\"latitude\")).toBe(false);\r\n        });\r\n\r\n        it(\"can detect non latitude fields that partially match the string latitude\", () => {\r\n            let nonLatitudeString = \"population\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(nonLatitudeString)).toBe(false);\r\n            nonLatitudeString = \"Latency\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(nonLatitudeString)).toBe(false);\r\n            nonLatitudeString = \"xyzlat\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(nonLatitudeString)).toBe(false);\r\n        });\r\n\r\n        it(\"can detect state field in the middle of a word\", () => {\r\n            let stateInTheMiddle = \"UserState\";\r\n            expect(geoTaggingAnalyzerService.getFieldType(stateInTheMiddle)).toBe(\"StateOrProvince\");\r\n            stateInTheMiddle = \"StateForTheUser\";\r\n            expect(geoTaggingAnalyzerService.getFieldType(stateInTheMiddle)).toBe(\"StateOrProvince\");\r\n            stateInTheMiddle = \"xyzstatexyz\";\r\n            expect(geoTaggingAnalyzerService.getFieldType(stateInTheMiddle)).toBe(\"StateOrProvince\");\r\n        });\r\n\r\n        it(\"can detect latitude fields that have more than one word\", () => {\r\n            let latitudeString = \"Latitude value\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(latitudeString)).toBe(true);\r\n            latitudeString = \"value of Latitude\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(latitudeString)).toBe(true);\r\n            latitudeString = \"a lat b\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(latitudeString)).toBe(true);\r\n            latitudeString = \"lat b\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(latitudeString)).toBe(true);\r\n            latitudeString = \"a lat\";\r\n            expect(geoTaggingAnalyzerService.isLongitudeOrLatitude(latitudeString)).toBe(true);\r\n        });\r\n\r\n        it(\"can detect StateOrProvince\", () => {\r\n            let stateOrProvinceString = \"StateOrProvince\"; \r\n            expect(geoTaggingAnalyzerService.isGeocodable(stateOrProvinceString)).toBe(true);\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}