{"version":3,"sources":["customVisuals/sampleDataViews/ProductSalesByDateData.ts"],"names":["powerbitests","powerbitests.customVisuals","powerbitests.customVisuals.sampleDataViews","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData.constructor","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData.getDataView","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData.generateColumns","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData.generateColumnMetadata","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData.generateData","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData.generateSeries","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData.generateDates","powerbitests.customVisuals.sampleDataViews.ProductSalesByDateData.randomDate"],"mappings":"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","file":"customVisuals/sampleDataViews/ProductSalesByDateData.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests.customVisuals.sampleDataViews {\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n    import DataView = powerbi.DataView;\r\n    import DataViewMetadata = powerbi.DataViewMetadata;\r\n    import ValueType = powerbi.ValueType;\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import DataViewValueColumns = powerbi.DataViewValueColumns;\r\n    import DataViewValueColumn = powerbi.DataViewValueColumn;\r\n    import DataViewMetadataColumn = powerbi.DataViewMetadataColumn;\r\n\r\n    export class ProductSalesByDateData {\r\n\r\n        private static seriesCount = 4;\r\n        private static valuesCount = 50;\r\n\r\n        private sampleData: number[][];\r\n        private dates: Date[];\r\n        \r\n        constructor() {\r\n            this.sampleData = this.generateData(ProductSalesByDateData.seriesCount, ProductSalesByDateData.valuesCount);\r\n            this.dates = this.generateDates(ProductSalesByDateData.valuesCount);\r\n        }\r\n\r\n        public getDataView(): DataView {\r\n            let dataViewMetadata: DataViewMetadata = {\r\n                columns: this.generateColumnMetadata(ProductSalesByDateData.seriesCount)\r\n            };\r\n\r\n            let columns = this.generateColumns(dataViewMetadata, ProductSalesByDateData.seriesCount);\r\n            let categoryValues = this.dates;\r\n\r\n            let dataValues: DataViewValueColumns = DataViewTransform.createValueColumns(columns);\r\n            let fieldExpr = SQExprBuilder.fieldExpr({ column: { schema: 's', entity: \"table1\", name: \"date\" }});\r\n            let categoryIdentities = categoryValues.map((value) =>\r\n                powerbi.data.createDataViewScopeIdentity(SQExprBuilder.equal(fieldExpr, SQExprBuilder.dateTime(value))));\r\n\r\n            let tableDataValues = helpers.getTableDataValues(categoryValues, columns);\r\n\r\n            return {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: categoryValues,\r\n                        identity: categoryIdentities,\r\n                    }],\r\n                    values: dataValues\r\n                },\r\n                table: {\r\n                    rows: tableDataValues,\r\n                    columns: dataViewMetadata.columns,\r\n                },\r\n                single: { value: Array.prototype.concat.apply([], this.sampleData) }\r\n            };\r\n        };\r\n\r\n        private generateColumns(dataViewMetadata: DataViewMetadata, count: number): DataViewValueColumn[] {\r\n            let columns: DataViewValueColumn[] = [];\r\n            for(let i=0; i<count; i++){\r\n                columns.push({\r\n                    source: dataViewMetadata.columns[i+1],\r\n                    // Sales Amount for 2014\r\n                    values: this.sampleData[i],\r\n                });\r\n            }\r\n            \r\n            return columns;\r\n        }\r\n\r\n        private generateColumnMetadata(n: number): DataViewMetadataColumn[] {\r\n            let columns: DataViewMetadataColumn[] = [{\r\n                        displayName: 'Date',\r\n                        queryName: 'Date',\r\n                        type: ValueType.fromDescriptor({ dateTime: true })\r\n                    }];\r\n                    \r\n            for(let i = 0;i < n; i++) {\r\n                columns.push({\r\n                        displayName: 'Product '+(i+1),\r\n                        isMeasure: true,\r\n                        format: \"$0,000.00\",\r\n                        queryName: 'sales'+i,\r\n                        groupName: 'Product ' +(i+1),\r\n                        type: ValueType.fromDescriptor({ numeric: true }),\r\n                    });\r\n            }\r\n            \r\n            return columns;\r\n        }\r\n\r\n        private generateData(seriesCount: number, valuesCount: number): number[][] {\r\n            let data: number[][] = [];\r\n            for(let i=0; i<seriesCount; i++) {\r\n                data.push(this.generateSeries(valuesCount));\r\n            }\r\n\r\n            return data;\r\n        }\r\n\r\n        private generateSeries(count: number): number[] {\r\n            let values = Array.apply(null, Array(count)).map(x => 0);\r\n            for (let i = 0; i < 5; ++i) {\r\n                let x = 1 / (.1 + Math.random()),\r\n                    y = 2 * Math.random() - .5,\r\n                    z = 10 / (.1 + Math.random());\r\n                for (let i = 0; i < count; i++) {\r\n                    let w = (i / count - y) * z;\r\n                    values[i] += x * Math.exp(-w * w);\r\n                }\r\n            }\r\n            return values.map(x => Math.max(0, x) * 10000);\r\n        }\r\n\r\n        private generateDates(count: number): Date[] {\r\n            let dates: Date[] = [];\r\n            for(let i=0; i<count; i++) {\r\n                let randDate = this.randomDate(new Date(2014,0,1), new Date(2015,5,10));\r\n                if(_.contains(dates,randDate)) {\r\n                    i--;\r\n                } else {\r\n                    dates.push(randDate);\r\n                }\r\n            }\r\n            \r\n            return dates.sort((a,b) => a.getTime() > b.getTime() ? 1 : -1);\r\n        }\r\n\r\n        private randomDate(start, end): Date {\r\n            return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}