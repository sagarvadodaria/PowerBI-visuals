{"version":3,"sources":["visuals/tableTests.ts"],"names":["powerbitests","powerbitests.createCompiledDataViewMapping","powerbitests.createNavigator","powerbitests.fillResult","powerbitests.update","powerbitests.refresh","powerbitests.updateModels","powerbitests.validateSortIcons","powerbitests.validateTable","powerbitests.validateClassNames","powerbitests.applyTransform","powerbitests.formatter","powerbitests.validateChildTag"],"mappings":"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AAEA,CAACA,gCAAgCA,EAAEA;gBACjCA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC/DA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,kBAAkBA,EAAEA;gBACnBA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC7CA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,cAAcA,EAAEA;YACrBA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;YACxDA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;YAEhDA,EAAEA,CAACA,yCAAyCA,EAAEA;gBAC1CA,MAAMA,CAACA,SAASA,CAACA,YAAYA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAChEA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,+CAA+CA,EAAEA;gBAChDA,MAAMA,CAACA,SAASA,CAACA,YAAYA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACnEA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,WAAWA,EAAEA;YAElBA,EAAEA,CAACA,iDAAiDA,EAAEA;gBAClDA,IAAIA,QAAQA,GAAGA,2BAA2BA,CAACA;gBAC3CA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,IAAIA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA;gBAE/BA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACnDA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACnDA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACvDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,oDAAoDA,EAAEA;gBACrDA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;gBACxDA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA;gBAErCA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACzDA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC7DA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,kEAAkEA,EAAEA;gBACnEA,IAAIA,QAAQA,GAAGA,eAAeA,CAACA;gBAC/BA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,IAAIA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA;gBAE/BA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAC3DA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,qEAAqEA,EAAEA;gBACtEA,IAAIA,QAAQA,GAAGA,eAAeA,CAACA;gBAC/BA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA;gBAErCA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YAC9DA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,WAAWA,EAAEA;YAClBA,IAAIA,QAAQA,GAAGA,2BAA2BA,CAACA;YAC3CA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;YAEhDA,EAAEA,CAACA,gCAAgCA,EAAEA;gBACjCA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YACtEA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,sBAAsBA,EAAEA;gBACvBA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YACnEA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,iCAAiCA,EAAEA;gBAClCA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YACjDA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,UAAUA,EAAEA;YAEjBA,EAAEA,CAACA,uCAAuCA,EAAEA;gBACxCA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;gBACxDA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA;gBAErCA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACnDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,oCAAoCA,EAAEA;gBACrCA,IAAIA,QAAQA,GAAGA,2BAA2BA,CAACA;gBAC3CA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,IAAIA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA;gBAC/BA,IAAIA,IAAIA,GAAGA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,MAAMA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA;gBACzCA,IAAIA,IAAIA,GAAGA,EAAEA,KAAKA,EAAEA,CAACA,EAAEA,MAAMA,EAAEA,IAAIA,CAACA,CAACA,CAACA,EAAEA,CAACA;gBAEzCA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC7CA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,oDAAoDA,EAAEA;gBACrDA,IAAIA,QAAQA,GAAGA,cAAcA,CAACA;gBAC9BA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,oBAAoBA,GAAGA,wCAAwCA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;gBAErFA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,oBAAoBA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC9DA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,0BAA0BA,EAAEA;gBAC3BA,IAAIA,QAAQA,GAAGA,cAAcA,CAACA;gBAC9BA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAEhDA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QACHA,QAAQA,CAACA,QAAQA,EAAEA;YAEfA,EAAEA,CAACA,0BAA0BA,EAAEA;gBAC3BA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;gBACxDA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA;gBAErCA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAClDA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAClDA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAClDA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAClDA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAClDA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;YACtDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,uBAAuBA,EAAEA;gBACxBA,IAAIA,QAAQA,GAAGA,2BAA2BA,CAACA;gBAC3CA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,IAAIA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA;gBAE/BA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,EAAEA,CAACA;YACnDA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,aAAaA,EAAEA;YAEpBA,EAAEA,CAACA,yBAAyBA,EAAEA;gBAC1BA,IAAIA,QAAQA,GAAGA,2BAA2BA,CAACA;gBAC3CA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,MAAMA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;gBAEvCA,MAAMA,CAACA,SAASA,CAACA,WAAWA,CAACA,MAAMA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YACrDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,sBAAsBA,EAAEA;gBACvBA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;gBACxDA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,GAAGA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAEjCA,MAAMA,CAACA,SAASA,CAACA,WAAWA,CAACA,GAAGA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YAClDA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,UAAUA,EAAEA;YACjBA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;YACxDA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;YAEhDA,EAAEA,CAACA,wDAAwDA,EAAEA;gBACzDA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA;YAC3FA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,kDAAkDA,EAAEA;gBACnDA,MAAMA,CAACA,SAASA,CAACA,QAAQA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YACrFA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,OAAOA,EAAEA;YAEdA,EAAEA,CAACA,iDAAiDA,EAAEA;gBAClDA,IAAIA,QAAQA,GAAGA,2BAA2BA,CAACA;gBAC3CA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,IAAIA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA;gBAE/BA,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAC/CA,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YACnDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,oDAAoDA,EAAEA;gBACrDA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;gBACxDA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAChDA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA;gBAErCA,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACrDA,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACrDA,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;YACzDA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,kEAAkEA,EAAEA;gBACnEA,IAAIA,QAAQA,GAAGA,eAAeA,CAACA;gBAC/BA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAEhDA,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YACtEA,CAACA,CAACA,CAACA;YAEHA,EAAEA,CAACA,qEAAqEA,EAAEA;gBACtEA,IAAIA,QAAQA,GAAGA,eAAeA,CAACA;gBAC/BA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAEhDA,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;YACzEA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,UAAUA,EAAEA;YACjBA,IAAIA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,QAAQA,CAACA,CAACA;wBAC5FA,EAAEA,CAACA,CAACA,aAAaA,YAAYA,MAAMA,CAACA;4BAChCA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,aAAaA,CAACA,CAACA,CAACA,CAACA,SAASA,CAACA;oBAClDA,CAACA;gBACLA,CAACA;gBAEDA,MAAMA,CAACA,MAAMA,CAACA;YAClBA,CAACA;QACLH,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,WAAWA,EAAEA;YAElBA,EAAEA,CAACA,qBAAqBA,EAAEA;gBACtBA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;gBACxDA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;gBAEhDA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;gBAC7CA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;gBAC9CA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;gBAC9CA,MAAMA,CAACA,SAASA,CAACA,SAASA,CAACA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA;YACnDA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,QAAQA,CAACA,kBAAkBA,EAAEA;YAEzBA,EAAEA,CAACA,4CAA4CA,EAAEA;gBAC7CA,IAAIA,QAAQA,GAAGA,wCAAwCA,CAACA;gBACxDA,IAAIA,GAAGA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACjCA,IAAIA,MAAMA,GAAGA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;gBACvCA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,QAAQA,CAACA,KAAKA,CAACA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;wBACtBA,CAACA,GAAGA,EAAEA,OAAOA,EAAEA,QAAQA,CAACA;qBAC3BA;iBACJA;aACJA,CAACA;YACFA,CAACA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,SAASA,CAACA,EAAEA,CAACA,CAACA;YAC5CA,UAAUA,CAACA;gBACPA,CAACA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,SAASA,CAACA,EAAEA,CAACA,CAACA;gBAC5CA,UAAUA,CAACA;oBACPA,IAAIA,WAAWA,GAAUA,CAACA,CAACA;oBAC3BA,IAAIA,eAAeA,GAAGA,WAAWA,CAACA,qBAAqBA,EAAEA,CAACA;oBAC1DA,IAAIA,OAAOA,GAA2CA,eAAeA,CAACA,iCAAiCA,EAAEA,CAACA;oBAC1GA,MAAMA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA,WAAWA,EAAEA,CAACA;oBACpCA,MAAMA,CAACA,OAAOA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAErCA,IAAIA,eAAeA,GAAGA,OAAOA,CAACA,KAAKA,CAACA;oBACpCA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,qBAAqBA,CAACA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;oBACzEA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,SAASA,CAACA,CAACA;oBAC5EA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,aAAaA,CAACA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;oBAC9DA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,SAASA,CAACA,CAACA;oBAC5EA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,aAAaA,CAAC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A,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC9EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;wBAE/EA,IAAIA,MAAMA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KA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,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA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,WAAWA,EAAEA,cAAcA,CAACA,WAAWA,EAAEA,cAAcA,CAACA,WAAWA,CAACA;4BAChHA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,UAAUA,CAACA;4BAClFA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,UAAUA,CAACA;4BAClFA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;4BACnFA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;4BACnFA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;4BACnFA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA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AAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC5EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC5EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC5EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC5EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC5EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC5EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC5EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC5EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC7EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC7EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC7EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAC7EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,YAAYA,CAACA,CAACA;gBAE7EA,IAAIA,aAAaA,GAAeA;oBAC5BA,CAACA,EAAEA,EAAEA,YAAYA,CAACA,WAAWA,EAAEA,YAAYA,CAACA,WAAWA,CAACA;oBACxDA,CAACA,EAAEA,EAAEA,UAAUA,EAAEA,UAAUA,CAACA;oBAC5BA,CAACA,EAAEA,EAAEA,UAAUA,EAAEA,UAAUA,CAACA;oBAC5BA,CAACA,EAAEA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;oBAC7BA,CAACA,EAAEA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;oBAC7BA,CAACA,EAAEA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;oBAC7BA,CAACA,EAAEA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;oBAC7BA,CAACA,EAAEA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;iBAChCA,CAACA;gBAEFA,aAAaA,CAACA,aAAaA,CAACA,CAACA;gBAE7BA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,4DAA4DA,EAAEA,UAACA,IAAIA;YAElEA,IAAIA,QAAQA,GAAGA,2BAA2BA,CAACA;YAC3CA,cAAcA,CAACA,KAAKA,GAAGA,CAACA,CAACA;YACzBA,cAAcA,CAACA,KAAKA,GAAGA,CAACA,CAACA;YACzBA,cAAcA,CAACA,KAAKA,GAAGA,CAACA,CAACA;YAEzBA,CAACA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAE3CA,UAAUA,CAACA;gBAEPA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,UAAUA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC9EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAC/EA,IAAIA,WAAWA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAE/EA,IAAIA,MAAMA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBACzEA,IAAIA,MAAMA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBACzEA,IAAIA,MAAMA,GAAWA,SAASA,CAACA,QAAQA,CAACA,KAAKA,CAACA,MAAMA,CAACA,CAACA,CAACA,EAAEA,cAAcA,CAACA,CAACA;gBAEzEA,IAAIA,aAAaA,GAAeA;oBAC5BA,CAACA,EAAEA,EAAEA,YAAYA,CAACA,WAAWA,EAAEA,YAAYA,CAACA,WAAWA,EAAEA,cAAcA,CAACA,WAAWA,EAAEA,cAAcA,CAACA,WAAWA,EAAEA,cAAcA,CAACA,WAAWA,CAACA;oBAC5IA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;oBAC/FA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,UAAUA,EAAEA,WAAWA,CAACA;oBAC/FA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,EAAEA,WAAWA,CAACA;oBAChGA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,EAAEA,WAAWA,CAACA;oBAChGA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,EAAEA,WAAWA,CAACA;oBAChGA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,EAAEA,WAAWA,CAACA;oBAChGA,CAACA,EAAEA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,EAAEA,WAAWA,CAACA;oBAChGA,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","file":"visuals/tableTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import CompiledDataViewMapping = powerbi.data.CompiledDataViewMapping;\r\n    import CompiledDataViewRoleForMapping = powerbi.data.CompiledDataViewRoleForMapping;\r\n    import CompiledSubtotalType = powerbi.data.CompiledSubtotalType;\r\n    import DataView = powerbi.DataView;\r\n    import DataViewTable = powerbi.DataViewTable;\r\n    import DataViewMetadataColumn = powerbi.DataViewMetadataColumn;\r\n    import Table = powerbi.visuals.Table;\r\n    import tableCapabilities = powerbi.visuals.tableCapabilities;\r\n    import TablixUtils = powerbi.visuals.controls.internal.TablixUtils;\r\n    import TableHierarchyNavigator = powerbi.visuals.TableHierarchyNavigator;\r\n    import valueFormatter = powerbi.visuals.valueFormatter;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import SortDirection = powerbi.SortDirection;\r\n    import TablixControl = powerbi.visuals.controls.TablixControl;\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    const dataTypeNumber = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double);\r\n    const dataTypeString = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text);\r\n    const dataTypeWebUrl = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text, \"WebUrl\");\r\n    const dataTypeKpiStatus = ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Integer);\r\n\r\n    const groupSource1: DataViewMetadataColumn = { displayName: \"group1\", queryName: \"group1\", type: dataTypeString, index: 0 };\r\n    const groupSource2: DataViewMetadataColumn = { displayName: \"group2\", queryName: \"group2\", type: dataTypeString, index: 1 };\r\n    const groupSource3: DataViewMetadataColumn = { displayName: \"group3\", queryName: \"group3\", type: dataTypeString, index: 2 };\r\n    const groupSourceLeadingSpeaces: DataViewMetadataColumn = { displayName: \"    group1\", queryName: \"group1\", type: dataTypeString, index: 0 };\r\n    const groupSourceWebUrl: DataViewMetadataColumn = { displayName: \"groupWebUrl\", queryName: \"groupWebUrl\", type: dataTypeWebUrl, index: 0 };\r\n    const groupSourceKpiStatus: DataViewMetadataColumn = {\r\n        displayName: \"Average of Grade\",\r\n        queryName: \"Table1._Average of Grade Status\",\r\n        type: dataTypeKpiStatus,\r\n        roles: { Values: true },\r\n        format: \"g\",\r\n        kpi: {\r\n            graphic: \"Traffic Light - Single\"\r\n        },\r\n        objects: {\r\n            general: {\r\n                formatString: \"g\",\r\n            },\r\n        },\r\n    };\r\n\r\n    let measureSource1: DataViewMetadataColumn = { displayName: \"measure1\", queryName: \"measure1\", type: dataTypeNumber, isMeasure: true, index: 3, objects: { general: { formatString: \"#.0\" } } };\r\n    let measureSource2: DataViewMetadataColumn = { displayName: \"measure2\", queryName: \"measure2\", type: dataTypeNumber, isMeasure: true, index: 4, objects: { general: { formatString: \"#.00\" } } };\r\n    let measureSource3: DataViewMetadataColumn = { displayName: \"measure3\", queryName: \"measure3\", type: dataTypeNumber, isMeasure: true, index: 5, objects: { general: { formatString: \"#\" } } };\r\n\r\n    let measureSourceAscending: DataViewMetadataColumn = { displayName: \"measure1\", queryName: \"measure1\", type: dataTypeNumber, isMeasure: true, index: 3, objects: { general: { formatString: \"#.0\" } }, sort: SortDirection.Ascending };\r\n    let measureSourceDescending: DataViewMetadataColumn = { displayName: \"measure1\", queryName: \"measure1\", type: dataTypeNumber, isMeasure: true, index: 3, objects: { general: { formatString: \"#.0\" } }, sort: SortDirection.Descending };\r\n\r\n    let webPluginService = new powerbi.visuals.visualPluginFactory.MinervaVisualPluginService({});\r\n    let dashboardPluginService = new powerbi.visuals.visualPluginFactory.DashboardPluginService({}, { tooltipsEnabled: true });\r\n\r\n    let tableTotals: powerbi.DataViewObjects = {\r\n        general: {\r\n            totals: true,\r\n            autoSizeColumnWidth: true,\r\n            textSize: 8,\r\n        }\r\n    };\r\n\r\n    let tableTotalsIncreasedFontSize: powerbi.DataViewObjects = {\r\n        general: {\r\n            totals: true,\r\n            autoSizeColumnWidth: true,\r\n            textSize: 14,\r\n        }\r\n    };\r\n\r\n    let tableNoTotals: powerbi.DataViewObjects = {\r\n        general: {\r\n            totals: false,\r\n            autoSizeColumnWidth: true,\r\n            textSize: 8,\r\n        }\r\n    };\r\n\r\n    let tableColumnWidthFalse: powerbi.DataViewObjects = {\r\n        general: {\r\n            totals: true,\r\n            autoSizeColumnWidth: false,\r\n            textSize: 8,\r\n        }\r\n    };\r\n\r\n    let tableColumnWidthTrue: powerbi.DataViewObjects = {\r\n        general: {\r\n            totals: true,\r\n            autoSizeColumnWidth: true,\r\n            textSize: 8,\r\n        }\r\n    };\r\n\r\n    let dataViewTableThreeMeasures: DataViewTable = {\r\n        columns: [measureSource1, measureSource2, measureSource3],\r\n        rows: [\r\n            [100, 10100, 102000],\r\n            [103, 104000, 1050000],\r\n            [106, 1070000, 10800000]\r\n        ]\r\n    };\r\n\r\n    let tableOneMeasure: DataView = {\r\n        metadata: { columns: [measureSource1] },\r\n        table: {\r\n            columns: [measureSource1],\r\n            rows: [\r\n                [100]\r\n            ]\r\n        }\r\n    };\r\n\r\n    let tableOneMeasurSortAscending: DataView = {\r\n        metadata: { columns: [measureSourceAscending] },\r\n        table: {\r\n            columns: [measureSourceAscending],\r\n            rows: [\r\n                [100]\r\n            ]\r\n        }\r\n    };\r\n\r\n    let tableOneMeasurSortDescending: DataView = {\r\n        metadata: { columns: [measureSourceDescending] },\r\n        table: {\r\n            columns: [measureSourceDescending],\r\n            rows: [\r\n                [100]\r\n            ]\r\n        }\r\n    };\r\n\r\n    let dataViewTableOneGroup: DataViewTable = {\r\n        columns: [groupSource1],\r\n        rows: [\r\n            [\"A\"],\r\n            [\"B\"],\r\n            [\"C\"]\r\n        ]\r\n    };\r\n\r\n    let tableOneGroup: DataView = {\r\n        metadata: { columns: [groupSource1] },\r\n        table: dataViewTableOneGroup\r\n    };\r\n\r\n    let tableOneGroupNulls: DataView = {\r\n        metadata: { columns: [groupSource1] },\r\n        table: {\r\n            columns: [groupSource1],\r\n            rows: [\r\n                [\"\"],\r\n                [null]\r\n            ]\r\n        }\r\n    };\r\n\r\n    let dataViewTableOneGroupLeadingSpaces: DataViewTable = {\r\n        columns: [groupSourceLeadingSpeaces],\r\n        rows: [\r\n            [\"    A\"],\r\n            [\"B\"],\r\n            [\"C\"]\r\n        ]\r\n    };\r\n\r\n    let tableOneGroupLeadingSpaces: DataView = {\r\n        metadata: { columns: [groupSourceLeadingSpeaces] },\r\n        table: dataViewTableOneGroupLeadingSpaces\r\n    };\r\n\r\n    let dataViewTableTwoGroups: DataViewTable = {\r\n        columns: [groupSource1, groupSource2],\r\n        rows: [\r\n            [\"A\", \"a1\"],\r\n            [\"A\", \"a2\"],\r\n            [\"A\", \"a3\"],\r\n            [\"B\", \"a1\"],\r\n            [\"B\", \"a2\"],\r\n            [\"C\", \"c1\"],\r\n            [\"C\", \"c2\"]\r\n        ]\r\n    };\r\n\r\n    let tableTwoGroups: DataView = {\r\n        metadata: { columns: [groupSource1, groupSource2] },\r\n        table: dataViewTableTwoGroups\r\n    };\r\n\r\n    let tableTwoGroupsIncreasedFontSize: DataView = {\r\n        metadata: {\r\n            columns: [groupSource1, groupSource2],\r\n            objects: tableTotalsIncreasedFontSize,\r\n        },\r\n        table: dataViewTableTwoGroups\r\n    };\r\n\r\n    let tableWithLongText: DataView = {\r\n        metadata: {\r\n            columns: [groupSource1, groupSource2, measureSource1, measureSource2, measureSource3],\r\n            objects: tableTotals\r\n        },\r\n        table: {\r\n            columns: [groupSource1, groupSource2, measureSource1, measureSource2, measureSource3],\r\n            rows: [\r\n                [\"432432432\", \"a5\", 344344, 1043241, 104342],\r\n                [\"g4\", \"432432432\", 114324325, 116, 432432432],\r\n                [\"114324325\", \"114324325\", 43242, 114324325, 3243242334]\r\n            ],\r\n            totals: [null, null, null, 114711911, 115367542, 3672424338]\r\n        }\r\n    };\r\n\r\n    let tableTwoGroupsThreeMeasures: DataView = {\r\n        metadata: {\r\n            columns: [groupSource1, groupSource2, measureSource1, measureSource2, measureSource3],\r\n            objects: tableTotals\r\n        },\r\n        table: {\r\n            columns: [groupSource1, groupSource2, measureSource1, measureSource2, measureSource3],\r\n            rows: [\r\n                [\"A\", \"a1\", 100, 101, 102],\r\n                [\"A\", \"a2\", 103, 104, 105],\r\n                [\"A\", \"a3\", 106, 107, 108],\r\n                [\"B\", \"a1\", 109, 110, 111],\r\n                [\"B\", \"a2\", 112, 113, 114],\r\n                [\"C\", \"c1\", 115, 116, 117],\r\n                [\"C\", \"c2\", 118, 119, 120]\r\n            ],\r\n            totals: [null, null, 763, 770, 777]\r\n        }\r\n    };\r\n\r\n    let tableTwoGroupsThreeMeasuresIncreasedFontSize: DataView = {\r\n        metadata: {\r\n            columns: [groupSource1, groupSource2, measureSource1, measureSource2, measureSource3],\r\n            objects: tableTotalsIncreasedFontSize\r\n        },\r\n        table: {\r\n            columns: [groupSource1, groupSource2, measureSource1, measureSource2, measureSource3],\r\n            rows: [\r\n                [\"A\", \"a1\", 100, 101, 102],\r\n                [\"A\", \"a2\", 103, 104, 105],\r\n                [\"A\", \"a3\", 106, 107, 108],\r\n                [\"B\", \"a1\", 109, 110, 111],\r\n                [\"B\", \"a2\", 112, 113, 114],\r\n                [\"C\", \"c1\", 115, 116, 117],\r\n                [\"C\", \"c2\", 118, 119, 120]\r\n            ],\r\n            totals: [null, null, 763, 770, 777]\r\n        }\r\n    };\r\n\r\n    let tableTwoGroups1MeasureNulls: DataView = {\r\n        metadata: {\r\n            columns: [groupSource1, groupSource2, measureSource1]\r\n        },\r\n        table: {\r\n            columns: [groupSource1, groupSource2, measureSource1],\r\n            rows: [\r\n                [\"A\", \"a1\", 100],\r\n                [\"\", null, 103],\r\n                [\"\", \"a3\", 106],\r\n                [\"B\", \"\", 112],\r\n                [null, \"\", null]\r\n            ]\r\n        }\r\n    };\r\n\r\n    let tableThreeGroupsThreeMeasuresInterleaved: DataView = {\r\n        metadata: { columns: [groupSource1, measureSource1, groupSource2, measureSource2, groupSource3, measureSource3] },\r\n        table: {\r\n            columns: [groupSource1, measureSource1, groupSource2, measureSource2, groupSource3, measureSource3],\r\n            rows: [\r\n                [\"A\", 100, \"aa\", 101, \"aa1\", 102],\r\n                [\"A\", 103, \"aa\", 104, \"aa2\", 105],\r\n                [\"A\", 106, \"ab\", 107, \"ab1\", 108],\r\n                [\"B\", 109, \"ba\", 110, \"ba1\", 111],\r\n                [\"B\", 112, \"bb\", 113, \"bb1\", 114],\r\n                [\"B\", 115, \"bb\", 116, \"bb2\", 117],\r\n                [\"C\", 118, \"cc\", 119, \"cc1\", 120]\r\n            ]\r\n        }\r\n    };\r\n\r\n    let tableOneMeasureOneGroupSubtotals: DataView = {\r\n        metadata: {\r\n            columns: [measureSource1, groupSource1],\r\n            objects: tableTotals\r\n        },\r\n        table: {\r\n            columns: [measureSource1, groupSource1],\r\n            rows: [\r\n                [1, \"A\"],\r\n                [2, \"B\"],\r\n                [3, \"C\"]\r\n            ],\r\n            totals: [6, null]\r\n        }\r\n    };\r\n\r\n    let tableOneMeasureOneGroupColumnWidthDefault: DataView = {\r\n        metadata: {\r\n            columns: [measureSource1, groupSource1],\r\n            objects: tableColumnWidthFalse\r\n        },\r\n        table: {\r\n            columns: [measureSource1, groupSource1],\r\n            rows: [\r\n                [1, \"A\"],\r\n                [2, \"B\"],\r\n                [3, \"C\"]\r\n            ],\r\n            totals: [6, null]\r\n        }\r\n    };\r\n\r\n    let tableOneMeasureOneGroupColumnWidthTrue: DataView = {\r\n        metadata: {\r\n            columns: [measureSource1, groupSource1],\r\n            objects: tableColumnWidthTrue\r\n        },\r\n        table: {\r\n            columns: [measureSource1, groupSource1],\r\n            rows: [\r\n                [1, \"A\"],\r\n                [2, \"B\"],\r\n                [3, \"C\"]\r\n            ],\r\n            totals: [6, null]\r\n        }\r\n    };\r\n\r\n    let tableOneMeasureOneGroup: DataView = {\r\n        metadata: {\r\n            columns: [measureSource1, groupSource1],\r\n            objects: tableNoTotals\r\n        },\r\n        table: {\r\n            columns: [measureSource1, groupSource1],\r\n            rows: [\r\n                [1, \"A\"],\r\n                [2, \"B\"],\r\n                [3, \"C\"]\r\n            ]\r\n        }\r\n    };\r\n\r\n    let tableWebUrl: DataView = {\r\n        metadata: {\r\n            columns: [groupSourceWebUrl],\r\n            objects: tableNoTotals\r\n        },\r\n        table: {\r\n            columns: [groupSourceWebUrl],\r\n            rows: [\r\n                [\"http://www.microsoft.com\"],\r\n                [\"data:url\"],\r\n                [\"https://www.microsoft.com/2\"]\r\n            ]\r\n        }\r\n    };\r\n\r\n    let tableKpi: DataView = {\r\n        metadata: {\r\n            columns: [groupSourceKpiStatus],\r\n        },\r\n        table: {\r\n            columns: [groupSourceKpiStatus],\r\n            rows: [\r\n                [\"-1\"],\r\n                [\"0\"],\r\n                [\"+1\"],\r\n            ]\r\n        }\r\n    };\r\n\r\n    describe(\"Table\", () => {\r\n        it(\"Table registered capabilities\", () => {\r\n            expect(webPluginService.getPlugin(\"table\").capabilities).toEqual(tableCapabilities);\r\n        });\r\n\r\n        it(\"Capabilities should include dataViewMappings\", () => {\r\n            expect(tableCapabilities.dataViewMappings).toBeDefined();\r\n        });\r\n\r\n        it(\"Capabilities should include dataRoles\", () => {\r\n            expect(tableCapabilities.dataRoles).toBeDefined();\r\n        });\r\n\r\n        it(\"Capabilities should suppressDefaultTitle\", () => {\r\n            expect(tableCapabilities.suppressDefaultTitle).toBe(true);\r\n        });\r\n\r\n        it(\"FormatString property should match calculated\", () => {\r\n            expect(powerbi.data.DataViewObjectDescriptors.findFormatString(tableCapabilities.objects)).toEqual(TablixUtils.TablixFormatStringProp);\r\n        });\r\n\r\n        it(\"CustomizeQuery picks up enabled total\", () => {\r\n            let dataViewMapping = createCompiledDataViewMapping(tableTotals);\r\n\r\n            Table.customizeQuery({\r\n                dataViewMappings: [dataViewMapping]\r\n            });\r\n\r\n            let rows = <CompiledDataViewRoleForMapping>dataViewMapping.table.rows;\r\n            expect(rows.for.in.subtotalType).toEqual(CompiledSubtotalType.Before);\r\n        });\r\n\r\n        it(\"CustomizeQuery picks up disabled total\", () => {\r\n            let dataViewMapping = createCompiledDataViewMapping(tableNoTotals);\r\n\r\n            powerbi.visuals.Table.customizeQuery({\r\n                dataViewMappings: [dataViewMapping]\r\n            });\r\n\r\n            let rows = <CompiledDataViewRoleForMapping>dataViewMapping.table.rows;\r\n            expect(rows.for.in.subtotalType).toEqual(CompiledSubtotalType.None);\r\n        });\r\n\r\n        it(\"CustomizeQuery handles missing settings\", () => {\r\n            let dataViewMapping = createCompiledDataViewMapping();\r\n\r\n            Table.customizeQuery({\r\n                dataViewMappings: [dataViewMapping]\r\n            });\r\n\r\n            // Total should be enabled by default\r\n            let rows = <CompiledDataViewRoleForMapping>dataViewMapping.table.rows;\r\n            expect(rows.for.in.subtotalType).toEqual(CompiledSubtotalType.Before);\r\n        });\r\n\r\n        it(\"CustomizeQuery handles missing subtotal settings\", () => {\r\n            let objects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: undefined,\r\n                    autoSizeColumnWidth: true,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n            let dataViewMapping = createCompiledDataViewMapping(objects);\r\n\r\n            Table.customizeQuery({\r\n                dataViewMappings: [dataViewMapping]\r\n            });\r\n\r\n            // Total should be enabled by default\r\n            let rows = <CompiledDataViewRoleForMapping>dataViewMapping.table.rows;\r\n            expect(rows.for.in.subtotalType).toEqual(CompiledSubtotalType.Before);\r\n        });\r\n\r\n        function createCompiledDataViewMapping(objects?: powerbi.DataViewObjects): CompiledDataViewMapping {\r\n            return {\r\n                metadata: {\r\n                    objects: objects\r\n                },\r\n                table: {\r\n                    rows: {\r\n                        for: {\r\n                            in: { role: \"Values\", items: [] }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    });\r\n\r\n    describe(\"Table hierarchy navigator tests\", () => {\r\n        function createNavigator(dataViewTable: DataViewTable): TableHierarchyNavigator {\r\n            return new TableHierarchyNavigator(dataViewTable, valueFormatter.formatValueColumn);\r\n        }\r\n\r\n        describe(\"getDepth\", () => {\r\n            let dataView = tableTwoGroupsThreeMeasures;\r\n            let navigator = createNavigator(dataView.table);\r\n\r\n            it(\"returns 1 for row dimension\", () => {\r\n                expect(navigator.getDepth(dataView.table.rows)).toBe(1);\r\n            });\r\n\r\n            it(\"returns 1 for column dimension\", () => {\r\n                expect(navigator.getDepth(dataView.table.columns)).toBe(1);\r\n            });\r\n\r\n            it(\"always returns 1\", () => {\r\n                expect(navigator.getDepth(null)).toBe(1);\r\n            });\r\n        });\r\n\r\n        describe(\"getLeafCount\", () => {\r\n            let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n            let navigator = createNavigator(dataView.table);\r\n\r\n            it(\"returns the row count for row dimension\", () => {\r\n                expect(navigator.getLeafCount(dataView.table.rows)).toBe(7);\r\n            });\r\n\r\n            it(\"returns the column count for column dimension\", () => {\r\n                expect(navigator.getLeafCount(dataView.table.columns)).toBe(6);\r\n            });\r\n        });\r\n\r\n        describe(\"getLeafAt\", () => {\r\n\r\n            it(\"returns the correct leaf from the row dimension\", () => {\r\n                let dataView = tableTwoGroupsThreeMeasures;\r\n                let navigator = createNavigator(dataView.table);\r\n                let rows = dataView.table.rows;\r\n\r\n                expect(navigator.getLeafAt(rows, 0)).toBe(rows[0]);\r\n                expect(navigator.getLeafAt(rows, 1)).toBe(rows[1]);\r\n                expect(navigator.getLeafAt(rows, 6)).toBe(rows[6]);\r\n            });\r\n\r\n            it(\"returns the correct leaf from the column dimension\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n                let columns = dataView.table.columns;\r\n\r\n                expect(navigator.getLeafAt(columns, 0)).toBe(columns[0]);\r\n                expect(navigator.getLeafAt(columns, 1)).toBe(columns[1]);\r\n                expect(navigator.getLeafAt(columns, 5)).toBe(columns[5]);\r\n            });\r\n\r\n            it(\"returns undefined if index is out of bounds in the row dimension\", () => {\r\n                let dataView = tableOneMeasure;\r\n                let navigator = createNavigator(dataView.table);\r\n                let rows = dataView.table.rows;\r\n\r\n                expect(navigator.getLeafAt(rows, 1)).not.toBeDefined();\r\n            });\r\n\r\n            it(\"returns undefined if index is out of bounds in the column dimension\", () => {\r\n                let dataView = tableOneMeasure;\r\n                let navigator = createNavigator(dataView.table);\r\n                let columns = dataView.table.columns;\r\n\r\n                expect(navigator.getLeafAt(columns, 1)).not.toBeDefined();\r\n            });\r\n        });\r\n\r\n        describe(\"getParent\", () => {\r\n            let dataView = tableTwoGroupsThreeMeasures;\r\n            let navigator = createNavigator(dataView.table);\r\n\r\n            it(\"returns null for column header\", () => {\r\n                expect(navigator.getParent(dataView.table.columns[0])).toBeNull();\r\n            });\r\n\r\n            it(\"returns null for row\", () => {\r\n                expect(navigator.getParent(dataView.table.rows[0])).toBeNull();\r\n            });\r\n\r\n            it(\"returns null in any other cases\", () => {\r\n                expect(navigator.getParent(null)).toBeNull();\r\n            });\r\n        });\r\n\r\n        describe(\"getIndex\", () => {\r\n\r\n            it(\"returns the correct index for columns\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n                let columns = dataView.table.columns;\r\n\r\n                expect(navigator.getIndex(columns[0])).toBe(0);\r\n                expect(navigator.getIndex(columns[1])).toBe(1);\r\n                expect(navigator.getIndex(columns[2])).toBe(2);\r\n                expect(navigator.getIndex(columns[3])).toBe(3);\r\n                expect(navigator.getIndex(columns[4])).toBe(4);\r\n                expect(navigator.getIndex(columns[5])).toBe(5);\r\n            });\r\n\r\n            it(\"returns the correct index for rows\", () => {\r\n                let dataView = tableTwoGroupsThreeMeasures;\r\n                let navigator = createNavigator(dataView.table);\r\n                let rows = dataView.table.rows;\r\n                let row1 = { index: 0, values: rows[0] };\r\n                let row2 = { index: 1, values: rows[1] };\r\n\r\n                expect(navigator.getIndex(row1)).toBe(0);\r\n                expect(navigator.getIndex(row2)).toBe(1);\r\n            });\r\n\r\n            it(\"returns -1 if cannot find column in the collection\", () => {\r\n                let dataView = tableTwoGroups;\r\n                let navigator = createNavigator(dataView.table);\r\n                let columnInAnotherTable = tableThreeGroupsThreeMeasuresInterleaved.table.columns[4];\r\n\r\n                expect(navigator.getIndex(columnInAnotherTable)).toBe(-1);\r\n            });\r\n\r\n            it(\"returns -1 if it is null\", () => {\r\n                let dataView = tableTwoGroups;\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.getIndex(null)).toBe(-1);\r\n            });\r\n        });\r\n        describe(\"isLeaf\", () => {\r\n\r\n            it(\"returns true for columns\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n                let columns = dataView.table.columns;\r\n\r\n                expect(navigator.isLeaf(columns[0])).toBeTruthy();\r\n                expect(navigator.isLeaf(columns[1])).toBeTruthy();\r\n                expect(navigator.isLeaf(columns[2])).toBeTruthy();\r\n                expect(navigator.isLeaf(columns[3])).toBeTruthy();\r\n                expect(navigator.isLeaf(columns[4])).toBeTruthy();\r\n                expect(navigator.isLeaf(columns[5])).toBeTruthy();\r\n            });\r\n\r\n            it(\"returns true for rows\", () => {\r\n                let dataView = tableTwoGroupsThreeMeasures;\r\n                let navigator = createNavigator(dataView.table);\r\n                let rows = dataView.table.rows;\r\n\r\n                expect(navigator.isLeaf(rows[0])).toBeTruthy();\r\n                expect(navigator.isLeaf(rows[1])).toBeTruthy();\r\n                expect(navigator.isLeaf(rows[2])).toBeTruthy();\r\n                expect(navigator.isLeaf(rows[3])).toBeTruthy();\r\n                expect(navigator.isLeaf(rows[4])).toBeTruthy();\r\n                expect(navigator.isLeaf(rows[5])).toBeTruthy();\r\n                expect(navigator.isLeaf(rows[6])).toBeTruthy();\r\n            });\r\n        });\r\n\r\n        describe(\"getChildren\", () => {\r\n\r\n            it(\"returns null for column\", () => {\r\n                let dataView = tableTwoGroupsThreeMeasures;\r\n                let navigator = createNavigator(dataView.table);\r\n                let column = dataView.table.columns[3];\r\n\r\n                expect(navigator.getChildren(column)).toBeNull();\r\n            });\r\n\r\n            it(\"returns null for row\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n                let row = dataView.table.rows[4];\r\n\r\n                expect(navigator.getChildren(row)).toBeNull();\r\n            });\r\n        });\r\n\r\n        describe(\"getCount\", () => {\r\n            let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n            let navigator = createNavigator(dataView.table);\r\n\r\n            it(\"returns the number of the columns for column dimension\", () => {\r\n                expect(navigator.getCount(dataView.table.columns)).toBe(dataView.table.columns.length);\r\n            });\r\n\r\n            it(\"returns the number of the rows for row dimension\", () => {\r\n                expect(navigator.getCount(dataView.table.rows)).toBe(dataView.table.rows.length);\r\n            });\r\n        });\r\n\r\n        describe(\"getAt\", () => {\r\n\r\n            it(\"returns the correct item from the row dimension\", () => {\r\n                let dataView = tableTwoGroupsThreeMeasures;\r\n                let navigator = createNavigator(dataView.table);\r\n                let rows = dataView.table.rows;\r\n\r\n                expect(navigator.getAt(rows, 0)).toBe(rows[0]);\r\n                expect(navigator.getAt(rows, 1)).toBe(rows[1]);\r\n                expect(navigator.getAt(rows, 6)).toBe(rows[6]);\r\n            });\r\n\r\n            it(\"returns the correct item from the column dimension\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n                let columns = dataView.table.columns;\r\n\r\n                expect(navigator.getAt(columns, 0)).toBe(columns[0]);\r\n                expect(navigator.getAt(columns, 1)).toBe(columns[1]);\r\n                expect(navigator.getAt(columns, 5)).toBe(columns[5]);\r\n            });\r\n\r\n            it(\"returns undefined if index is out of bounds in the row dimension\", () => {\r\n                let dataView = tableOneMeasure;\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.getAt(dataView.table.rows, 1)).not.toBeDefined();\r\n            });\r\n\r\n            it(\"returns undefined if index is out of bounds in the column dimension\", () => {\r\n                let dataView = tableOneMeasure;\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.getAt(dataView.table.columns, 1)).not.toBeDefined();\r\n            });\r\n        });\r\n\r\n        describe(\"getLevel\", () => {\r\n            let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n            let navigator = createNavigator(dataView.table);\r\n\r\n            it(\"returns 0 for column\", () => {\r\n                expect(navigator.getLevel(dataView.table.columns[1])).toBe(0);\r\n            });\r\n\r\n            it(\"returns 0 for row\", () => {\r\n                expect(navigator.getLevel(dataView.table.rows[5])).toBe(0);\r\n            });\r\n        });\r\n\r\n        describe(\"getIntersection\", () => {\r\n            it(\"returns values in the intersection\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let visualTable = powerbi.visuals.Table.converter(dataView, false);\r\n                let rows = visualTable.visualRows;\r\n                let columns = dataView.table.columns;\r\n                let navigator = new TableHierarchyNavigator(visualTable, valueFormatter.formatValueColumn);\r\n\r\n                let expectedValues: string[][] = [\r\n                    [\"A\", \"100.0\", \"aa\", \"101.00\", \"aa1\", \"102\"],\r\n                    [\"A\", \"103.0\", \"aa\", \"104.00\", \"aa2\", \"105\"],\r\n                    [\"A\", \"106.0\", \"ab\", \"107.00\", \"ab1\", \"108\"],\r\n                    [\"B\", \"109.0\", \"ba\", \"110.00\", \"ba1\", \"111\"],\r\n                    [\"B\", \"112.0\", \"bb\", \"113.00\", \"bb1\", \"114\"],\r\n                    [\"B\", \"115.0\", \"bb\", \"116.00\", \"bb2\", \"117\"],\r\n                    [\"C\", \"118.0\", \"cc\", \"119.00\", \"cc1\", \"120\"]\r\n                ];\r\n\r\n                expect(fillResult<string>(navigator, rows, columns, \"textContent\")).toEqual(expectedValues);\r\n            });\r\n\r\n            it(\"returns weburl values\", () => {\r\n                let dataView = tableWebUrl;\r\n                let visualTable = powerbi.visuals.Table.converter(dataView, false);\r\n                let rows = visualTable.visualRows;\r\n                let columns = dataView.table.columns;\r\n                let navigator = new TableHierarchyNavigator(visualTable, valueFormatter.formatValueColumn);\r\n\r\n                let expectedValues: boolean[][] = [\r\n                    [true],\r\n                    [false],\r\n                    [true]\r\n                ];\r\n\r\n                expect(fillResult<boolean>(navigator, rows, columns, \"showUrl\")).toEqual(expectedValues);\r\n            });\r\n\r\n            it(\"returns Kpi Markup\", () => {\r\n                let dataView = tableKpi;\r\n                let visualTable = powerbi.visuals.Table.converter(dataView, false);\r\n                let rows = visualTable.visualRows;\r\n                let columns = dataView.table.columns;\r\n                let navigator = new TableHierarchyNavigator(visualTable, valueFormatter.formatValueColumn);\r\n\r\n                let expectedValues: string[][] = [\r\n                    ['<div class=\"powervisuals-glyph circle kpi-red\" style=\"display: inline-block; vertical-align: bottom; margin: 0px 1px 1px 0px;\"></div>'],\r\n                    ['<div class=\"powervisuals-glyph circle kpi-yellow\" style=\"display: inline-block; vertical-align: bottom; margin: 0px 1px 1px 0px;\"></div>'],\r\n                    ['<div class=\"powervisuals-glyph circle kpi-green\" style=\"display: inline-block; vertical-align: bottom; margin: 0px 1px 1px 0px;\"></div>'],\r\n                ];\r\n\r\n                expect(fillResult<string>(navigator, rows, columns, \"domContent\")).toEqual(expectedValues);\r\n            });\r\n\r\n            function fillResult<T>(\r\n                navigator: TableHierarchyNavigator,\r\n                rows: powerbi.visuals.DataViewVisualTableRow[],\r\n                columns: DataViewMetadataColumn[],\r\n                property: string): T[][] {\r\n\r\n                let result: T[][] = [];\r\n\r\n                for (let i = 0, ilen = rows.length; i < ilen; i++) {\r\n                    result[i] = [];\r\n                    for (let j = 0, jlen = columns.length; j < jlen; j++) {\r\n                        let propertyValue = result[i][j] = navigator.getIntersection(rows[i], columns[j])[property];\r\n                        if (propertyValue instanceof jQuery)\r\n                            result[i][j] = propertyValue[0].outerHTML;\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            }\r\n        });\r\n\r\n        describe(\"getCorner\", () => {\r\n\r\n            it(\"always returns null\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.getCorner(0, 0)).toBeNull();\r\n                expect(navigator.getCorner(10, 0)).toBeNull();\r\n                expect(navigator.getCorner(0, 10)).toBeNull();\r\n                expect(navigator.getCorner(10, 10)).toBeNull();\r\n            });\r\n        });\r\n\r\n        describe(\"headerItemEquals\", () => {\r\n\r\n            it(\"returns true if the two items are the same\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let row = dataView.table.rows[0];\r\n                let column = dataView.table.columns[0];\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.headerItemEquals(row, row)).toBeTruthy();\r\n                expect(navigator.headerItemEquals(column, column)).toBeTruthy();\r\n            });\r\n\r\n            it(\"returns false if the two items are not same\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.headerItemEquals({ displayName: \"a\" }, { displayName: \"a\" })).toBeTruthy();\r\n            });\r\n            it(\"returns true for rows with index\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.headerItemEquals({ index: 1, values: [] }, { index: 1, values: [] })).toBeTruthy();\r\n            });\r\n            it(\"returns false if the two items are not same\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let row = dataView.table.rows[0];\r\n                let column = dataView.table.columns[0];\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.headerItemEquals(row, column)).toBeFalsy();\r\n                expect(navigator.headerItemEquals(column, row)).toBeFalsy();\r\n            });\r\n            it(\"returns false detects rows with index\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let navigator = createNavigator(dataView.table);\r\n\r\n                expect(navigator.headerItemEquals({ index: 1 }, { index: 2 })).toBeFalsy();\r\n            });\r\n\r\n        });\r\n\r\n        describe(\"bodyCellItemEquals\", () => {\r\n\r\n            it(\"returns true if the two items are the same\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let dataViewVisualTable = Table.converter(dataView, false);\r\n                let navigator = createNavigator(dataViewVisualTable);\r\n                let cell1 = navigator.getIntersection(dataViewVisualTable.visualRows[0], dataView.table.columns[3]);\r\n                let cell2 = navigator.getIntersection(dataViewVisualTable.visualRows[0], dataView.table.columns[3]);\r\n\r\n                expect(navigator.bodyCellItemEquals(cell1, cell2)).toBeTruthy();\r\n            });\r\n\r\n            it(\"returns false if the two items are not same\", () => {\r\n                let dataView = tableThreeGroupsThreeMeasuresInterleaved;\r\n                let dataViewVisualTable = Table.converter(dataView, false);\r\n                let navigator = createNavigator(dataViewVisualTable);\r\n                let cell1 = navigator.getIntersection(dataViewVisualTable.visualRows[0], dataView.table.columns[1]);\r\n                let cell2 = navigator.getIntersection(dataViewVisualTable.visualRows[0], dataView.table.columns[2]);\r\n\r\n                expect(navigator.bodyCellItemEquals(cell1, cell2)).toBeFalsy();\r\n            });\r\n        });\r\n    });\r\n\r\n    describe(\"Table logic\", () => {\r\n        let v: powerbi.IVisual,\r\n            element: JQuery;\r\n\r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom(\"500\", \"500\");\r\n            element[\"visible\"] = () => { return true; };\r\n            v = webPluginService.getPlugin(\"table\").create();\r\n            v.init({\r\n                element: element,\r\n                host: powerbitests.mocks.createVisualHostServices(),\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true },\r\n                interactivity: {\r\n                    selection: true\r\n                }\r\n            });\r\n        });\r\n\r\n        it(\"loadMoreData calls control refresh\", () => {\r\n            let nav = { update() { } };\r\n            let control = { refresh() { }, rowDimension: {}, updateModels(resetScrollOffsets: boolean, rowModel: any, columnModel: any) { } };\r\n            let navSpy = spyOn(nav, \"update\");\r\n            let controlSpy = spyOn(control, \"refresh\");\r\n            v[\"hierarchyNavigator\"] = nav;\r\n            v[\"tablixControl\"] = control;\r\n\r\n            v.onDataChanged({\r\n                dataViews: [tableOneGroup],\r\n                operationKind: powerbi.VisualDataChangeOperationKind.Append\r\n            });\r\n\r\n            expect(navSpy).toHaveBeenCalled();\r\n            expect(controlSpy).toHaveBeenCalled();\r\n        });\r\n\r\n        it(\"needsMoreData waitingForData\", () => {\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: { columns: [groupSource1], segment: {} },\r\n                    table: dataViewTableOneGroup\r\n                }]\r\n            });\r\n\r\n            v[\"waitingForData\"] = true;\r\n            let tableVisual: Table = <Table>v;\r\n            let lastRow = dataViewTableOneGroup.rows[2];\r\n            let result = tableVisual.needsMoreData(lastRow);\r\n\r\n            expect(result).toBe(false);\r\n        });\r\n\r\n        it(\"needsMoreData segmentComplete\", () => {\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: { columns: [groupSource1] },\r\n                    table: dataViewTableOneGroup\r\n                }]\r\n            });\r\n\r\n            let tableVisual: Table = <Table>v;\r\n            let lastRow = dataViewTableOneGroup.rows[2];\r\n            let result = tableVisual.needsMoreData(lastRow);\r\n\r\n            expect(result).toBe(false);\r\n        });\r\n\r\n        it(\"needsMoreData belowThreshold\", () => {\r\n\r\n            let table = dataViewTableTwoGroups;\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: { columns: [groupSource1, groupSource2], segment: {} },\r\n                    table: table\r\n                }]\r\n            });\r\n\r\n            let tableVisual: Table = <Table>v;\r\n            let lastRow = table.rows[3];\r\n            let result = tableVisual.needsMoreData(lastRow);\r\n\r\n            expect(result).toBe(false);\r\n        });\r\n\r\n        it(\"needsMoreData aboveThreshold\", () => {\r\n\r\n            let table = dataViewTableTwoGroups;\r\n\r\n            v.onDataChanged({\r\n                dataViews: [{\r\n                    metadata: { columns: [groupSource1, groupSource2], segment: {} },\r\n                    table: table\r\n                }]\r\n            });\r\n\r\n            let tableVisual: Table = <Table>v;\r\n            let lastRow = { index: 6, values: table.rows[6] };\r\n            let result = tableVisual.needsMoreData(lastRow);\r\n\r\n            expect(result).toBe(true);\r\n        });\r\n\r\n        it(\"bindRowHeader callback\", () => {\r\n\r\n            let callBackCalled = false;\r\n            let binderOptions = {\r\n                onBindRowHeader: () => { callBackCalled = true; },\r\n                layoutKind: powerbi.visuals.controls.TablixLayoutKind.Canvas\r\n            };\r\n\r\n            let binder = new powerbi.visuals.TableBinder(binderOptions);\r\n            binder.bindRowHeader({ name: null }, {\r\n                type: null, item: null, colSpan: 0, rowSpan: 0, textAlign: \"\",\r\n                extension: { setContainerStyle: () => { } }\r\n            });\r\n\r\n            expect(callBackCalled).toBe(true);\r\n        });\r\n\r\n        it(\"enumerateObjectInstances empty data view\", () => {\r\n            v.onDataChanged({ dataViews: [] });\r\n\r\n            // Note: this must not throw an exception\r\n            expect(v.enumerateObjectInstances({ objectName: \"general\" })).toEqual(undefined);\r\n        });\r\n\r\n        it(\"enumerateObjectInstances general totals on\", () => {\r\n            v.onDataChanged({ dataViews: [tableOneMeasureOneGroupSubtotals] });\r\n\r\n            expect(v.enumerateObjectInstances({ objectName: \"general\" })).toEqual({\r\n                instances: [{\r\n                    selector: null,\r\n                    objectName: \"general\",\r\n                    properties: {\r\n                        totals: true,\r\n                        autoSizeColumnWidth: true,\r\n                        textSize: 8,\r\n                        //TODO: add after featureswitch\r\n                        //outlineColor: \"#E8E8E8\",\r\n                        // outlineWeight: 2\r\n                    }\r\n                }]\r\n            });\r\n        });\r\n\r\n        it(\"enumerateObjectInstances general totals off\", () => {\r\n            v.onDataChanged({ dataViews: [tableOneMeasureOneGroup] });\r\n\r\n            expect(v.enumerateObjectInstances({ objectName: \"general\" })).toEqual({\r\n                instances: [{\r\n                    selector: null,\r\n                    objectName: \"general\",\r\n                    properties: {\r\n                        totals: false,\r\n                        autoSizeColumnWidth: true,\r\n                        textSize: 8,\r\n                        //TODO: add after featureswitch\r\n                        //outlineColor: \"#E8E8E8\",\r\n                        // outlineWeight: 2\r\n                    }\r\n                }]\r\n            });\r\n        });\r\n\r\n        it(\"enumerateObjectInstances general no objects\", () => {\r\n            let dataView: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, groupSource1]\r\n                },\r\n                table: {\r\n                    columns: [measureSource1, groupSource1],\r\n                    rows: [\r\n                        [1, \"A\"],\r\n                        [2, \"B\"],\r\n                        [3, \"C\"]\r\n                    ],\r\n                    totals: [6, null]\r\n                }\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            expect(v.enumerateObjectInstances({ objectName: \"general\" })).toEqual({\r\n                instances: [{\r\n                    selector: null,\r\n                    objectName: \"general\",\r\n                    properties: {\r\n                        totals: true,\r\n                        autoSizeColumnWidth: true,\r\n                        textSize: 8,\r\n                        //TODO: add after featureswitch\r\n                        //outlineColor: \"#E8E8E8\",\r\n                        // outlineWeight: 2\r\n                    }\r\n                }]\r\n            });\r\n        });\r\n\r\n        it(\"enumerateObjectInstances some other object\", () => {\r\n            v.onDataChanged({ dataViews: [tableOneMeasureOneGroup] });\r\n\r\n            let objects = v.enumerateObjectInstances({ objectName: \"some other object\" });\r\n            expect(objects).toEqual(undefined);\r\n        });\r\n\r\n        it(\"enumerateObjectInstances general autoSizeColumnWidth off\", () => {\r\n            v.onDataChanged({ dataViews: [tableOneMeasureOneGroupColumnWidthDefault] });\r\n\r\n            expect(v.enumerateObjectInstances({ objectName: \"general\" })).toEqual({\r\n                instances: [{\r\n                    selector: null,\r\n                    objectName: \"general\",\r\n                    properties: {\r\n                        totals: true,\r\n                        autoSizeColumnWidth: false,\r\n                        textSize: 8,\r\n                        //TODO: add after featureswitch\r\n                        //outlineColor: \"#E8E8E8\",\r\n                        // outlineWeight: 2\r\n                    }\r\n                }]\r\n            });\r\n        });\r\n\r\n        it(\"enumerateObjectInstances general autoSizeColumnWidth on\", () => {\r\n            v.onDataChanged({ dataViews: [tableOneMeasureOneGroupColumnWidthTrue] });\r\n\r\n            expect(v.enumerateObjectInstances({ objectName: \"general\" })).toEqual({\r\n                instances: [{\r\n                    selector: null,\r\n                    objectName: \"general\",\r\n                    properties: {\r\n                        totals: true,\r\n                        autoSizeColumnWidth: true,\r\n                        textSize: 8,\r\n                        //TODO: add after featureswitch\r\n                        //outlineColor: \"#E8E8E8\",\r\n                        // outlineWeight: 2\r\n                    }\r\n                }]\r\n            });\r\n        });\r\n\r\n        it(\"RefreshControl invisible parent\", () => {\r\n            let control = { refresh() { } };\r\n            let controlSpy = spyOn(control, \"refresh\");\r\n            v[\"shouldAllowHeaderResize\"] = () => { return true; };\r\n            v[\"hierarchyNavigator\"] = { update() { } };\r\n            v[\"tablixControl\"] = control;\r\n            v[\"element\"][\"visible\"] = () => { return false; };\r\n\r\n            v.onResizing({ width: 100, height: 100 });\r\n\r\n            // Even though element visibility is false, because height and width are greater than zero, refresh will be called\r\n            expect(controlSpy).toHaveBeenCalled();\r\n        });\r\n\r\n        it(\"RefreshControl invisible parent but dashboard layout\", () => {\r\n            let control = { refresh() { } };\r\n            let controlSpy = spyOn(control, \"refresh\");\r\n            v[\"shouldAllowHeaderResize\"] = () => { return true; };\r\n            v[\"hierarchyNavigator\"] = { update() { } };\r\n            v[\"tablixControl\"] = control;\r\n            v[\"element\"][\"visible\"] = () => { return false; };\r\n            v[\"isInteractive\"] = false;\r\n\r\n            v.onResizing({ width: 100, height: 100 });\r\n\r\n            expect(controlSpy).toHaveBeenCalled();\r\n        });\r\n\r\n        it(\"ShouldClearControl noSort\", (done) => {\r\n            v.onDataChanged({ dataViews: [tableOneGroup] });\r\n            let refreshSpy = spyOn(v, \"refreshControl\").and.callFake(() => { });\r\n\r\n            v.onDataChanged({ dataViews: [tableOneGroup] });\r\n            setTimeout(() => {\r\n                expect(refreshSpy).toHaveBeenCalledWith(true);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"ShouldClearControl sort\", (done) => {\r\n            v.onDataChanged({ dataViews: [tableOneGroup] });\r\n            let refreshSpy = spyOn(v, \"refreshControl\").and.callFake(() => { });\r\n            v[\"waitingForSort\"] = true;\r\n            v.onDataChanged({ dataViews: [tableOneGroup] });\r\n\r\n            setTimeout(() => {\r\n                expect(refreshSpy).toHaveBeenCalledWith(false);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"suppressNotification not set after loading table with ColumnAutoSizeProperty off\", (done) => {\r\n            let dataViewObjects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: true,\r\n                    autoSizeColumnWidth: false,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n\r\n            let measureSource1WithWidth = powerbi.Prototype.inheritSingle(measureSource1);\r\n            measureSource1WithWidth.objects = { general: { columnWidth: 100 } };\r\n\r\n            let measureSource2WithWidth = powerbi.Prototype.inheritSingle(measureSource2);\r\n            measureSource2WithWidth.objects = { general: { columnWidth: 200 } };\r\n\r\n            let measureSource3WithWidth = powerbi.Prototype.inheritSingle(measureSource3);\r\n            measureSource3WithWidth.objects = { general: { columnWidth: 300 } };\r\n\r\n            let dataView: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1WithWidth, measureSource2WithWidth, measureSource3WithWidth],\r\n                    objects: dataViewObjects\r\n                },\r\n                table: dataViewTableThreeMeasures\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let tableVisual = <Table>v;\r\n                let colWidthManager = tableVisual.getColumnWidthManager();\r\n                let persistedColWidths = colWidthManager.getTablixColumnWidthsObject();\r\n\r\n                expect(colWidthManager.suppressOnDataChangedNotification).toBe(false);\r\n                expect(persistedColWidths.length).toBe(3);\r\n                expect(persistedColWidths[0].queryName).toBe('measure1');\r\n                expect(persistedColWidths[0].width).toBe(100);\r\n                expect(persistedColWidths[1].queryName).toBe('measure2');\r\n                expect(persistedColWidths[1].width).toBe(200);\r\n                expect(persistedColWidths[2].queryName).toBe('measure3');\r\n                expect(persistedColWidths[2].width).toBe(300);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"ColumnWidthChangedCallback ColumnAutoSizeProperty on\", (done) => {\r\n            let dataViewObjects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: true,\r\n                    autoSizeColumnWidth: true,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n            let dataView: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, measureSource2, measureSource3],\r\n                    objects: dataViewObjects\r\n                },\r\n                table: dataViewTableThreeMeasures\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let tableVisual = <Table>v;\r\n                tableVisual.columnWidthChanged(2, 45);\r\n                let colWidthManager = tableVisual.getColumnWidthManager();\r\n                let persistedColWidths = colWidthManager.getTablixColumnWidthsObject();\r\n                expect(persistedColWidths.length).toBe(1);\r\n                expect(persistedColWidths[0].queryName).toBe('measure2');\r\n                expect(persistedColWidths[0].width).toBe(45);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        xit(\"ColumnWidthChangedCallback ColumnAutoSizeProperty off\", (done) => {\r\n            let dataViewObjects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: true,\r\n                    autoSizeColumnWidth: false,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n            let dataView: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, measureSource2, measureSource3],\r\n                    objects: dataViewObjects\r\n                },\r\n                table: dataViewTableThreeMeasures\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                v.onDataChanged({ dataViews: [dataView] });\r\n                setTimeout(() => {\r\n                    let tableVisual = <Table>v;\r\n                    let colWidthManager = tableVisual.getColumnWidthManager();\r\n                    let persistedColWidths = colWidthManager.getTablixColumnWidthsObject();\r\n                    expect(persistedColWidths.length).toBe(3);\r\n                    expect(persistedColWidths[0].queryName).toBe(measureSource1.queryName);\r\n                    expect(persistedColWidths[0].width).toBe(48);\r\n                    expect(persistedColWidths[1].queryName).toBe(measureSource2.queryName);\r\n                    expect(persistedColWidths[1].width).toBe(58);\r\n                    expect(persistedColWidths[2].queryName).toBe(measureSource3.queryName);\r\n                    expect(persistedColWidths[2].width).toBe(50);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        xit(\"ColumnWidthChangedCallback ColumnAutoSizeProperty off then resize\", (done) => {\r\n            let dataViewObjects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: true,\r\n                    autoSizeColumnWidth: false,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n            let dataView: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, measureSource2, measureSource3],\r\n                    objects: dataViewObjects\r\n                },\r\n                table: dataViewTableThreeMeasures\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                v.onDataChanged({ dataViews: [dataView] });\r\n                setTimeout(() => {\r\n                    let tableVisual = <Table>v;\r\n                    let colWidthManager = tableVisual.getColumnWidthManager();\r\n                    expect(colWidthManager.suppressOnDataChangedNotification).toBe(true);\r\n                    \r\n                    // Resize\r\n                    tableVisual.columnWidthChanged(2, 45);\r\n                    expect(colWidthManager.suppressOnDataChangedNotification).toBe(true);\r\n                    let persistedColWidths = colWidthManager.getTablixColumnWidthsObject();\r\n                    expect(persistedColWidths.length).toBe(3);\r\n                    expect(persistedColWidths[0].queryName).toBe(measureSource1.queryName);\r\n                    expect(persistedColWidths[0].width).toBe(48);\r\n                    expect(persistedColWidths[1].queryName).toBe(measureSource2.queryName);\r\n                    expect(persistedColWidths[1].width).toBe(45);\r\n                    expect(persistedColWidths[2].queryName).toBe(measureSource3.queryName);\r\n                    expect(persistedColWidths[2].width).toBe(50);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        xit(\"ColumnWidthManager ColumnAutoSizeProperty off malformed selector\", (done) => {\r\n            let dataViewObjects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: true,\r\n                    autoSizeColumnWidth: false,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n            let newMeasureSource2: DataViewMetadataColumn = { displayName: \"\", queryName: undefined, type: dataTypeNumber, isMeasure: true, index: 4, objects: { general: { formatString: \"#.00\", columnWidth: 45 } } };\r\n            let dataView0: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                    objects: dataViewObjects\r\n                },\r\n                table: {\r\n                    columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                    rows: [\r\n                        [100, 10100, 102000],\r\n                        [103, 104000, 1050000],\r\n                        [106, 1070000, 10800000]\r\n                    ]\r\n                }\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView0] });\r\n            setTimeout(() => {\r\n                v.onDataChanged({ dataViews: [dataView0] });\r\n                setTimeout(() => {\r\n                    let tableVisual = <Table>v;\r\n                    let colWidthManager = tableVisual.getColumnWidthManager();\r\n                    let changes: powerbi.VisualObjectInstancesToPersist = colWidthManager.getVisualObjectInstancesToPersist();\r\n                    expect(changes.merge).toBeDefined();\r\n                    expect(changes.merge.length).toBe(3);\r\n\r\n                    let objectInstances = changes.merge;\r\n                    expect(objectInstances[0].properties[\"autoSizeColumnWidth\"]).toBe(false);\r\n                    expect(objectInstances[1].selector.metadata).toBe(measureSource1.queryName);\r\n                    expect(objectInstances[1].properties[\"columnWidth\"]).toBe(48);\r\n                    expect(objectInstances[2].selector.metadata).toBe(measureSource3.queryName);\r\n                    expect(objectInstances[2].properties[\"columnWidth\"]).toBe(50);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Change ViewMode allow Header Resize\", (done) => {\r\n            let dataViewObjects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: true,\r\n                    autoSizeColumnWidth: false,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n            let newMeasureSource2: DataViewMetadataColumn = { displayName: \"\", queryName: undefined, type: dataTypeNumber, isMeasure: true, index: 4, objects: { general: { formatString: \"#.00\", columnWidth: 45 } } };\r\n            let dataView0: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                    objects: dataViewObjects\r\n                },\r\n                table: {\r\n                    columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                    rows: [\r\n                        [100, 10100, 102000],\r\n                        [103, 104000, 1050000],\r\n                        [106, 1070000, 10800000]\r\n                    ]\r\n                }\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView0] });\r\n            setTimeout(() => {\r\n                let tableVisual = <Table>v;\r\n                let control = <TablixControl>tableVisual[\"tablixControl\"];\r\n                let layoutManager = control.layoutManager;\r\n\r\n                expect(layoutManager[\"_allowHeaderResize\"]).toBe(false);\r\n                let viewMode = powerbi.ViewMode.Edit;\r\n                tableVisual[\"hostServices\"] = {\r\n                    getViewMode: () => { return viewMode }\r\n                };\r\n                tableVisual.onViewModeChanged(viewMode);\r\n\r\n                setTimeout(() => {\r\n                    expect(layoutManager[\"_allowHeaderResize\"]).toBe(true);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"Table DOM validation\", () => {\r\n        let v: powerbi.IVisual,\r\n            element: JQuery,\r\n            ContainerClassName = 'bi-tablix',\r\n            NoMarginClass = \"bi-tablix-cellNoMarginStyle\",\r\n            ColumnHeaderClassNameIconHidden = \"bi-table-column-header\",\r\n            RowClassName = \"bi-table-row\",\r\n            LastRowClassName = \"bi-table-last-row\",\r\n            FooterClassName = \"bi-table-footer\",\r\n            NumericCellClassName = \" bi-table-cell-numeric\",\r\n            EmptyHeaderCell = \"\\xa0\";\r\n\r\n        beforeEach(() => {\r\n\r\n            groupSource1.index = 0;\r\n            groupSource2.index = 1;\r\n            groupSource3.index = 2;\r\n            measureSource1.index = 3;\r\n            measureSource2.index = 4;\r\n            measureSource3.index = 5;\r\n        });\r\n\r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom(\"500\", \"500\");\r\n            element[\"visible\"] = () => { return true; };\r\n            v = webPluginService.getPlugin(\"table\").create();\r\n            v.init({\r\n                element: element,\r\n                host: powerbitests.mocks.createVisualHostServices(),\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true },\r\n                interactivity: {\r\n                    selection: true\r\n                }\r\n            });\r\n        });\r\n\r\n        function validateSortIcons(expectedValues: string[]): void {\r\n            tablixHelper.validateSortIconClassNames(expectedValues, \".bi-tablix tr\");\r\n        }\r\n\r\n        function validateTable(expectedValues: string[][]): void {\r\n            tablixHelper.validateTable(expectedValues, \".bi-tablix tr\");\r\n        }\r\n\r\n        function validateClassNames(expectedValues: string[][]): void {\r\n            tablixHelper.validateClassNames(expectedValues, \".bi-tablix tr\", NoMarginClass);\r\n        }\r\n\r\n        xit(\"resize with autoSizeColumnwidth on\", (done) => {\r\n            let selector = \".bi-tablix tr\";\r\n            let dataViewObjects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: true,\r\n                    autoSizeColumnWidth: true,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n            let dataView: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, measureSource2, measureSource3],\r\n                    objects: dataViewObjects\r\n                },\r\n                table: dataViewTableThreeMeasures\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let rows = $(selector);\r\n                let rowCells = rows.eq(0).find('td');\r\n                expect(rowCells.eq(1).width()).toEqual(48);\r\n                expect(rowCells.eq(2).width()).toEqual(58);\r\n                expect(rowCells.eq(3).width()).toEqual(50);\r\n                \r\n                // Mock Resize\r\n                let newMeasureSource2: DataViewMetadataColumn = { displayName: \"measure2\", queryName: \"measure2\", type: dataTypeNumber, isMeasure: true, index: 4, objects: { general: { formatString: \"#.00\", columnWidth: 45 } } };\r\n                let dataView2: DataView = {\r\n                    metadata: {\r\n                        columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                        objects: dataViewObjects\r\n                    },\r\n                    table: dataViewTableThreeMeasures\r\n                };\r\n                v.onDataChanged({ dataViews: [dataView2] });\r\n                setTimeout(() => {\r\n                    let newRows = $(selector);\r\n                    let newRowCells = newRows.eq(0).find('td');\r\n                    expect(newRowCells.eq(1).width()).toEqual(48);\r\n                    expect(newRowCells.eq(2).width()).toEqual(45);\r\n                    expect(newRowCells.eq(3).width()).toEqual(50);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        xit(\"autoSizeColumnwidth on to off then resize\", (done) => {\r\n            let selector = \".bi-tablix tr\";\r\n            let dataView: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, measureSource2, measureSource3],\r\n                    objects: tableColumnWidthFalse\r\n                },\r\n                table: dataViewTableThreeMeasures\r\n            };\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let rows = $(selector);\r\n                let rowCells = rows.eq(0).find('td');\r\n                expect(rowCells.eq(1).width()).toEqual(48);\r\n                expect(rowCells.eq(2).width()).toEqual(58);\r\n                expect(rowCells.eq(3).width()).toEqual(50);\r\n\r\n                // Mock Resize\r\n                let newMeasureSource2: DataViewMetadataColumn = { displayName: \"measure2\", queryName: \"measure2\", type: dataTypeNumber, isMeasure: true, index: 4, objects: { general: { formatString: \"#.00\", columnWidth: 45 } } };\r\n                let dataView2: DataView = {\r\n                    metadata: {\r\n                        columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                        objects: tableColumnWidthFalse\r\n                    },\r\n                    table: dataViewTableThreeMeasures\r\n                };\r\n                let tableVisual = <Table>v;\r\n                let colwidthManager = tableVisual.getColumnWidthManager();\r\n                \r\n                // Overriding suppress notification. For test purposes the call needs to go through\r\n                colwidthManager.suppressOnDataChangedNotification = false;\r\n                colwidthManager.updateDataView(dataView2);\r\n                v.onDataChanged({ dataViews: [dataView2] });\r\n                setTimeout(() => {\r\n                    let newRows = $(selector);\r\n                    let newRowCells = newRows.eq(0).find('td');\r\n                    expect(newRowCells.eq(1).width()).toEqual(48);\r\n                    expect(newRowCells.eq(2).width()).toEqual(45);\r\n                    expect(newRowCells.eq(3).width()).toEqual(50);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        xit(\"autoSizeColumnwidth off to on\", (done) => {\r\n            let selector = \".bi-tablix tr\";\r\n            let dataViewObjects: powerbi.DataViewObjects = {\r\n                general: {\r\n                    totals: true,\r\n                    autoSizeColumnWidth: false,\r\n                    textSize: 8,\r\n                }\r\n            };\r\n            let newMeasureSource2: DataViewMetadataColumn = { displayName: \"measure2\", queryName: \"measure2\", type: dataTypeNumber, isMeasure: true, index: 4, objects: { general: { formatString: \"#.00\", columnWidth: 45 } } };\r\n            let dataView0: DataView = {\r\n                metadata: {\r\n                    columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                    objects: dataViewObjects\r\n                },\r\n                table: dataViewTableThreeMeasures\r\n            };\r\n            \r\n            // AutoSize property off\r\n            v.onDataChanged({ dataViews: [dataView0] });\r\n            setTimeout(() => {\r\n                let rows = $(selector);\r\n                let rowCells = rows.eq(0).find('td');\r\n                expect(rowCells.eq(1).width()).toEqual(48);\r\n                expect(rowCells.eq(2).width()).toEqual(45);\r\n                expect(rowCells.eq(3).width()).toEqual(50);\r\n                \r\n                // AutoSize property on\r\n                let dataViewObjects1: powerbi.DataViewObjects = {\r\n                    general: {\r\n                        totals: true,\r\n                        autoSizeColumnWidth: true,\r\n                        textSize: 8,\r\n                    }\r\n                };\r\n                let dataView1: DataView = {\r\n                    metadata: {\r\n                        columns: [measureSource1, measureSource2, measureSource3],\r\n                        objects: dataViewObjects1\r\n                    },\r\n                    table: dataViewTableThreeMeasures\r\n                };\r\n                let tableVisual = <Table>v;\r\n                let colwidthManager = tableVisual.getColumnWidthManager();\r\n                \r\n                // Overriding suppress notification. For test purposes the call needs to go through\r\n                colwidthManager.suppressOnDataChangedNotification = false;\r\n                colwidthManager.updateDataView(dataView1);\r\n                v.onDataChanged({ dataViews: [dataView1] });\r\n                setTimeout(() => {\r\n                    let rows = $(selector);\r\n                    let rowCells = rows.eq(0).find('td');\r\n                    expect(rowCells.eq(1).width()).toEqual(48);\r\n                    expect(rowCells.eq(2).width()).toEqual(58);\r\n                    expect(rowCells.eq(3).width()).toEqual(50);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        describe('text size', () => {\r\n            describe('default', () => {\r\n                it('font size set on container', (done) => {\r\n                    let newMeasureSource2: DataViewMetadataColumn = {\r\n                        displayName: \"measure2\",\r\n                        queryName: \"measure2\",\r\n                        type: dataTypeNumber,\r\n                        isMeasure: true,\r\n                        index: 4,\r\n                        objects: {\r\n                            general: {\r\n                                formatString: \"#.00\",\r\n                                columnWidth: 45,\r\n                            },\r\n                        },\r\n                    };\r\n\r\n                    // AutoSize property off\r\n                    v.onDataChanged({\r\n                        dataViews: [{\r\n                            metadata: {\r\n                                columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                                objects: {\r\n                                    general: {\r\n                                        totals: true,\r\n                                        autoSizeColumnWidth: false,\r\n                                    }\r\n                                }\r\n                            },\r\n                            table: dataViewTableThreeMeasures\r\n                        }]\r\n                    });\r\n                    setTimeout(() => {\r\n                        let actualFontSize = element.find(`.${ContainerClassName}`).css('font-size');\r\n                        tablixHelper.validateFontSize(actualFontSize, 8);\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n\r\n                it(\"2x8 table with default text size row height\", (done) => {\r\n                    let dataView = tableTwoGroups;\r\n                    v.onDataChanged({ dataViews: [dataView] });\r\n\r\n                    setTimeout(() => {\r\n                        let cells = element\r\n                            .find(`.${RowClassName}, .${ColumnHeaderClassNameIconHidden}, .${LastRowClassName}`)\r\n                            .find('> div');\r\n\r\n                        expect(cells.length).toBe(16);\r\n                        tablixHelper.validateCellHeights(cells.slice(0, 1), 16);\r\n                        tablixHelper.validateCellHeights(cells.slice(2), 13);\r\n\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n            });\r\n\r\n            describe('specified', () => {\r\n                it('font size set on container', (done) => {\r\n                    let newMeasureSource2: DataViewMetadataColumn = {\r\n                        displayName: \"measure2\",\r\n                        queryName: \"measure2\",\r\n                        type: dataTypeNumber,\r\n                        isMeasure: true,\r\n                        index: 4,\r\n                        objects: {\r\n                            general: {\r\n                                formatString: \"#.00\",\r\n                                columnWidth: 45,\r\n                            },\r\n                        },\r\n                    };\r\n\r\n                    // AutoSize property off\r\n                    v.onDataChanged({\r\n                        dataViews: [{\r\n                            metadata: {\r\n                                columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                                objects: {\r\n                                    general: {\r\n                                        totals: true,\r\n                                        autoSizeColumnWidth: false,\r\n                                        textSize: 18,\r\n                                    }\r\n                                }\r\n                            },\r\n                            table: dataViewTableThreeMeasures,\r\n                        }]\r\n                    });\r\n                    setTimeout(() => {\r\n                        let actualFontSize = element.find(`.${ContainerClassName}`).css('font-size');\r\n                        tablixHelper.validateFontSize(actualFontSize, 18);\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n\r\n                it(\"2x8 table with specified text size adjusted row height\", (done) => {\r\n                    let dataView = tableTwoGroupsIncreasedFontSize;\r\n                    v.onDataChanged({ dataViews: [dataView] });\r\n\r\n                    setTimeout(() => {\r\n                        let cells = element\r\n                            .find(`.${RowClassName}, .${ColumnHeaderClassNameIconHidden}, .${LastRowClassName}`)\r\n                            .find('> div');\r\n\r\n                        expect(cells.length).toBe(16);\r\n                        tablixHelper.validateCellHeights(cells, 25);\r\n\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n\r\n                it(\"5x9 table with text size does not crop columns by minimum column width\", (done) => {\r\n                    let dataView = tableTwoGroupsThreeMeasuresIncreasedFontSize;\r\n                    measureSource1.index = 2;\r\n                    measureSource2.index = 3;\r\n                    measureSource3.index = 4;\r\n\r\n                    v.onDataChanged({ dataViews: [dataView] });\r\n\r\n                    setTimeout(() => {\r\n                        // All columns will be visible since this is not dashboard\r\n                        let cellValue1: string = formatter(dataView.table.rows[0][2], measureSource1);\r\n                        let cellValue2: string = formatter(dataView.table.rows[1][2], measureSource1);\r\n                        let cellValue3: string = formatter(dataView.table.rows[2][2], measureSource1);\r\n                        let cellValue4: string = formatter(dataView.table.rows[3][2], measureSource1);\r\n                        let cellValue5: string = formatter(dataView.table.rows[4][2], measureSource1);\r\n                        let cellValue6: string = formatter(dataView.table.rows[5][2], measureSource1);\r\n                        let cellValue7: string = formatter(dataView.table.rows[6][2], measureSource1);\r\n                        let cellValue8: string = formatter(dataView.table.rows[0][3], measureSource2);\r\n                        let cellValue9: string = formatter(dataView.table.rows[1][3], measureSource2);\r\n                        let cellValue10: string = formatter(dataView.table.rows[2][3], measureSource2);\r\n                        let cellValue11: string = formatter(dataView.table.rows[3][3], measureSource2);\r\n                        let cellValue12: string = formatter(dataView.table.rows[4][3], measureSource2);\r\n                        let cellValue13: string = formatter(dataView.table.rows[5][3], measureSource2);\r\n                        let cellValue14: string = formatter(dataView.table.rows[6][3], measureSource2);\r\n                        let cellValue15: string = formatter(dataView.table.rows[0][4], measureSource3);\r\n                        let cellValue16: string = formatter(dataView.table.rows[1][4], measureSource3);\r\n                        let cellValue17: string = formatter(dataView.table.rows[2][4], measureSource3);\r\n                        let cellValue18: string = formatter(dataView.table.rows[3][4], measureSource3);\r\n                        let cellValue19: string = formatter(dataView.table.rows[4][4], measureSource3);\r\n                        let cellValue20: string = formatter(dataView.table.rows[5][4], measureSource3);\r\n                        let cellValue21: string = formatter(dataView.table.rows[6][4], measureSource3);\r\n\r\n                        let total1: string = formatter(dataView.table.totals[2], measureSource1);\r\n                        let total2: string = formatter(dataView.table.totals[3], measureSource2);\r\n                        let total3: string = formatter(dataView.table.totals[4], measureSource3);\r\n\r\n                        let expectedCells: string[][] = [\r\n                            [\"\", groupSource1.displayName, groupSource2.displayName, measureSource1.displayName, measureSource2.displayName, measureSource3.displayName, \"\"],\r\n                            [\"\", dataView.table.rows[0][0], dataView.table.rows[0][1], cellValue1, cellValue8, cellValue15],\r\n                            [\"\", dataView.table.rows[1][0], dataView.table.rows[1][1], cellValue2, cellValue9, cellValue16],\r\n                            [\"\", dataView.table.rows[2][0], dataView.table.rows[2][1], cellValue3, cellValue10, cellValue17],\r\n                            [\"\", dataView.table.rows[3][0], dataView.table.rows[3][1], cellValue4, cellValue11, cellValue18],\r\n                            [\"\", dataView.table.rows[4][0], dataView.table.rows[4][1], cellValue5, cellValue12, cellValue19],\r\n                            [\"\", dataView.table.rows[5][0], dataView.table.rows[5][1], cellValue6, cellValue13, cellValue20],\r\n                            [\"\", dataView.table.rows[6][0], dataView.table.rows[6][1], cellValue7, cellValue14, cellValue21],\r\n                            [\"\", \"Total\", \"\", total1, total2, total3, \"\"]\r\n                        ];\r\n\r\n                        validateTable(expectedCells);\r\n\r\n                        let expectedClassNames: string[][] = [\r\n                            [\"\", ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, \"\"],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", LastRowClassName, LastRowClassName, LastRowClassName + NumericCellClassName, LastRowClassName + NumericCellClassName, LastRowClassName + NumericCellClassName],\r\n                            [\"\", FooterClassName, FooterClassName, FooterClassName + NumericCellClassName, FooterClassName + NumericCellClassName, FooterClassName + NumericCellClassName, \"\"]\r\n                        ];\r\n\r\n                        validateClassNames(expectedClassNames);\r\n\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n            });\r\n        });\r\n\r\n        it(\"1x2 table (one measure)\", (done) => {\r\n\r\n            let dataView = tableOneMeasure;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue: string = formatter(dataView.table.rows[0][0], measureSource1);\r\n                let expectedCells: string[][] = [\r\n                    [\"\", measureSource1.displayName, \"\"],\r\n                    [\"\", cellValue]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden, \"\"],\r\n                    [\"\", LastRowClassName + NumericCellClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x2 table (one group null)\", (done) => {\r\n\r\n            let dataView = tableOneGroupNulls;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, \"\"],\r\n                    [EmptyHeaderCell, \"\"],\r\n                    [EmptyHeaderCell, \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x3 table (one group with leading spaces)\", (done) => {\r\n\r\n            let dataView = tableOneGroupLeadingSpaces;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let expectedCells: string[][] = [\r\n                    [\"\", \"    group1\", \"\"],\r\n                    [\"\", \"    A\"],\r\n                    [\"\", \"B\"],\r\n                    [\"\", \"C\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"3x5 table (2 groups 1 measure nulls)\", (done) => {\r\n\r\n            let dataView = tableTwoGroups1MeasureNulls;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, groupSource2.displayName, measureSource1.displayName, \"\"],\r\n                    [\"\", \"A\", \"a1\", \"100.0\"],\r\n                    [\"\", \"\", \"\", \"103.0\"],\r\n                    [\"\", \"\", \"a3\", \"106.0\"],\r\n                    [\"\", \"B\", \"\", \"112.0\"],\r\n                    [EmptyHeaderCell, \"\", \"\", \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x3 table (group instances)\", (done) => {\r\n\r\n            let dataView = tableOneGroup;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], groupSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], groupSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], groupSource1);\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, \"\"],\r\n                    [\"\", cellValue1],\r\n                    [\"\", cellValue2],\r\n                    [\"\", cellValue3]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden, \"\"],\r\n                    [\"\", RowClassName],\r\n                    [\"\", RowClassName],\r\n                    [\"\", LastRowClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"2x8 table (group instances)\", (done) => {\r\n\r\n            let dataView = tableTwoGroups;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], groupSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], groupSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], groupSource1);\r\n                let cellValue4: string = formatter(dataView.table.rows[3][0], groupSource1);\r\n                let cellValue5: string = formatter(dataView.table.rows[4][0], groupSource1);\r\n                let cellValue6: string = formatter(dataView.table.rows[5][0], groupSource1);\r\n                let cellValue7: string = formatter(dataView.table.rows[6][0], groupSource1);\r\n                let cellValue8: string = formatter(dataView.table.rows[0][1], groupSource2);\r\n                let cellValue9: string = formatter(dataView.table.rows[1][1], groupSource2);\r\n                let cellValue10: string = formatter(dataView.table.rows[2][1], groupSource2);\r\n                let cellValue11: string = formatter(dataView.table.rows[3][1], groupSource2);\r\n                let cellValue12: string = formatter(dataView.table.rows[4][1], groupSource2);\r\n                let cellValue13: string = formatter(dataView.table.rows[5][1], groupSource2);\r\n                let cellValue14: string = formatter(dataView.table.rows[6][1], groupSource2);\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, groupSource2.displayName, \"\"],\r\n                    [\"\", cellValue1, cellValue8],\r\n                    [\"\", cellValue2, cellValue9],\r\n                    [\"\", cellValue3, cellValue10],\r\n                    [\"\", cellValue4, cellValue11],\r\n                    [\"\", cellValue5, cellValue12],\r\n                    [\"\", cellValue6, cellValue13],\r\n                    [\"\", cellValue7, cellValue14]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"5x9 table (group instances and measure values) with totals\", (done) => {\r\n            let dataView = tableTwoGroupsThreeMeasures;\r\n            measureSource1.index = 2;\r\n            measureSource2.index = 3;\r\n            measureSource3.index = 4;\r\n\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][2], measureSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][2], measureSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][2], measureSource1);\r\n                let cellValue4: string = formatter(dataView.table.rows[3][2], measureSource1);\r\n                let cellValue5: string = formatter(dataView.table.rows[4][2], measureSource1);\r\n                let cellValue6: string = formatter(dataView.table.rows[5][2], measureSource1);\r\n                let cellValue7: string = formatter(dataView.table.rows[6][2], measureSource1);\r\n                let cellValue8: string = formatter(dataView.table.rows[0][3], measureSource2);\r\n                let cellValue9: string = formatter(dataView.table.rows[1][3], measureSource2);\r\n                let cellValue10: string = formatter(dataView.table.rows[2][3], measureSource2);\r\n                let cellValue11: string = formatter(dataView.table.rows[3][3], measureSource2);\r\n                let cellValue12: string = formatter(dataView.table.rows[4][3], measureSource2);\r\n                let cellValue13: string = formatter(dataView.table.rows[5][3], measureSource2);\r\n                let cellValue14: string = formatter(dataView.table.rows[6][3], measureSource2);\r\n                let cellValue15: string = formatter(dataView.table.rows[0][4], measureSource3);\r\n                let cellValue16: string = formatter(dataView.table.rows[1][4], measureSource3);\r\n                let cellValue17: string = formatter(dataView.table.rows[2][4], measureSource3);\r\n                let cellValue18: string = formatter(dataView.table.rows[3][4], measureSource3);\r\n                let cellValue19: string = formatter(dataView.table.rows[4][4], measureSource3);\r\n                let cellValue20: string = formatter(dataView.table.rows[5][4], measureSource3);\r\n                let cellValue21: string = formatter(dataView.table.rows[6][4], measureSource3);\r\n\r\n                let total1: string = formatter(dataView.table.totals[2], measureSource1);\r\n                let total2: string = formatter(dataView.table.totals[3], measureSource2);\r\n                let total3: string = formatter(dataView.table.totals[4], measureSource3);\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, groupSource2.displayName, measureSource1.displayName, measureSource2.displayName, measureSource3.displayName, \"\"],\r\n                    [\"\", dataView.table.rows[0][0], dataView.table.rows[0][1], cellValue1, cellValue8, cellValue15],\r\n                    [\"\", dataView.table.rows[1][0], dataView.table.rows[1][1], cellValue2, cellValue9, cellValue16],\r\n                    [\"\", dataView.table.rows[2][0], dataView.table.rows[2][1], cellValue3, cellValue10, cellValue17],\r\n                    [\"\", dataView.table.rows[3][0], dataView.table.rows[3][1], cellValue4, cellValue11, cellValue18],\r\n                    [\"\", dataView.table.rows[4][0], dataView.table.rows[4][1], cellValue5, cellValue12, cellValue19],\r\n                    [\"\", dataView.table.rows[5][0], dataView.table.rows[5][1], cellValue6, cellValue13, cellValue20],\r\n                    [\"\", dataView.table.rows[6][0], dataView.table.rows[6][1], cellValue7, cellValue14, cellValue21],\r\n                    [\"\", \"Total\", \"\", total1, total2, total3, \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, \"\"],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", LastRowClassName, LastRowClassName, LastRowClassName + NumericCellClassName, LastRowClassName + NumericCellClassName, LastRowClassName + NumericCellClassName],\r\n                    [\"\", FooterClassName, FooterClassName, FooterClassName + NumericCellClassName, FooterClassName + NumericCellClassName, FooterClassName + NumericCellClassName, \"\"]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"2x5 table (group instances and measure values) with totals, total value comes first\", (done) => {\r\n\r\n            let dataView = tableOneMeasureOneGroupSubtotals;\r\n            measureSource1.index = 0;\r\n            groupSource1.index = 1;\r\n\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], measureSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], measureSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], measureSource1);\r\n\r\n                let total: string = formatter(dataView.table.totals[0], measureSource1);\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", measureSource1.displayName, groupSource1.displayName, \"\"],\r\n                    [\"\", cellValue1, dataView.table.rows[0][1]],\r\n                    [\"\", cellValue2, dataView.table.rows[1][1]],\r\n                    [\"\", cellValue3, dataView.table.rows[2][1]],\r\n                    [\"\", total, \"\", \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, \"\"],\r\n                    [\"\", RowClassName + NumericCellClassName, RowClassName],\r\n                    [\"\", RowClassName + NumericCellClassName, RowClassName],\r\n                    [\"\", LastRowClassName + NumericCellClassName, LastRowClassName],\r\n                    [\"\", FooterClassName + NumericCellClassName, FooterClassName, \"\"]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"2x5 table (group instances and measure values) totals on then off\", (done) => {\r\n\r\n            let dataView = tableOneMeasureOneGroupSubtotals;\r\n            measureSource1.index = 0;\r\n            groupSource1.index = 1;\r\n\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], measureSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], measureSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], measureSource1);\r\n\r\n                let total: string = formatter(dataView.table.totals[0], measureSource1);\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", measureSource1.displayName, groupSource1.displayName, \"\"],\r\n                    [\"\", cellValue1, dataView.table.rows[0][1]],\r\n                    [\"\", cellValue2, dataView.table.rows[1][1]],\r\n                    [\"\", cellValue3, dataView.table.rows[2][1]],\r\n                    [\"\", total, \"\", \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                // Now update with totals off\r\n                let dataViewNoTotal = tableOneMeasureOneGroup;\r\n\r\n                v.onDataChanged({ dataViews: [dataViewNoTotal] });\r\n\r\n                setTimeout(() => {\r\n\r\n                    let expectedCellsNoTotal: string[][] = [\r\n                        [\"\", measureSource1.displayName, groupSource1.displayName, \"\"],\r\n                        [\"\", cellValue1, dataViewNoTotal.table.rows[0][1]],\r\n                        [\"\", cellValue2, dataViewNoTotal.table.rows[1][1]],\r\n                        [\"\", cellValue3, dataViewNoTotal.table.rows[2][1]]\r\n                    ];\r\n\r\n                    validateTable(expectedCellsNoTotal);\r\n\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x3 table (group instances with WebUrl)\", (done) => {\r\n            let dataView = tableWebUrl;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], groupSourceWebUrl);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], groupSourceWebUrl);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], groupSourceWebUrl);\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSourceWebUrl.displayName, \"\"],\r\n                    [\"\", cellValue1],\r\n                    [\"\", cellValue2],\r\n                    [\"\", cellValue3]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden, \"\"],\r\n                    [\"\", RowClassName],\r\n                    [\"\", RowClassName],\r\n                    [\"\", LastRowClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                let expectedChildTags: string[][] = [\r\n                    [undefined, undefined, undefined],\r\n                    [undefined, \"A\"],\r\n                    [undefined, undefined],\r\n                    [undefined, \"A\"]\r\n                ];\r\n\r\n                validateChildTag(expectedChildTags, $(\".bi-tablix tr\"));\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x3 table (group instances with Kpi)\", (done) => {\r\n            let dataView = tableKpi;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSourceKpiStatus.displayName, \"\"],\r\n                    [\"\", \"\"],\r\n                    [\"\", \"\"],\r\n                    [\"\", \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden, \"\"],\r\n                    [\"\", RowClassName],\r\n                    [\"\", RowClassName],\r\n                    [\"\", LastRowClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                let expectedChildTags: string[][] = [\r\n                    [undefined, undefined, undefined],\r\n                    [undefined, \".powervisuals-glyph.circle.kpi-red\"],\r\n                    [undefined, \".powervisuals-glyph.circle.kpi-yellow\"],\r\n                    [undefined, \".powervisuals-glyph.circle.kpi-green\"],\r\n                ];\r\n\r\n                validateChildTag(expectedChildTags, $(\".bi-tablix tr\"));\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x1 table loadMoreData\", (done) => {\r\n\r\n            let dataView: DataView = {\r\n                metadata: { columns: [groupSource1], segment: {} },\r\n                table: {\r\n                    columns: [groupSource1],\r\n                    rows: [\r\n                        [\"A\"],\r\n                        [\"B\"],\r\n                        [\"C\"]\r\n                    ]\r\n                }\r\n            };\r\n\r\n            v.onDataChanged({\r\n                dataViews: [dataView]\r\n            });\r\n\r\n            let segment2: DataView = {\r\n                metadata: { columns: [groupSource1] },\r\n                table: {\r\n                    columns: [groupSource1],\r\n                    rows: [\r\n                        [\"D\"],\r\n                        [\"E\"]\r\n                    ]\r\n                }\r\n            };\r\n\r\n            // Simulate a load more merge\r\n            powerbi.data.segmentation.DataViewMerger.mergeTables(dataView.table, segment2.table);\r\n            v.onDataChanged({\r\n                dataViews: [dataView],\r\n                operationKind: powerbi.VisualDataChangeOperationKind.Append\r\n            });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], groupSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], groupSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], groupSource1);\r\n                let cellValue4: string = formatter(dataView.table.rows[3][0], groupSource1);\r\n                let cellValue5: string = formatter(dataView.table.rows[4][0], groupSource1);\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, \"\"],\r\n                    [\"\", cellValue1],\r\n                    [\"\", cellValue2],\r\n                    [\"\", cellValue3],\r\n                    [\"\", cellValue4],\r\n                    [\"\", cellValue5]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"2x5 table reorder loadMoreData\", (done) => {\r\n\r\n            let dataView: DataView = {\r\n                metadata: { columns: [groupSource1, groupSource2], segment: {} },\r\n                table: {\r\n                    columns: [groupSource1, groupSource2],\r\n                    rows: [\r\n                        [\"A\", \"1\"],\r\n                        [\"B\", \"2\"],\r\n                        [\"C\", \"3\"]\r\n                    ]\r\n                }\r\n            };\r\n\r\n            v.onDataChanged({\r\n                dataViews: [dataView]\r\n            });\r\n\r\n            // Simulate column reordering\r\n            v.onDataChanged({ dataViews: [applyTransform(dataView)] });\r\n\r\n            let segment2: DataView = {\r\n                metadata: { columns: [groupSource1] },\r\n                table: {\r\n                    columns: [groupSource1],\r\n                    rows: [\r\n                        [\"D\", \"4\"],\r\n                        [\"E\", \"5\"]\r\n                    ]\r\n                }\r\n            };\r\n\r\n            // Simulate a load more merge\r\n            powerbi.data.segmentation.DataViewMerger.mergeTables(dataView.table, segment2.table);\r\n\r\n            v.onDataChanged({\r\n                dataViews: [applyTransform(dataView)],\r\n                operationKind: powerbi.VisualDataChangeOperationKind.Append\r\n            });\r\n\r\n            setTimeout(() => {\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource2.displayName, groupSource1.displayName, \"\"],\r\n                    [\"\", \"1\", \"A\"],\r\n                    [\"\", \"2\", \"B\"],\r\n                    [\"\", \"3\", \"C\"],\r\n                    [\"\", \"4\", \"D\"],\r\n                    [\"\", \"5\", \"E\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"header sort arrow down\", (done) => {\r\n\r\n            let dataView = tableOneMeasurSortDescending;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let expectedCells: string[] =\r\n                    ['powervisuals-glyph caret-down', 'powervisuals-glyph caret-up'];\r\n\r\n                validateSortIcons(expectedCells);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"header sort arrow up\", (done) => {\r\n\r\n            let dataView = tableOneMeasurSortAscending;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                let expectedCells: string[] =\r\n                    ['powervisuals-glyph caret-up', 'powervisuals-glyph caret-down'];\r\n\r\n                validateSortIcons(expectedCells);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"ensure table elements have tooltip\", (done) => {\r\n\r\n            let dataView = tableWithLongText;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                //Validate Column Headers title\r\n                tablixHelper.validateTableColumnHeaderTooltip(ColumnHeaderClassNameIconHidden, dataView);\r\n\r\n                //Validate Items Title\r\n                for (let i = 0; i < dataView.table.rows.length - 1; i++) {\r\n                    tablixHelper.validateTableRowTooltip(RowClassName, dataView, i);\r\n                }\r\n               \r\n                //Validate last row and title \r\n                tablixHelper.validateTableRowTooltip(LastRowClassName, dataView, dataView.table.rows.length - 1);\r\n\r\n                //Validate row footer tooltip\r\n                tablixHelper.validateTableRowFooterTooltip(FooterClassName, dataView, dataView.table.rows.length);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        function applyTransform(dataView: DataView): DataView {\r\n            let transforms: powerbi.data.DataViewTransformActions = {\r\n                selects: [\r\n                    {\r\n                        displayName: groupSource1.displayName,\r\n                        type: powerbi.ValueType.fromDescriptor({ text: true })\r\n                    }, {\r\n                        displayName: groupSource2.displayName,\r\n                        type: powerbi.ValueType.fromDescriptor({ text: true })\r\n                    }\r\n                ],\r\n                projectionOrdering: {\r\n                    Values: [1, 0]\r\n                }\r\n            };\r\n\r\n            let transformedDataView = powerbi.data.DataViewTransform.apply(\r\n                {\r\n                    prototype: dataView,\r\n                    objectDescriptors: null,\r\n                    transforms: transforms,\r\n                    dataViewMappings: powerbi.visuals.tableCapabilities.dataViewMappings,\r\n                    colorAllocatorFactory: powerbi.visuals.createColorAllocatorFactory(),\r\n                    dataRoles: powerbi.visuals.tableCapabilities.dataRoles,\r\n                })[0];\r\n\r\n            return transformedDataView;\r\n        }\r\n\r\n    });\r\n\r\n    function formatter(value: any, source: DataViewMetadataColumn): string {\r\n        return valueFormatter.formatValueColumn(value, source, TablixUtils.TablixFormatStringProp);\r\n    }\r\n\r\n    function validateChildTag(expectedChildTag: string[][], rows: JQuery): void {\r\n        let result: string[][] = [];\r\n\r\n        for (let i = 0, ilen = rows.length; i < ilen; i++) {\r\n            result[i] = [];\r\n            let cells = rows.eq(i).find(\"td\");\r\n            for (let j = 0, jlen = cells.length; j < jlen; j++) {\r\n                let childTag = expectedChildTag[i][j];\r\n                if (childTag) {\r\n                    let child = cells.eq(j).find(childTag);\r\n                    if (child.length > 0)\r\n                        result[i][j] = childTag;\r\n                    else\r\n                        result[i][j] = undefined;\r\n                }\r\n                else\r\n                    result[i][j] = undefined;\r\n            }\r\n        }\r\n\r\n        expect(result).toEqual(expectedChildTag);\r\n    }\r\n\r\n    describe(\"Dashboard table DOM validation\", () => {\r\n        let v: powerbi.IVisual,\r\n            element: JQuery,\r\n            ContainerClassName = 'bi-dashboard-tablix',\r\n            NoMarginClass = \"bi-tablix-cellNoMarginStyle\",\r\n            ColumnHeaderClassNameIconHidden = \"bi-table-column-header\",\r\n            RowClassName = \"bi-table-row\",\r\n            LastRowClassName = \"bi-table-last-row\",\r\n            FooterClassName = \"bi-table-footer\",\r\n            NumericCellClassName = \" bi-table-cell-numeric\",\r\n            EmptyHeaderCell = \"\\xa0\",\r\n            host = powerbitests.mocks.createVisualHostServices();\r\n\r\n        beforeEach(() => {\r\n\r\n            groupSource1.index = 0;\r\n            groupSource2.index = 1;\r\n            groupSource3.index = 2;\r\n            measureSource1.index = 3;\r\n            measureSource2.index = 4;\r\n            measureSource3.index = 5;\r\n        });\r\n\r\n        beforeEach(() => {\r\n            element = powerbitests.helpers.testDom(\"500\", \"500\");\r\n            element[\"visible\"] = () => { return false; };\r\n            v = dashboardPluginService.getPlugin(\"table\").create();\r\n            v.init({\r\n                element: element,\r\n                host: host,\r\n                style: powerbi.visuals.visualStyles.create(),\r\n                viewport: {\r\n                    height: element.height(),\r\n                    width: element.width()\r\n                },\r\n                animation: { transitionImmediate: true },\r\n                interactivity: {\r\n                    selection: null\r\n                }\r\n            });\r\n        });\r\n\r\n        function validateTable(expectedValues: string[][]): void {\r\n            tablixHelper.validateTable(expectedValues, \".bi-dashboard-tablix tr\");\r\n        }\r\n\r\n        function validateClassNames(expectedValues: string[][]): void {\r\n            tablixHelper.validateClassNames(expectedValues, \".bi-dashboard-tablix tr\", NoMarginClass);\r\n        }\r\n\r\n        describe('text size', () => {\r\n            describe('default', () => {\r\n                it('font size set on container', (done) => {\r\n                    let newMeasureSource2: DataViewMetadataColumn = {\r\n                        displayName: \"measure2\",\r\n                        queryName: \"measure2\",\r\n                        type: dataTypeNumber,\r\n                        isMeasure: true,\r\n                        index: 4,\r\n                        objects: {\r\n                            general: {\r\n                                formatString: \"#.00\",\r\n                                columnWidth: 45,\r\n                            },\r\n                        },\r\n                    };\r\n\r\n                    // AutoSize property off\r\n                    v.onDataChanged({\r\n                        dataViews: [{\r\n                            metadata: {\r\n                                columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                                objects: {\r\n                                    general: {\r\n                                        totals: true,\r\n                                        autoSizeColumnWidth: false,\r\n                                    }\r\n                                }\r\n                            },\r\n                            table: dataViewTableThreeMeasures\r\n                        }]\r\n                    });\r\n                    setTimeout(() => {\r\n                        let actualFontSize = element.find(`.${ContainerClassName}`).css('font-size');\r\n                        tablixHelper.validateFontSize(actualFontSize, 8);\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n\r\n                it(\"2x8 table with default text size row height\", (done) => {\r\n                    let dataView = tableTwoGroups;\r\n                    v.onDataChanged({ dataViews: [dataView] });\r\n\r\n                    setTimeout(() => {\r\n                        let cells = element\r\n                            .find(`.${RowClassName}, .${ColumnHeaderClassNameIconHidden}, .${LastRowClassName}`)\r\n                            .find('> div');\r\n\r\n                        expect(cells.length).toBe(16);\r\n                        tablixHelper.validateCellHeights(cells, 14);\r\n\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n            });\r\n\r\n            describe('specified', () => {\r\n                it('font size set on container', (done) => {\r\n                    let newMeasureSource2: DataViewMetadataColumn = {\r\n                        displayName: \"measure2\",\r\n                        queryName: \"measure2\",\r\n                        type: dataTypeNumber,\r\n                        isMeasure: true,\r\n                        index: 4,\r\n                        objects: {\r\n                            general: {\r\n                                formatString: \"#.00\",\r\n                                columnWidth: 45,\r\n                            },\r\n                        },\r\n                    };\r\n\r\n                    // AutoSize property off\r\n                    v.onDataChanged({\r\n                        dataViews: [{\r\n                            metadata: {\r\n                                columns: [measureSource1, newMeasureSource2, measureSource3],\r\n                                objects: {\r\n                                    general: {\r\n                                        totals: true,\r\n                                        autoSizeColumnWidth: false,\r\n                                        textSize: 18,\r\n                                    }\r\n                                }\r\n                            },\r\n                            table: dataViewTableThreeMeasures,\r\n                        }]\r\n                    });\r\n                    setTimeout(() => {\r\n                        let actualFontSize = element.find(`.${ContainerClassName}`).css('font-size');\r\n                        tablixHelper.validateFontSize(actualFontSize, 18);\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n\r\n                it(\"2x8 table with specified text size adjusted row height\", (done) => {\r\n                    let dataView = tableTwoGroupsIncreasedFontSize;\r\n                    v.onDataChanged({ dataViews: [dataView] });\r\n\r\n                    setTimeout(() => {\r\n                        let cells = element\r\n                            .find(`.${RowClassName}, .${ColumnHeaderClassNameIconHidden}, .${LastRowClassName}`)\r\n                            .find('> div');\r\n\r\n                        expect(cells.length).toBe(16);\r\n                        tablixHelper.validateCellHeights(cells, 21);\r\n\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n\r\n                it(\"5x9 table with text size scaling factor adjusts minimum column width\", (done) => {\r\n                    let dataView = tableTwoGroupsThreeMeasuresIncreasedFontSize;\r\n                    measureSource1.index = 2;\r\n                    measureSource2.index = 3;\r\n                    measureSource3.index = 4;\r\n\r\n                    v.onDataChanged({ dataViews: [dataView] });\r\n\r\n                    setTimeout(() => {\r\n                        // Dashboard crops out columns which do not fit (minimum width based on text size)\r\n                        let cellValue1: string = formatter(dataView.table.rows[0][2], measureSource1);\r\n                        let cellValue2: string = formatter(dataView.table.rows[1][2], measureSource1);\r\n                        let cellValue3: string = formatter(dataView.table.rows[2][2], measureSource1);\r\n                        let cellValue4: string = formatter(dataView.table.rows[3][2], measureSource1);\r\n                        let cellValue5: string = formatter(dataView.table.rows[4][2], measureSource1);\r\n                        let cellValue6: string = formatter(dataView.table.rows[5][2], measureSource1);\r\n                        let cellValue7: string = formatter(dataView.table.rows[6][2], measureSource1);\r\n                        let cellValue8: string = formatter(dataView.table.rows[0][3], measureSource2);\r\n                        let cellValue9: string = formatter(dataView.table.rows[1][3], measureSource2);\r\n                        let cellValue10: string = formatter(dataView.table.rows[2][3], measureSource2);\r\n                        let cellValue11: string = formatter(dataView.table.rows[3][3], measureSource2);\r\n                        let cellValue12: string = formatter(dataView.table.rows[4][3], measureSource2);\r\n                        let cellValue13: string = formatter(dataView.table.rows[5][3], measureSource2);\r\n                        let cellValue14: string = formatter(dataView.table.rows[6][3], measureSource2);\r\n\r\n                        let total1: string = formatter(dataView.table.totals[2], measureSource1);\r\n                        let total2: string = formatter(dataView.table.totals[3], measureSource2);\r\n\r\n                        let expectedCells: string[][] = [\r\n                            [\"\", groupSource1.displayName, groupSource2.displayName, measureSource1.displayName, measureSource2.displayName],\r\n                            [\"\", dataView.table.rows[0][0], dataView.table.rows[0][1], cellValue1, cellValue8],\r\n                            [\"\", dataView.table.rows[1][0], dataView.table.rows[1][1], cellValue2, cellValue9],\r\n                            [\"\", dataView.table.rows[2][0], dataView.table.rows[2][1], cellValue3, cellValue10],\r\n                            [\"\", dataView.table.rows[3][0], dataView.table.rows[3][1], cellValue4, cellValue11],\r\n                            [\"\", dataView.table.rows[4][0], dataView.table.rows[4][1], cellValue5, cellValue12],\r\n                            [\"\", dataView.table.rows[5][0], dataView.table.rows[5][1], cellValue6, cellValue13],\r\n                            [\"\", dataView.table.rows[6][0], dataView.table.rows[6][1], cellValue7, cellValue14],\r\n                            [\"\", \"Total\", \"\", total1, total2],\r\n                        ];\r\n\r\n                        validateTable(expectedCells);\r\n\r\n                        let expectedClassNames: string[][] = [\r\n                            [\"\", ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                            [\"\", LastRowClassName, LastRowClassName, LastRowClassName + NumericCellClassName, LastRowClassName + NumericCellClassName],\r\n                            [\"\", FooterClassName, FooterClassName, FooterClassName + NumericCellClassName, FooterClassName + NumericCellClassName],\r\n                        ];\r\n\r\n                        validateClassNames(expectedClassNames);\r\n\r\n                        done();\r\n                    }, DefaultWaitForRender);\r\n                });\r\n            });\r\n        });\r\n\r\n        it(\"1x2 table (one measure)\", (done) => {\r\n            v.onDataChanged({ dataViews: [tableOneMeasure] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue: string = formatter(tableOneMeasure.table.rows[0][0], measureSource1);\r\n                let expectedCells: string[][] = [\r\n                    [\"\", measureSource1.displayName],\r\n                    [\"\", cellValue]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden],\r\n                    [\"\", LastRowClassName + NumericCellClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x2 table (one group null)\", (done) => {\r\n            v.onDataChanged({ dataViews: [tableOneGroupNulls] });\r\n\r\n            setTimeout(() => {\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName],\r\n                    [EmptyHeaderCell, \"\"],\r\n                    [EmptyHeaderCell, \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"3x5 table (2 groups 1 measure nulls)\", (done) => {\r\n            v.onDataChanged({ dataViews: [tableTwoGroups1MeasureNulls] });\r\n\r\n            setTimeout(() => {\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, groupSource2.displayName, measureSource1.displayName],\r\n                    [\"\", \"A\", \"a1\", \"100.0\"],\r\n                    [\"\", \"\", \"\", \"103.0\"],\r\n                    [\"\", \"\", \"a3\", \"106.0\"],\r\n                    [\"\", \"B\", \"\", \"112.0\"],\r\n                    [EmptyHeaderCell, \"\", \"\", \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x3 table (group instances)\", (done) => {\r\n\r\n            let dataView = tableOneGroup;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], groupSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], groupSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], groupSource1);\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName],\r\n                    [\"\", cellValue1],\r\n                    [\"\", cellValue2],\r\n                    [\"\", cellValue3]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden],\r\n                    [\"\", RowClassName],\r\n                    [\"\", RowClassName],\r\n                    [\"\", LastRowClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"2x8 table (group instances)\", (done) => {\r\n\r\n            let dataView = tableTwoGroups;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], groupSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], groupSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], groupSource1);\r\n                let cellValue4: string = formatter(dataView.table.rows[3][0], groupSource1);\r\n                let cellValue5: string = formatter(dataView.table.rows[4][0], groupSource1);\r\n                let cellValue6: string = formatter(dataView.table.rows[5][0], groupSource1);\r\n                let cellValue7: string = formatter(dataView.table.rows[6][0], groupSource1);\r\n                let cellValue8: string = formatter(dataView.table.rows[0][1], groupSource2);\r\n                let cellValue9: string = formatter(dataView.table.rows[1][1], groupSource2);\r\n                let cellValue10: string = formatter(dataView.table.rows[2][1], groupSource2);\r\n                let cellValue11: string = formatter(dataView.table.rows[3][1], groupSource2);\r\n                let cellValue12: string = formatter(dataView.table.rows[4][1], groupSource2);\r\n                let cellValue13: string = formatter(dataView.table.rows[5][1], groupSource2);\r\n                let cellValue14: string = formatter(dataView.table.rows[6][1], groupSource2);\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, groupSource2.displayName],\r\n                    [\"\", cellValue1, cellValue8],\r\n                    [\"\", cellValue2, cellValue9],\r\n                    [\"\", cellValue3, cellValue10],\r\n                    [\"\", cellValue4, cellValue11],\r\n                    [\"\", cellValue5, cellValue12],\r\n                    [\"\", cellValue6, cellValue13],\r\n                    [\"\", cellValue7, cellValue14]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"5x9 table (group instances and measure values) with totals\", (done) => {\r\n\r\n            let dataView = tableTwoGroupsThreeMeasures;\r\n            measureSource1.index = 2;\r\n            measureSource2.index = 3;\r\n            measureSource3.index = 4;\r\n\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][2], measureSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][2], measureSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][2], measureSource1);\r\n                let cellValue4: string = formatter(dataView.table.rows[3][2], measureSource1);\r\n                let cellValue5: string = formatter(dataView.table.rows[4][2], measureSource1);\r\n                let cellValue6: string = formatter(dataView.table.rows[5][2], measureSource1);\r\n                let cellValue7: string = formatter(dataView.table.rows[6][2], measureSource1);\r\n                let cellValue8: string = formatter(dataView.table.rows[0][3], measureSource2);\r\n                let cellValue9: string = formatter(dataView.table.rows[1][3], measureSource2);\r\n                let cellValue10: string = formatter(dataView.table.rows[2][3], measureSource2);\r\n                let cellValue11: string = formatter(dataView.table.rows[3][3], measureSource2);\r\n                let cellValue12: string = formatter(dataView.table.rows[4][3], measureSource2);\r\n                let cellValue13: string = formatter(dataView.table.rows[5][3], measureSource2);\r\n                let cellValue14: string = formatter(dataView.table.rows[6][3], measureSource2);\r\n                let cellValue15: string = formatter(dataView.table.rows[0][4], measureSource3);\r\n                let cellValue16: string = formatter(dataView.table.rows[1][4], measureSource3);\r\n                let cellValue17: string = formatter(dataView.table.rows[2][4], measureSource3);\r\n                let cellValue18: string = formatter(dataView.table.rows[3][4], measureSource3);\r\n                let cellValue19: string = formatter(dataView.table.rows[4][4], measureSource3);\r\n                let cellValue20: string = formatter(dataView.table.rows[5][4], measureSource3);\r\n                let cellValue21: string = formatter(dataView.table.rows[6][4], measureSource3);\r\n\r\n                let total1: string = formatter(dataView.table.totals[2], measureSource1);\r\n                let total2: string = formatter(dataView.table.totals[3], measureSource2);\r\n                let total3: string = formatter(dataView.table.totals[4], measureSource3);\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSource1.displayName, groupSource2.displayName, measureSource1.displayName, measureSource2.displayName, measureSource3.displayName],\r\n                    [\"\", dataView.table.rows[0][0], dataView.table.rows[0][1], cellValue1, cellValue8, cellValue15],\r\n                    [\"\", dataView.table.rows[1][0], dataView.table.rows[1][1], cellValue2, cellValue9, cellValue16],\r\n                    [\"\", dataView.table.rows[2][0], dataView.table.rows[2][1], cellValue3, cellValue10, cellValue17],\r\n                    [\"\", dataView.table.rows[3][0], dataView.table.rows[3][1], cellValue4, cellValue11, cellValue18],\r\n                    [\"\", dataView.table.rows[4][0], dataView.table.rows[4][1], cellValue5, cellValue12, cellValue19],\r\n                    [\"\", dataView.table.rows[5][0], dataView.table.rows[5][1], cellValue6, cellValue13, cellValue20],\r\n                    [\"\", dataView.table.rows[6][0], dataView.table.rows[6][1], cellValue7, cellValue14, cellValue21],\r\n                    [\"\", \"Total\", \"\", total1, total2, total3]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", RowClassName, RowClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName, RowClassName + NumericCellClassName],\r\n                    [\"\", LastRowClassName, LastRowClassName, LastRowClassName + NumericCellClassName, LastRowClassName + NumericCellClassName, LastRowClassName + NumericCellClassName],\r\n                    [\"\", FooterClassName, FooterClassName, FooterClassName + NumericCellClassName, FooterClassName + NumericCellClassName, FooterClassName + NumericCellClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"2x5 table (group instances and measure values) with totals, total value comes first\", (done) => {\r\n\r\n            let dataView = tableOneMeasureOneGroupSubtotals;\r\n            measureSource1.index = 0;\r\n            groupSource1.index = 1;\r\n\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], measureSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], measureSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], measureSource1);\r\n\r\n                let total: string = formatter(dataView.table.totals[0], measureSource1);\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", measureSource1.displayName, groupSource1.displayName],\r\n                    [\"\", cellValue1, dataView.table.rows[0][1]],\r\n                    [\"\", cellValue2, dataView.table.rows[1][1]],\r\n                    [\"\", cellValue3, dataView.table.rows[2][1]],\r\n                    [\"\", total, \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden, ColumnHeaderClassNameIconHidden],\r\n                    [\"\", RowClassName + NumericCellClassName, RowClassName],\r\n                    [\"\", RowClassName + NumericCellClassName, RowClassName],\r\n                    [\"\", LastRowClassName + NumericCellClassName, LastRowClassName],\r\n                    [\"\", FooterClassName + NumericCellClassName, FooterClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"2x5 table (group instances and measure values) totals on then off\", (done) => {\r\n\r\n            let dataView = tableOneMeasureOneGroupSubtotals;\r\n            measureSource1.index = 0;\r\n            groupSource1.index = 1;\r\n\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], measureSource1);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], measureSource1);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], measureSource1);\r\n\r\n                let total: string = formatter(dataView.table.totals[0], measureSource1);\r\n\r\n                let expectedCells: string[][] = [\r\n                    [\"\", measureSource1.displayName, groupSource1.displayName],\r\n                    [\"\", cellValue1, dataView.table.rows[0][1]],\r\n                    [\"\", cellValue2, dataView.table.rows[1][1]],\r\n                    [\"\", cellValue3, dataView.table.rows[2][1]],\r\n                    [\"\", total, \"\"]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                // Now update with totals off\r\n                let dataViewNoTotal = tableOneMeasureOneGroup;\r\n\r\n                v.onDataChanged({ dataViews: [dataViewNoTotal] });\r\n\r\n                setTimeout(() => {\r\n\r\n                    let expectedCellsNoTotal: string[][] = [\r\n                        [\"\", measureSource1.displayName, groupSource1.displayName],\r\n                        [\"\", cellValue1, dataViewNoTotal.table.rows[0][1]],\r\n                        [\"\", cellValue2, dataViewNoTotal.table.rows[1][1]],\r\n                        [\"\", cellValue3, dataViewNoTotal.table.rows[2][1]]\r\n                    ];\r\n\r\n                    validateTable(expectedCellsNoTotal);\r\n\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"1x3 table (group instances with WebUrl)\", (done) => {\r\n            let dataView = tableWebUrl;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n\r\n                let cellValue1: string = formatter(dataView.table.rows[0][0], groupSourceWebUrl);\r\n                let cellValue2: string = formatter(dataView.table.rows[1][0], groupSourceWebUrl);\r\n                let cellValue3: string = formatter(dataView.table.rows[2][0], groupSourceWebUrl);\r\n                let expectedCells: string[][] = [\r\n                    [\"\", groupSourceWebUrl.displayName],\r\n                    [\"\", cellValue1],\r\n                    [\"\", cellValue2],\r\n                    [\"\", cellValue3]\r\n                ];\r\n\r\n                validateTable(expectedCells);\r\n\r\n                let expectedClassNames: string[][] = [\r\n                    [\"\", ColumnHeaderClassNameIconHidden],\r\n                    [\"\", RowClassName],\r\n                    [\"\", RowClassName],\r\n                    [\"\", LastRowClassName]\r\n                ];\r\n\r\n                validateClassNames(expectedClassNames);\r\n\r\n                let expectedChildTags: string[][] = [\r\n                    [undefined, undefined],\r\n                    [undefined, \"A\"],\r\n                    [undefined, undefined],\r\n                    [undefined, \"A\"]\r\n                ];\r\n\r\n                validateChildTag(expectedChildTags, $(\".bi-dashboard-tablix tr\"));\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"dashboard table has no sort icons\", (done) => {\r\n            let dataView = tableOneMeasurSortAscending;\r\n            v.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let sortIcons = element.find(\".caret-down, .caret-up\");\r\n                expect(sortIcons.length).toEqual(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"Table sort validation\", () => {\r\n        let element: JQuery;\r\n\r\n        beforeEach((done) => {\r\n            element = powerbitests.helpers.testDom(\"800\", \"800\");\r\n            element[\"visible\"] = () => { return true; };\r\n            done();\r\n        });\r\n\r\n        it(\"table with single measure\", (done) => {\r\n            // Clicking on the measure will result in a sort event\r\n            let data: DataView = tableOneMeasure;\r\n            let expectedColumnHeaders = [{ row: 0, col: 1, expectedText: \"measure1\" }];\r\n            let clicks = [{ row: 0, col: 1 }, { row: 1, col: 1 }];\r\n            let expectedSorts = [\r\n                [{ queryName: \"measure1\", sortDirection: powerbi.SortDirection.Descending }]\r\n            ];\r\n            tablixHelper.runTablixSortTest(element, done, \"table\", data, expectedColumnHeaders, clicks, expectedSorts);\r\n        });\r\n\r\n        it(\"table with single group\", (done) => {\r\n            // Clicking on the group header multiple times will result in multiple sort events.\r\n            // Clicking on non-header cells will not result in sort events.\r\n            let data: DataView = tableOneGroup;\r\n            let expectedColumnHeaders = [{ row: 0, col: 1, expectedText: \"group1\" }];\r\n            let clicks = [{ row: 0, col: 1 }, { row: 1, col: 1 }, { row: 2, col: 1 }, { row: 0, col: 1 }];\r\n            let expectedSorts = [\r\n                [{ queryName: \"group1\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"group1\", sortDirection: powerbi.SortDirection.Descending }]\r\n            ];\r\n            tablixHelper.runTablixSortTest(element, done, \"table\", data, expectedColumnHeaders, clicks, expectedSorts);\r\n        });\r\n\r\n        it(\"table with two groups\", (done) => {\r\n            // Clicking on different group headers multiple times results in a sort event for each click\r\n            let data: DataView = tableTwoGroups;\r\n            let expectedColumnHeaders = [{ row: 0, col: 1, expectedText: \"group1\" }, { row: 0, col: 2, expectedText: \"group2\" }];\r\n            let clicks = [{ row: 0, col: 1 }, { row: 0, col: 2 }, { row: 0, col: 1 }, { row: 0, col: 2 }];\r\n            let expectedSorts = [\r\n                [{ queryName: \"group1\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"group2\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"group1\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"group2\", sortDirection: powerbi.SortDirection.Descending }]\r\n            ];\r\n            tablixHelper.runTablixSortTest(element, done, \"table\", data, expectedColumnHeaders, clicks, expectedSorts);\r\n        });\r\n\r\n        it(\"table with two groups and three measures\", (done) => {\r\n            // Clicking on different group headers multiple times results in a sort event for each click\r\n            let data: DataView = tableTwoGroupsThreeMeasures;\r\n            let expectedColumnHeaders = [{ row: 0, col: 1, expectedText: \"group1\" }, { row: 0, col: 2, expectedText: \"group2\" }, { row: 0, col: 3, expectedText: \"measure1\" }, { row: 0, col: 4, expectedText: \"measure2\" }, { row: 0, col: 5, expectedText: \"measure3\" }];\r\n            let clicks = [{ row: 0, col: 5 }, { row: 0, col: 2 }, { row: 0, col: 4 }, { row: 0, col: 1 }, { row: 0, col: 3 }, { row: 0, col: 1 }, { row: 0, col: 5 }];\r\n            let expectedSorts = [\r\n                [{ queryName: \"measure3\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"group2\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"measure2\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"group1\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"measure1\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"group1\", sortDirection: powerbi.SortDirection.Descending }], [{ queryName: \"measure3\", sortDirection: powerbi.SortDirection.Descending }]\r\n            ];\r\n            tablixHelper.runTablixSortTest(element, done, \"table\", data, expectedColumnHeaders, clicks, expectedSorts);\r\n        });\r\n    });\r\n}\r\n"],"sourceRoot":"/source/"}