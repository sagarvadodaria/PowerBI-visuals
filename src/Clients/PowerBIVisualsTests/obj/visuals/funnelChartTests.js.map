{"version":3,"sources":["visuals/funnelChartTests.ts"],"names":["powerbitests","powerbitests.getOptionsForValues","powerbitests.FunnelChartHelpers","powerbitests.FunnelChartHelpers.validatePercentValues","powerbitests.FunnelChartHelpers.validatePercentBarComponents","powerbitests.FunnelChartHelpers.validatePercentBars","powerbitests.FunnelChartHelpers.validateDataLabels","powerbitests.FunnelChartHelpers.testCategoryLabels","powerbitests.FunnelChartHelpers.testLabelsFontSize"],"mappings":"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CAACA,CAACA;YAEnFA,oBAAOA,CAACA,iBAAiBA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,SAASA,CAACA,CAACA;YACjEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;YACxDA,oBAAOA,CAACA,iBAAiBA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,SAASA,CAACA,CAACA;YACjEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;YACxDA,oBAAOA,CAACA,iBAAiBA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,EAAEA,SAASA,CAACA,CAACA;YACjEA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,SAASA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;QAC5DA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,gCAAgCA,EAAEA;YACjCA,IAAIA,iBAAiBA,GAAUA;gBAC3BA,WAAWA;gBACXA,aAAaA;gBACbA,aAAaA;aAChBA,CAACA;YAEFA,eAAeA,CAACA,WAAWA,CAACA,0BAA0BA,CAACA,CAACA;YACxDA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,0BAA0BA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBAChDA,SAASA,CAACA,iBAAiBA,CAACA;iBAC5BA,WAAWA,CAACA,iBAAiBA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBAC1CA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,iBAAiBA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;iBACtCA,aAAaA,EAAEA,CAACA;YAErBA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AC1EA,eAAeA;iBACVA,WAAWA,CAACA,2BAA2BA,CAACA;iBACxCA,aAAaA,CAACA,EAAEA,CAACA,CAACA;YAEvBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACjBA,SAASA,CAACA,2BAA2BA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACjDA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBAChBA,aAAaA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;iBACnBA,WAAWA,CAACA,GAAGA,CAACA;iBAChBA,aAAaA,EAAEA;iBACfA,eAAeA,EAAEA;iBACjBA,SAASA,CAACA,2BAA2BA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACjDA,SAASA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBACjBA,aAAaA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBACpBA,WAAWA,CAACA,CAACA,GAAGA,CAACA;iBACjBA,aAAaA,EAAEA;iBACfA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,IAAIA,UAAUA,GAAGA,WAAWA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,YAAYA,CAACA,CAACA;YAEvEA,gCAAgCA;YAChCA,MAAMA,CAACA,UAAUA,CAACA,iBAAiBA,CAACA,CAACA,UAAUA,EAAEA,CAACA;YAClDA,MAAMA,CAACA,UAAUA,CAACA,oBAAoBA,CAACA,CAACA,SAASA,EAAEA,CAACA;YAEpDA,6BAA6BA;YAC7BA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACpDA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,sBAAsBA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC7DA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC3CA,MAAMA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,aAAaA,CAACA,CAACA,IAAIA,CAACA,CAACA,GAAGA,CAACA,CAACA;QAC1DA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,oEAAoEA,EAAEA;YACrEA,eAAeA;iBACVA,WAAWA,CAACA,2BAA2BA,CAACA;iBACxCA,aAAaA,CAACA,EAAEA,CAACA,CAACA;YAEvBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACjBA,SAASA,CAACA,2BAA2BA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACjDA,SAASA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBACjBA,aAAaA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;iBACnBA,WAAWA,CAACA,CAACA,GAAGA,CAACA;iBACjBA,aAAaA,EAAEA;iBACfA,eAAeA,EAAEA;iBACjBA,SAASA,CAACA,2BAA2BA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACjDA,SAASA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBACjBA,aAAaA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBACrBA,WAAWA,CAACA,CAACA,GAAGA,CAACA;iBACjBA,aAAaA,EAAEA;iBACfA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,IAAIA,UAAUA,GAAGA,WAAWA,CAACA,SAASA,CAACA,QAAQA,EAAEA,MAAMA,EAAEA,YAAYA,CAACA,CAACA;YAEvEA,gCAAgCA;YAChCA,MAAMA,CAACA,UAAUA,CAACA,iBAAiBA,CAACA,CAACA,SAASA,EAAEA,CAACA;YACjDA,MAAMA,CAACA,UAAUA,CAACA,oBAAoBA,CAACA,CAACA,UAAUA,EAAEA,CAACA;YAErDA,6BAA6BA;YAC7BA,MAAMA,CAACA,UAAUA,CAACA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,CAACA,gBAAgBA,EAAEA,CAACA;gBACtCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,CAACA;gBACvEA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2CAA2CA,EAAEA,UAACA,IAAIA;YACjDA,IAAIA,UAAUA,GAAQA,OAAOA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;YACnDA,aAAaA,CAACA,IAAIA,CAACA,WAAWA,GAAGA,UAAUA,CAACA;YAE5CA,IAAIA,OAAOA,GAA6BA,mBAAmBA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,MAAMA,CAACA,iBAAiBA,CAACA,CAACA,CAACA;YAClGA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA;YAE5CA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,UAAUA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBACtCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,4BAA4BA,CAACA,CAACA;gBAClFA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,2CAA2CA,EAAEA,UAACA,IAAIA;YACjDA,IAAIA,UAAUA,GAAQA,OAAOA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;YACnDA,aAAaA,CAACA,IAAIA,CAACA,WAAWA,GAAGA,UAAUA,CAACA;YAE5CA,IAAIA,OAAOA,GAA6BA,mBAAmBA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,MAAMA,CAACA,iBAAiBA,CAACA,CAACA,CAACA;YAClGA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA;YAE5CA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,UAAUA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBACtCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,4BAA4BA,CAACA,CAACA;gBAClFA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,4CAA4CA,EAAEA,UAACA,IAAIA;YAClDA,IAAIA,UAAUA,GAAQA,OAAOA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;YACnDA,aAAaA,CAACA,IAAIA,CAACA,WAAWA,GAAGA,UAAUA,CAACA;YAE5CA,IAAIA,OAAOA,GAA6BA,mBAAmBA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,KAAKA,CAACA,CAACA,CAACA;YAC/EA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA;YAE5CA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,UAAUA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBACtCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,kBAAkBA,CAACA,CAACA;gBACxEA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,wCAAwCA,EAAEA,UAACA,IAAIA;YAC9CA,IAAIA,UAAUA,GAAQA,OAAOA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;YACnDA,aAAaA,CAACA,IAAIA,CAACA,WAAWA,GAAGA,UAAUA,CAACA;YAE5CA,IAAIA,OAAOA,GAAGA,mBAAmBA,CAACA,CAACA,GAAGA,EAAEA,CAACA,GAAGA,EAAEA,KAAKA,CAACA,CAACA,CAACA;YACtDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA;YAE5CA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,UAAUA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBACtCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,4BAA4BA,CAACA,CAACA;gBAClFA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,iDAAiDA,EAAEA,UAACA,IAAIA;YACvDA,IAAIA,UAAUA,GAAQA,OAAOA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;YACnDA,aAAaA,CAACA,IAAIA,CAACA,WAAWA,GAAGA,UAAUA,CAACA;YAE5CA,IAAIA,OAAOA,GAAGA,mBAAmBA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,GAAGA,EAAEA,CAACA,KAAKA,CAACA,CAACA,CAACA;YACxDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA;YAE5CA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,UAAUA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;gBACtCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzCA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA,+BAA+BA,CAACA,CAACA;gBACrFA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,0CAA0CA,EAAEA,UAACA,IAAIA;YAChDA,IAAIA,UAAUA,GAAQA,OAAOA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;YACnDA,aAAaA,CAACA,IAAIA,CAACA,WAAWA,GAAGA,UAAUA,CAACA;YAE5CA,IAAIA,OAAOA,GAA6BA,mBAAmBA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA,CAACA;YAC7EA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA;YAE5CA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,UAAUA,CAACA,CAACA,oBAAoBA,CAACA,EAAEA,CAACA,CAACA;gBAC5CA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,8BAA8BA,EAAEA,UAACA,IAAIA;YACpCA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,0BAA0BA,CAACA,CAACA;YAE/DA,UAAUA,CAACA;gBACPA,IAAIA,IAAIA,GAAWA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAEjEA,KAAKA,CAACA,aAAaA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAElDA,IAAIA,CAACA,KAAKA,EAAGA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAElCA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAEtDA,MAAMA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CACpDA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;yBACxFA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA;gCACLA,SAASA,EAAEA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;6BAC3FA;yBACJA;qBACJA;iBACJA,CAACA,CAACA;gBACPA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6CAA6CA,EAAEA,UAACA,IAAIA;YACnDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,iCAAiCA,CAACA,CAACA;YAEtEA,UAAUA,CAACA;gBACPA,IAAIA,IAAIA,GAAWA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACjEA,IAAIA,WAAWA,GAAWA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,MAAMA,CAACA,WAAWA,CAACA,QAAQA,CAACA,CAACA;gBAE/EA,KAAKA,CAACA,aAAaA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAElDA,WAAWA,CAACA,KAAKA,EAAGA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAEzCA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAEtDA,MAAMA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CACpDA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;yBACxFA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA;gCACLA,SAASA,EAAEA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;6BAC3FA;yBACJA;qBACJA;iBACJA,CAACA,CAACA;gBACPA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,oCAAoCA,EAAEA,UAACA,IAAIA;YAC1CA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,0BAA0BA,CAACA,CAACA;YAC/DA,UAAUA,CAACA;gBACPA,IAAIA,IAAIA,GAAWA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAEjEA,KAAKA,CAACA,aAAaA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAElDA,IAAIA,CAACA,KAAKA,EAAGA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAElCA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CACpDA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;yBACxFA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA;gCACLA,SAASA,EAAEA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;6BAC3FA;yBACJA;qBACJA;iBACJA,CAACA,CAACA;gBAEDA,IAAIA,CAACA,IAAIA,EAAGA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,EAAEA,SAASA,CAACA,OAAOA,CAACA,CAACA;gBAEpDA,yDAAyDA;gBACzDA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CACpDA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;yBACxFA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA;gCACLA,SAASA,EAAEA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;6BAC3FA;yBACJA;qBACJA;iBACJA,CAACA,CAACA;gBAEPA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6BAA6BA,EAAEA,UAACA,IAAIA;YACnCA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,0BAA0BA,CAACA,CAACA;YAE/DA,UAAUA,CAACA;gBACPA,IAAIA,IAAIA,GAAWA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAEjEA,KAAKA,CAACA,aAAaA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAElDA,IAAIA,CAACA,KAAKA,EAAGA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAElCA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBAEtDA,MAAMA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CACpDA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;yBACxFA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA;gCACLA,SAASA,EAAEA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;6BAC3FA;yBACJA;qBACJA;iBACJA,CAACA,CAACA;gBAEPA,aAAaA,CAACA,MAAMA,CAACA,gBAAgBA,EAAEA,CAACA;gBAExCA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBAEvDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,0CAA0CA,EAAEA,UAACA,IAAIA;YAChDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,0BAA0BA,CAACA,CAACA;YAE/DA,UAAUA,CAACA;gBACPA,IAAIA,IAAIA,GAAWA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAEjEA,KAAKA,CAACA,aAAaA,CAACA,IAAIA,EAAEA,UAAUA,CAACA,CAACA,GAAGA,CAACA,WAAWA,EAAEA,CAACA;gBAElDA,IAAIA,CAACA,KAAKA,EAAGA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAElCA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CACpDA;oBACIA,IAAIA,EAAEA;wBACFA;4BACIA,IAAIA,EAAEA,CAACA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;yBACxFA;qBACJA;oBACDA,KAAKA,EAAEA;wBACHA;4BACIA,OAAOA,EAAEA;gCACLA,SAASA,EAAEA,0BAA0BA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;6BAC3FA;yBACJA;qBACJA;iBACJA,CAACA,CAACA;gBAEPA,IAAIA,YAAYA,GAAWA,CAACA,CAACA,eAAeA,CAACA,CAACA;gBACxCA,YAAYA,CAACA,KAAKA,EAAGA,CAACA,OAAOA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBAE1CA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,aAAaA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,oBAAoBA,CACpDA;oBACIA,IAAIA,EAAEA,EAAEA;iBACXA,CAACA,CAACA;gBAEPA,IAAIA,EAAEA,CAACA;YACXA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;IACPA,CAACA,CAACA,CAACA;IAEHA,QAAQA,CAACA,4BAA4BA,EAAEA;QACnCA,IAAIA,eAAgCA,CAACA;QAErCA,IAAIA,aAA4BA,CAACA;QAEjCA,IAAIA,SAASA,GAAWA,EAAEA,CAACA;QAC3BA,IAAIA,gBAAgBA,GAAqBA;YACrCA,OAAOA,EAAEA;gBACLA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,SAASA,EAAEA;gBAC7CA,EAAEA,WAAWA,EAAEA,MAAMA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,SAASA,EAAEA,IAAIA,EAAEA,KAAKA,EAAEA,EAAEA,GAAGA,EAAEA,IAAIA,EAAEA,EAAEA,OAAOA,EAAEA,EAAEA,OAAOA,EAAEA,EAAEA,YAAYA,EAAEA,IAAIA,EAAEA,EAAEA,EAAEA;aACrIA;YACDA,OAAOA,EAAEA;gBACLA,MAAMA,EAAEA,EAAEA,IAAIA,EAAEA,IAAIA,EAAEA,cAAcA,EAAEA,CAACA,EAAEA;aAC5CA;SACJA,CAACA;QACFA,IAAIA,iBAAiBA,GAAWA,aAAaA,CAACA,QAAQA,CAACA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,MAAMA,EAAEA,MAAMA,EAAEA,CAACA,CAACA;QAErGA,UAAUA,CAACA;YACPA,eAAeA,GAAGA,IAAIA,eAAeA,EAAEA,CAACA;YAExCA,eAAeA,CAACA,WAAWA,CAACA,gBAAgBA,CAACA,CAACA;YAE9CA,aAAaA,GAAGA,IAAIA,aAAaA,CAC7BA,mBAAmBA,CAACA,MAAMA,EAAEA,EAC5BA,QAAQA,EACRA,GAAGA,EACHA,GAAGA,CACNA,CAACA;YAEFA,aAAaA,CAACA,KAAKA,EAAEA,CAACA;QAC1BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,kBAAkBA,EAAEA,UAACA,IAAIA;YACxBA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;gBACbA,aAAaA;aAChBA,CAACA;YAEFA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,iBAAiBA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;iBACtCA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;iBAC1BA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAE9DA,UAAUA,CAACA;gBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;gBACvDA,kBAAkBA,CAACA,kBAAkBA,CAACA,QAAQA,CAACA,CAACA;gBAChDA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,CAACA,CAACA,sBAAsBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC9DA,MAAMA,CAACA,CAACA,CAACA,sBAAsBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAE3EA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,0BAA0BA,EAAEA,UAACA,IAAIA;YAChCA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;gBACbA,aAAaA;aAChBA,CAACA;YAEFA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;iBAC1BA,aAAaA,CAACA,CAACA,EAAEA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;iBAC7BA,WAAWA,CAACA,IAAIA,CAACA;iBACjBA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAE9DA,UAAUA,CAACA;gBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;gBACvDA,kBAAkBA,CAACA,kBAAkBA,CAACA,QAAQA,CAACA,CAACA;gBAChDA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,KAAKA,CAACA;qBACtGA,YAAYA,CAACA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,KAAKA,CAACA,CAACA;gBAC/EA,MAAMA,CAACA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,YAAYA,CAACA,GAAGA,CAACA,CAACA,KAAKA,CAACA;qBACzDA,eAAeA,CAACA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,YAAYA,CAACA,GAAGA,CAACA,CAACA,KAAKA,CAACA,CAACA;gBAC7EA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAACA,IAAIA,EAAEA,CAACA;YACxEA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,wCAAwCA,EAAEA,UAACA,IAAIA;YAC9CA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;gBACbA,aAAaA;aAChBA,CAACA;YAEFA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;iBAC1BA,aAAaA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;iBAC9BA,WAAWA,CAACA,IAAIA,CAACA;iBACjBA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAE9DA,UAAUA,CAACA;gBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;gBACvDA,kBAAkBA,CAACA,kBAAkBA,CAACA,QAAQA,CAACA,CAACA;gBAChDA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC3CA,MAAMA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACvCA,MAAMA,CAACA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,KAAKA,CAACA;qBAC9DA,eAAeA,CAACA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA,KAAKA,CAACA,CAACA;gBAClFA,MAAMA,CAACA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,YAAYA,CAACA,GAAGA,CAACA,CAACA,KAAKA,CAACA;qBACzDA,YAAYA,CAACA,CAACA,CAACA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,YAAYA,CAACA,GAAGA,CAACA,CAACA,KAAKA,CAACA,CAACA;gBAC1EA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAACA,IAAIA,EAAEA,CAACA;YACxEA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,+BAA+BA,EAAEA,UAACA,IAAIA;YACrCA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;aAChBA,CAACA;YAEFA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA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AACA,CAACA;gBAE9EA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,GAAGA,CAACA,OAAOA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBAEnEA,iDAAiDA;gBACjDA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAC7EA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,SAASA,GAAGA,SAASA,CAACA,CAACA;gBACtEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,YAAYA,CAACA,SAASA,GAAGA,cAAcA,GAAGA,SAASA,CAACA,CAACA;gBAEpFA,+DAA+DA;gBAC/DA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,UAAUA,CAACA,CAACA;gBAChEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA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AACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;iBACzCA,WAAWA,CAACA,IAAIA,CAACA;iBACjBA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAC9DA,UAAUA,CAACA;gBACPA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;gBAC5CA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,CAACA,CAACA,2BAA2BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACtDA,aAAaA,CAACA,MAAMA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,EAAEA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAC5DA,UAAUA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,yBAAyBA;oBACrEA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC5DA,MAAMA,CAACA,CAACA,CAACA,2BAA2BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACtDA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,8FAA8FA,EAAEA,UAACA,IAAIA;YACpGA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;gBACbA,YAAYA;gBACZA,cAAcA;gBACdA,aAAaA;gBACbA,WAAWA;aACdA,CAACA;YAEFA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,iBAAiBA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;iBACtCA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;iBACzCA,WAAWA,CAACA,IAAIA,CAACA;iBACjBA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAC9DA,UAAUA,CAACA;gBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;gBAC5CA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,CAACA,CAACA,2BAA2BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACtDA,aAAaA,CAACA,MAAMA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,GAAGA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAC7DA,UAAUA,CAACA;oBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,KAAKA,EAAEA,QAAQA,CAACA,CAACA;oBACxDA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;oBAC5CA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC5DA,MAAMA,CAACA,CAACA,CAACA,2BAA2BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACtDA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,kFAAkFA,EAAEA,UAACA,IAAIA;YACxFA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;gBACbA,YAAYA;gBACZA,cAAcA;gBACdA,aAAaA;gBACbA,WAAWA;aACdA,CAACA;YAEFA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,iBAAiBA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;iBACtCA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;iBACzCA,WAAWA,CAACA,IAAIA,CAACA;iBACjBA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAC9DA,UAAUA,CAACA;gBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;gBACvDA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;gBAC5CA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,CAACA,CAACA,2BAA2BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACtDA,aAAaA,CAACA,MAAMA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,EAAEA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAC5DA,UAAUA,CAACA;oBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,KAAKA,EAAEA,QAAQA,CAACA,CAACA;oBACxDA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,yBAAyBA;oBACrEA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC5DA,MAAMA,CAACA,CAACA,CAACA,2BAA2BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBACtDA,IAAIA,EAAEA,CAACA;gBACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;YAC7BA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,qDAAqDA,EAAEA,UAACA,IAAIA;YAC3DA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;aACdA,CAACA;YAEFA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,iBAAiBA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;iBACtCA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBAChBA,WAAWA,CAACA,GAAGA,C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QAAQA,CAACA,EAAEA,CAACA,CAACA;YAC9DA,UAAUA,CAACA;gBACPA,uFAAuFA;gBACvFA,uEAAuEA;gBACvEA,4FAA4FA;gBAC5FA,oCAAoCA;gBAEpCA,IAAIA,MAAMA,GAAWA,CAACA,CAACA,2BAA2BA,CAACA,CAACA;gBACpDA,IAAIA,SAASA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBAChFA,IAAIA,cAAcA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAC1FA,IAAIA,QAAQA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBAC9EA,IAAIA,aAAaA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAExFA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAC7EA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,UAAUA,CAACA,CAACA;gBAChEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,WAAWA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACnEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;gBAE3CA,uCAAuCA;gBACvCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,SAASA,GAAGA,SAASA,CAACA,CAACA;gBACtEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,YAAYA,CAACA,SAASA,GAAGA,cAAcA,GAAGA,SAASA,CAACA,CAACA;gBAEpFA,uCAAuCA;gBACvCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,QAAQA,GAAGA,aAAaA,CAACA,CAACA;gBAEzEA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,6BAA6BA,EAAEA,UAACA,IAAIA;YAEnCA,IAAIA,MAAMA,GAAGA;gBACTA,IAAIA,MAA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CA,KAAKA,CAACA,CAACA;gBAC3CA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAE7EA,2CAA2CA;gBAC3CA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,UAAUA,CAACA,CAACA;gBAEhEA,uCAAuCA;gBACvCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBAC/DA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBAE/DA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,uCAAuCA,EAAEA,UAACA,IAAIA;YAC7CA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;gBACbA,SAASA;aACZA,CAACA;YAEFA,eAAeA,CAACA,WAAWA,CAACA,gBAAgBA,CAACA,CAACA;YAE9CA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,iBAAiBA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;iBACtCA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,IAAIA,EAAEA,IAAIA,EAAEA,EAAEA,CAACA,CAACA;iBAC3BA,WAAWA,CAACA,IAAIA,CAACA;iBACjBA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAC9DA,UAAUA,CAACA;gBACPA,uFAAuFA;gBACvFA,uEAAuEA;gBACvEA,4FAA4FA;gBAE5FA,IAAIA,MAAMA,GAAWA,CAACA,CAACA,2BAA2BA,CAACA,CAACA;gBACpDA,IAAIA,SAASA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBAChFA,IAAIA,cAAcA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAE1FA,gEAAgEA;gBAChEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;gBAC3CA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAC7EA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,SAASA,GAAGA,SAASA,CAACA,CAACA;gBACtEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,YAAYA,CAACA,SAASA,GAAGA,cAAcA,GAAGA,SAASA,CAACA,CAACA;gBAEpFA,sFAAsFA;gBACtFA,IAAIA,SAASA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBAC9EA,IAAIA,cAAcA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAExFA,2BAA2BA;gBAC3BA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;gBAC3CA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,UAAUA,CAACA,CAACA;gBAChEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,SAASA,GAAGA,cAAcA,GAAGA,SAASA,CAACA,CAACA;gBAEvFA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,mCAAmCA,EAAEA,UAACA,IAAIA;YACzCA,IAAIA,gCAAgCA,GAAqBA,OAAOA,CAACA,SAASA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,CAACA;YACrGA,gCAAgCA,CAACA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,aAAaA,EAAEA,aAAaA,CAACA,UAAUA,EAAEA,EAAEA,CAACA;YAEnGA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;gBACbA,SAASA;aACZA,CAACA;YAEFA,eAAeA,CAACA,WAAWA,CAACA,gBAAgBA,CAACA,CAACA;YAE9CA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,iBAAiBA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;iBACtCA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,IAAIA,EAAEA,IAAIA,EAAEA,IAAIA,CAACA,CAACA;iBAC7BA,WAAWA,CAACA,IAAIA,CAACA;iBACjBA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,QAAQA,GAAaA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;YAEjDA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,QAAQA,CAACA,EAAEA,CAACA,CAACA;YAC9DA,UAAUA,CAACA;gBACPA,IAAIA,MAAMA,GAAWA,CAACA,CAACA,mCAAmCA,CAACA,CAACA;gBAC5DA,IAAIA,SAASA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBAChFA,IAAIA,aAAaA,GAAWA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACzFA,IAAIA,kBAAkBA,GAAWA,SAASA,GAAGA,SAASA,CAACA;gBACvDA,IAAIA,QAAQA,GAAWA,kBAAkBA,GAAGA,aAAaA,CAACA;gBAE1DA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAC7EA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAC7EA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAE7EA,0CAA0CA;gBAC1CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,kBAAkBA,CAACA,CAACA;gBACnEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,YAAYA,CAACA,QAAQA,CAACA,CAACA;gBACtDA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAE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,CAACA,CAACA,2BAA2BA,CAACA,CAACA;gBACpDA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAC7EA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA;gBAC5CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA;gBAC5CA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,OAAOA,CAACA,MAAMA,CAACA,CAACA;gBAE5CA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,mDAAmDA,EAAEA,UAACA,IAAIA;YACzDA,IAAIA,cAAcA,GAAUA;gBACxBA,WAAWA;gBACXA,aAAaA;gBACbA,SAASA;aACZA,CAACA;YAEFA,eAAeA,CAACA,eAAeA,EAAEA;iBAC5BA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,cAAcA,CAACA;iBACzBA,WAAWA,CAACA,cAAcA,CAACA,GAAGA,CAACA,UAACA,KAAUA;gBACvCA,MAAMA,CAACA,kBAAKA,CAACA,qBAAqBA,CAACA,KAAKA,CAACA,CAACA;YAC9CA,CAACA,CAACA,CAACA;iBACFA,iBAAiBA,CAACA,CAACA,iBAAiBA,CAACA,CAACA;iBACtCA,aAAaA,EAAEA,CAACA;YAErBA,eAAeA,CAACA,mBAAmBA,EAAEA;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A,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACxEA,IAAIA,cAAcA,GAAGA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,KAAKA,EAAEA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAClFA,IAAIA,QAAQA,GAAGA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBACtEA,IAAIA,aAAaA,GAAGA,CAACA,CAACA,CAACA,cAAcA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBAEhFA,MAAMA,CAACA,MAAMA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,uBAAuBA,CAACA,CAACA;gBAC7EA,oBAAOA,CAACA,iBAAiBA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,MAAMA,CAACA,EAAEA,UAAUA,CAACA,CAACA;gBAChEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,cAAcA,CAACA,CAACA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA;gBACtDA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,KAAKA,EAAEA,CAACA,GAAGA,CAACA,WAAWA,CAACA,CAACA,CAACA,QAAQA,CAACA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;gBACnEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,EAAEA,CAACA,CAACA,OAAOA,CAACA,QAAQA,CAACA,CAACA;gBAE9CA,uCAAuCA;gBACvCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,SAASA,GAAGA,SAASA,CAACA,CAACA;gBACtEA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,YAAYA,CAACA,SAASA,GAAGA,cAAcA,GAAGA,SAASA,CAACA,CAACA;gBAEpFA,uCAAuCA;gBACvCA,MAAMA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,eAAeA,CAACA,QAAQA,GAAGA,aAAaA,CAACA,CAACA;gBAEzEA,IAAIA,EAAEA,CAACA;YACXA,CAACA,EAAEA,iCAAoBA,CAACA,CAACA;QAC7BA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,8DAA8DA,EAAEA,UAACA,IAAIA;YACpEA,IAAIA,aAAaA,GAAkBA,IAAIA,aAAaA,CAChDA,mBAAmBA,CAACA,MAAMA,EAAEA,EAC5BA,QAAQA,EACRA,GAAGA,EACHA,GAAGA,CACNA,CAACA;YACFA,aAAaA,CAACA,KAAKA,EAAEA,CAACA;YAEtBA,IAAIA,gBAAgBA,GAAqBA;gBACrCA,OAAOA,EAAEA;oBACLA;wBACIA,WAAWA,EAAEA,MAAMA;wBACnBA,SAASA,EAAEA,SAASA;wBACpBA,MAAMA,EAAEA,SAASA;w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CA,WAAWA,EAAEA,CAACA;YAE7CA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,EAAEA,SAASA,EAAEA,CAACA,kBAAkBA,CAACA,EAAEA,CAACA,CAACA;YAExEA,MAAMA,CAACA,QAAQA,CAACA,CAACA,UAAUA,EAAEA,CAACA;YAC9BA,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA,CAACA,gBAAgBA,EAAEA,CAACA;YAE5CA,UAAUA,CAACA;gBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,IAAIA,EAAEA,kBAAkBA,CAACA,CAACA;gBACjEA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA;gBAC5CA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAC5DA,MAAMA,CAACA,CAACA,CAACA,2BAA2BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACtDA,aAAaA,CAACA,MAAMA,CAACA,UAAUA,CAACA,EAAEA,MAAMA,EAAEA,EAAEA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,CAACA,CAACA;gBAC5DA,UAAUA,CAACA;oBACPA,kBAAkBA,CAACA,mBAAmBA,CAACA,KAAKA,EAAEA,kBAAkBA,CAACA,CAACA;oBAClEA,MAAMA,CAACA,CAACA,CAACA,gBAAgBA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,yBAAyBA;oBACrEA,MAAMA,CAACA,CAACA,CAACA,oBAAoBA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;oBAC5DA,MAAMA,CAACA,CAACA,CAACA,2BAA2BA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA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ACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;YAClDA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,WAAWA,EAAEA,CAACA;QACjEA,CAACA,CAACA,CAACA;QAEHA,EAAEA,CAACA,kCAAkCA,EAAEA;YACnCA,eAAeA,CAACA,mBAAmBA,EAAEA;iBAChCA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBAChBA,aAAaA,EAAEA;iBACnBA,eAAeA,EAAEA;iBACbA,SAASA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;iBACtCA,SAASA,CAACA,CAACA,GAAGA,CAACA,CAACA;iBAChBA,aAAaA,EAAEA;iBACnBA,iBAAiBA,EAAEA,CAACA;YAEzBA,IAAIA,kBAAkBA,GAA6BA;gBAC/CA,SAASA,EAAEA,CAACA,eAAeA,CAACA,KAAKA,EAAEA,CAACA;aACvCA,CAACA;YAEFA,aAAaA,CAACA,MAAMA,CAACA,aAAaA,CAACA,kBAAkBA,CAACA,CAACA;YACvDA,IAAIA,MAAMA,GAA0CA,aAAaA,CAACA,MAAMA,CAACA,wBAAwBA,CAACA,EAAEA,UAAUA,EAAEA,WAAWA,EAAEA,CAACA,CAACA;YAC/HA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACxCA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;YACrDA,MAAMA,CAACA,MAAMA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,WAAWA,EAAEA,CAACA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CA,CAACA;gBAEnDA,EAAEA,CAACA,CAACA,QAAQA,CAACA,CAACA,CAACA;oBACXA,MAAMA,CAACA,UAAUA,CAACA,GAAGA,CAACA,WAAWA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,SAASA,CAACA,QAAQA,CAACA,CAACA,CAACA;oBAC7EA,MAAMA,CAACA,aAAaA,CAACA,GAAGA,CAACA,WAAWA,CAACA,CAACA,CAACA,IAAIA,CAACA,cAAcA,CAACA,SAASA,CAACA,QAAQA,CAACA,CAACA,CAACA;gBACpFA,CAACA;YACLA,CAACA,CAACA,CAACA;QACPA,CAACA;QAEDD,sCAAsCA,KAAcA;YAChDE,IAAIA,KAAKA,GAAWA,KAAKA,GAAGA,CAACA,GAAGA,CAACA,CAACA;YAElCA,MAAMA,CAACA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,UAAUA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACjFA,MAAMA,CAACA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,UAAUA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACjFA,MAAMA,CAACA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,UAAUA,CAACA,SAASA,CAACA,QAAQA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YAClFA,MAAMA,CAACA,CAACA,CAACA,WAAWA,CAACA,SAASA,CAACA,UAAUA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA,MAAMA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;QACjFA,CAACA;QAEDF,6BAAoCA,KAAcA,EAAEA,QAAkBA,EAAEA,QAAiBA;YACrFG,4BAA4BA,CAACA,KAAKA,CAACA,CAACA;YAEpCA,EAAEA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBACRA,qBAAqBA,CAACA,QAAQA,E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","file":"visuals/funnelChartTests.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n\r\n\r\nmodule powerbitests {\r\n    import DataView = powerbi.DataView;\r\n    import DataViewMetadata = powerbi.DataViewMetadata;\r\n    import DataViewObjects = powerbi.DataViewObjects;\r\n    import DataViewScopeIdentity = powerbi.DataViewScopeIdentity;\r\n    import formattingService = powerbi.formattingService;\r\n    import IDataColorPalette = powerbi.IDataColorPalette;\r\n    import ValueType = powerbi.ValueType;\r\n    import PrimitiveType = powerbi.PrimitiveType;\r\n    import VisualDataChangedOptions = powerbi.VisualDataChangedOptions;\r\n    import DataViewObjectDescriptors = powerbi.data.DataViewObjectDescriptors;\r\n    import SQExpr = powerbi.data.SQExpr;\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n    import dataLabelUtils = powerbi.visuals.dataLabelUtils;\r\n    import FunnelChart = powerbi.visuals.FunnelChart;\r\n    import FunnelData = powerbi.visuals.FunnelData;\r\n    import funnelChartCapabilities = powerbi.visuals.funnelChartCapabilities;\r\n    import funnelChartProps = powerbi.visuals.funnelChartProps;\r\n    import IVisualPluginService = powerbi.visuals.IVisualPluginService;\r\n    import labelPosition = powerbi.visuals.labelPosition;\r\n    import SelectionId = powerbi.visuals.SelectionId;\r\n    import WebFunnelAnimator = powerbi.visuals.WebFunnelAnimator;\r\n    import visualPluginFactory = powerbi.visuals.visualPluginFactory;\r\n    import visualStyles = powerbi.visuals.visualStyles;\r\n    import buildSelector = powerbitests.helpers.buildSelectorForColumn;\r\n    import DataViewBuilder = powerbitests.helpers.DataViewBuilder;\r\n    import EventType = powerbitests.helpers.ClickEventType;\r\n    import VisualBuilder = powerbitests.helpers.VisualBuilder;\r\n    import Spy = jasmine.Spy;\r\n    import VisualObjectInstanceEnumerationObject = powerbi.VisualObjectInstanceEnumerationObject;\r\n    import PixelConverter = jsCommon.PixelConverter;\r\n\r\n    let minHeightFunnelCategoryLabelsVisible: number = visualPluginFactory.MobileVisualPluginService.MinHeightFunnelCategoryLabelsVisible;\r\n    let categoryLabelsVisibleGreaterThanMinHeight: number = minHeightFunnelCategoryLabelsVisible + 1;\r\n    let categoryLabelsSmallerThanMinHeight: number = minHeightFunnelCategoryLabelsVisible - 1;\r\n    let categoryLabelsVisibleGreaterThanMinHeightString: string = categoryLabelsVisibleGreaterThanMinHeight.toString();\r\n    let categoryLabelsVisibleSmallerThanMinHeightString: string = categoryLabelsSmallerThanMinHeight.toString();\r\n\r\n    let labelColor: string = dataLabelUtils.defaultLabelColor;\r\n    let defaultInsideLabelColor: string = \"#ffffff\";\r\n\r\n    powerbitests.mocks.setLocale();\r\n\r\n    describe(\"FunnelChart\", () => {\r\n\r\n        it(\"FunnelChart registered capabilities\", () => {\r\n            expect(visualPluginFactory.create().getPlugin(\"funnel\").capabilities).toBe(funnelChartCapabilities);\r\n        });\r\n\r\n        it(\"Capabilities should include dataViewMappings\", () => {\r\n            expect(funnelChartCapabilities.dataViewMappings).toBeDefined();\r\n        });\r\n\r\n        it(\"Capabilities should include dataRoles\", () => {\r\n            expect(funnelChartCapabilities.dataRoles).toBeDefined();\r\n        });\r\n\r\n        it(\"Capabilities should not suppressDefaultTitle\", () => {\r\n            expect(funnelChartCapabilities.suppressDefaultTitle).toBeUndefined();\r\n        });\r\n\r\n        it(\"FormatString property should match calculated\", () => {\r\n            expect(DataViewObjectDescriptors.findFormatString(funnelChartCapabilities.objects)).toEqual(funnelChartProps.general.formatString);\r\n        });\r\n    });\r\n\r\n    describe(\"FunnelChart Dataview Validation\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n\r\n        let colors: IDataColorPalette;\r\n        let hostServices: powerbi.IVisualHostServices;\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            colors = visualStyles.create().colorPalette.dataColors;\r\n            hostServices = mocks.createVisualHostServices();\r\n        });\r\n\r\n        let dataViewMetadataOneMeasure: DataViewMetadata = {\r\n            columns: [\r\n                { displayName: \"col1\", queryName: \"col1\" },\r\n                { displayName: \"col2\", queryName: \"col2\", isMeasure: true, roles: { \"Y\": true } },\r\n            ]\r\n        };\r\n\r\n        let dataViewMetadataTwoMeasures: DataViewMetadata = {\r\n            columns: [\r\n                { displayName: \"col1\", queryName: \"col1\" },\r\n                { displayName: \"col2\", queryName: \"col2\", isMeasure: true, roles: { \"Y\": true } },\r\n                { displayName: \"col3\", queryName: \"col3\", isMeasure: true, roles: { \"Y\": true } },\r\n            ]\r\n        };\r\n\r\n        let categoryColumnRef = SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"p\" });\r\n\r\n        it(\"Check explicit color is applied\", () => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            let objects: DataViewObjects[] = [\r\n                            { dataPoint: { fill: { solid: { color: \"#FF0000\" } } } },\r\n                            { dataPoint: { fill: { solid: { color: \"#00FF00\" } } } },\r\n                            { dataPoint: { fill: { solid: { color: \"#0000FF\" } } } }\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadataOneMeasure);\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataOneMeasure.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .setObjects(objects)\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setValues([100, 200, 700])\r\n                    .setSource(dataViewMetadataOneMeasure.columns[1])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n                \r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices);\r\n\r\n            helpers.assertColorsMatch(actualData.slices[0].color, \"#FF0000\");\r\n            expect(actualData.slices[0].labelFill).toBe(labelColor);\r\n            helpers.assertColorsMatch(actualData.slices[1].color, \"#00FF00\");\r\n            expect(actualData.slices[1].labelFill).toBe(labelColor);\r\n            helpers.assertColorsMatch(actualData.slices[2].color, \"#0000FF\");\r\n            expect(actualData.slices[2].labelFill).toBe(labelColor);\r\n        });\r\n\r\n        it(\"Check default color is applied\", () => {\r\n            let categoricalValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadataOneMeasure);\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataOneMeasure.columns[0])\r\n                .setValues(categoricalValues)\r\n                .setIdentity(categoricalValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setValues([100, 200, 700])\r\n                    .setSource(dataViewMetadataOneMeasure.columns[1])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let defaultDataPointColor: string = \"#00FF00\";\r\n\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices, defaultDataPointColor);\r\n\r\n            actualData.slices.forEach(slice => {\r\n                helpers.assertColorsMatch(slice.color, defaultDataPointColor);\r\n                expect(slice.labelFill).toEqual(labelColor);\r\n            });\r\n        });\r\n\r\n        it(\"Check multi-measures and custom colors\", () => {\r\n\r\n            // clone 2 measure version and define objects\r\n\r\n            let dataViewMetadata: DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: \"col2\", queryName: \"col2\", isMeasure: true, roles: { \"Y\": true }, objects: { dataPoint: { fill: { solid: { color: \"#FF0000\" } } } } },\r\n                    { displayName: \"col3\", queryName: \"col3\", isMeasure: true, roles: { \"Y\": true }, objects: { dataPoint: { fill: { solid: { color: \"#00FF00\" } } } } }\r\n                ]\r\n            };\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadata);\r\n            dataViewBuilder.setCategories([]);\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setValues([100])\r\n                    .setSource(dataViewMetadata.columns[0])\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setValues([300])\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices);\r\n            let selectionIds: SelectionId[] = [\r\n                SelectionId.createWithMeasure(\"col2\"),\r\n                SelectionId.createWithMeasure(\"col3\")];\r\n\r\n            let expectedData: FunnelData = {\r\n                slices: [\r\n                    {\r\n                        value: 100,\r\n                        originalValue: 100,\r\n                        label: 'col2',\r\n                        identity: selectionIds[0],\r\n                        key: selectionIds[0].getKey(),\r\n                        selected: false,\r\n                        categoryOrMeasureIndex: 0,\r\n                        tooltipInfo: [{ displayName: \"col2\", value: \"100\" }, { displayName: \"Percent of first\", value: \"100.00 %\" }],\r\n                        color: \"#FF0000\",\r\n                        labelFill: labelColor,\r\n                    }, {\r\n                        value: 300,\r\n                        originalValue: 300,\r\n                        label: 'col3',\r\n                        identity: selectionIds[1],\r\n                        key: selectionIds[1].getKey(),\r\n                        selected: false,\r\n                        categoryOrMeasureIndex: 1,\r\n                        tooltipInfo: [{ displayName: \"col2\", value: \"300\" }, { displayName: \"Percent of first\", value: \"300.00 %\" }, { displayName: \"Percent of previous\", value: \"300.00 %\" }],\r\n                        color: \"#00FF00\",\r\n                        labelFill: labelColor,\r\n                    }],\r\n                categoryLabels: [\"col2\", \"col3\"],\r\n                valuesMetadata: [dataViewMetadata.columns[0], dataViewMetadata.columns[1]],\r\n                hasHighlights: false,\r\n                highlightsOverflow: false,\r\n                canShowDataLabels: true,\r\n                dataLabelsSettings: dataLabelUtils.getDefaultFunnelLabelSettings(),\r\n                percentBarLabelSettings: dataLabelUtils.getDefaultLabelSettings(true),\r\n                hasNegativeValues: false,\r\n                allValuesAreNegative: false,\r\n            };\r\n            expect(actualData).toEqual(expectedData);\r\n        });\r\n\r\n        it(\"Check converter with category and single measure\", () => {\r\n            let categoryValues: any[] = [\r\n                \"a\",\r\n                \"b\",\r\n                \"c\"\r\n            ];\r\n\r\n            let categoryIdentities: DataViewScopeIdentity[] = categoryValues.map((value: any) => {\r\n                return mocks.dataViewScopeIdentity(value);\r\n            });\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadataOneMeasure);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataOneMeasure.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryIdentities)\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n                \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setValues([100, 200, 700])\r\n                    .setSource(dataViewMetadataOneMeasure.columns[1])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n                \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices);\r\n            let categoryQueryName: string = dataView.categorical.categories[0].source.queryName;\r\n            let selectionIds: SelectionId[] = [\r\n                SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[0]), \"col2\"),\r\n                SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[1]), \"col2\"),\r\n                SelectionId.createWithSelectorForColumnAndMeasure(buildSelector(categoryQueryName, categoryIdentities[2]), \"col2\")];\r\n            let sliceColor: string = colors.getColorByIndex(0).value;\r\n\r\n            let expectedData: FunnelData = {\r\n                slices: [\r\n                    {\r\n                        value: 100,\r\n                        originalValue: 100,\r\n                        label: 'a',\r\n                        identity: selectionIds[0],\r\n                        key: selectionIds[0].getKey(),\r\n                        selected: false,\r\n                        categoryOrMeasureIndex: 0,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"100\" }, { displayName: \"Percent of first\", value: \"100.00 %\" }],\r\n                        color: sliceColor,\r\n                        labelFill: labelColor,\r\n                    }, {\r\n                        value: 200,\r\n                        originalValue: 200,\r\n                        label: 'b',\r\n                        identity: selectionIds[1],\r\n                        key: selectionIds[1].getKey(),\r\n                        selected: false,\r\n                        categoryOrMeasureIndex: 1,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"200\" }, { displayName: \"Percent of first\", value: \"200.00 %\" }, { displayName: \"Percent of previous\", value: \"200.00 %\" }],\r\n                        color: sliceColor,\r\n                        labelFill: labelColor,\r\n                    }, {\r\n                        value: 700,\r\n                        originalValue: 700,\r\n                        label: 'c',\r\n                        identity: selectionIds[2],\r\n                        key: selectionIds[2].getKey(),\r\n                        selected: false,\r\n                        categoryOrMeasureIndex: 2,\r\n                        tooltipInfo: [{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"700\" }, { displayName: \"Percent of first\", value: \"700.00 %\" }, { displayName: \"Percent of previous\", value: \"350.00 %\" }],\r\n                        color: sliceColor,\r\n                        labelFill: labelColor,\r\n                    }],\r\n                categoryLabels: categoryValues,\r\n                valuesMetadata: [dataViewMetadataOneMeasure.columns[1]],\r\n                hasHighlights: false,\r\n                highlightsOverflow: false,\r\n                canShowDataLabels: true,\r\n                dataLabelsSettings: dataLabelUtils.getDefaultFunnelLabelSettings(),\r\n                percentBarLabelSettings: dataLabelUtils.getDefaultLabelSettings(true),\r\n                hasNegativeValues: false,\r\n                allValuesAreNegative: false,\r\n            };\r\n            expect(actualData).toEqual(expectedData);\r\n        });\r\n\r\n        it(\"Validate highlighted tooltip\", () => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            let objects: DataViewObjects[] = [\r\n                            { dataPoint: { fill: { solid: { color: \"#FF0000\" } } } },\r\n                            { dataPoint: { fill: { solid: { color: \"#00FF00\" } } } },\r\n                            { dataPoint: { fill: { solid: { color: \"#0000FF\" } } } }\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadataOneMeasure);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataOneMeasure.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setObjects(objects)\r\n                .buildCategory();\r\n           \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataOneMeasure.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([0, 140, 420])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            let defaultDataPointColor: string = \"#00FF00\";\r\n\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices, defaultDataPointColor, true);\r\n           \r\n            //first tooltip is regular because highlighted value is 0\r\n            expect(actualData.slices[0].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"John Domo\" }, { displayName: \"col2\", value: \"100\" }, { displayName: \"Percent of first\", value: \"100.00 %\" }]);\r\n            expect(actualData.slices[1].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"John Domo\" }, { displayName: \"col2\", value: \"100\" }]);\r\n            \r\n            //tooltips with highlighted value\r\n            expect(actualData.slices[2].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"Delta Force\" }, { displayName: \"col2\", value: \"200\" }, { displayName: powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName, value: \"140\" }, { displayName: \"Percent of first\", value: \"200.00 %\" }, { displayName: \"Percent of previous\", value: \"200.00 %\" }]);\r\n            expect(actualData.slices[3].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"Delta Force\" }, { displayName: \"col2\", value: \"200\" }, { displayName: powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName, value: \"140\" }]);\r\n            expect(actualData.slices[4].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"Jean Tablau\" }, { displayName: \"col2\", value: \"700\" }, { displayName: powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName, value: \"420\" }, { displayName: \"Percent of first\", value: \"700.00 %\" }, { displayName: \"Percent of previous\", value: \"350.00 %\" }]);\r\n            expect(actualData.slices[5].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"Jean Tablau\" }, { displayName: \"col2\", value: \"700\" }, { displayName: powerbi.visuals.ToolTipComponent.localizationOptions.highlightedValueDisplayName, value: \"420\" }, { displayName: \"Percent of previous (highlight)\", value: \"300.00 %\" }]);\r\n        });\r\n\r\n        it(\"validate tooltip info not being created when tooltips are disabled\", () => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n\r\n            let objects: DataViewObjects[] = [\r\n                { dataPoint: { fill: { solid: { color: \"#FF0000\" } } } },\r\n                { dataPoint: { fill: { solid: { color: \"#00FF00\" } } } },\r\n                { dataPoint: { fill: { solid: { color: \"#0000FF\" } } } }\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadataOneMeasure);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataOneMeasure.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setObjects(objects)\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataOneMeasure.columns[1])\r\n                .setValues([100, 200, 700])\r\n                .setHighlights([0, 140, 420])\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let defaultDataPointColor: string = \"#00FF00\";\r\n\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices, defaultDataPointColor, false);\r\n           \r\n            //first tooltip is regular because highlighted value is 0\r\n            expect(actualData.slices[0].tooltipInfo).toBeUndefined();\r\n            expect(actualData.slices[1].tooltipInfo).toBeUndefined();\r\n            \r\n            //tooltips with highlighted value\r\n            expect(actualData.slices[2].tooltipInfo).toBeUndefined();\r\n            expect(actualData.slices[3].tooltipInfo).toBeUndefined();\r\n            expect(actualData.slices[4].tooltipInfo).toBeUndefined();\r\n            expect(actualData.slices[5].tooltipInfo).toBeUndefined();\r\n        });\r\n\r\n        it(\"Check converter with no category and multi-measures\", () => {\r\n            dataViewBuilder\r\n                .setMetadata(dataViewMetadataTwoMeasures)\r\n                .setCategories([]);\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataTwoMeasures.columns[1])\r\n                    .setValues([100])\r\n                    .setSubtotal(100)\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataTwoMeasures.columns[2])\r\n                    .setValues([300])\r\n                    .setSubtotal(300)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices);\r\n            let selectionIds: SelectionId[] = [\r\n                SelectionId.createWithMeasure(\"col2\"),\r\n                SelectionId.createWithMeasure(\"col3\")];\r\n            let sliceColor: string = colors.getColorByIndex(0).value;\r\n\r\n            let expectedData: FunnelData = {\r\n                slices: [\r\n                    {\r\n                        value: 100,\r\n                        originalValue: 100,\r\n                        label: 'col2',\r\n                        identity: selectionIds[0],\r\n                        key: selectionIds[0].getKey(),\r\n                        selected: false,\r\n                        categoryOrMeasureIndex: 0,\r\n                        tooltipInfo: [{ displayName: \"col2\", value: \"100\" }, { displayName: \"Percent of first\", value: \"100.00 %\" }],\r\n                        color: sliceColor,\r\n                        labelFill: labelColor,\r\n                    }, {\r\n                        value: 300,\r\n                        originalValue: 300,\r\n                        label: 'col3',\r\n                        identity: selectionIds[1],\r\n                        key: selectionIds[1].getKey(),\r\n                        selected: false,\r\n                        categoryOrMeasureIndex: 1,\r\n                        tooltipInfo: [{ displayName: \"col2\", value: \"300\" }, { displayName: \"Percent of first\", value: \"300.00 %\" }, { displayName: \"Percent of previous\", value: \"300.00 %\" }],\r\n                        color: sliceColor,\r\n                        labelFill: labelColor,\r\n                    }],\r\n                categoryLabels: [\"col2\", \"col3\"],\r\n                valuesMetadata: [dataViewMetadataTwoMeasures.columns[1], dataViewMetadataTwoMeasures.columns[2]],\r\n                hasHighlights: false,\r\n                highlightsOverflow: false,\r\n                canShowDataLabels: true,\r\n                dataLabelsSettings: dataLabelUtils.getDefaultFunnelLabelSettings(),\r\n                percentBarLabelSettings: dataLabelUtils.getDefaultLabelSettings(true),\r\n                hasNegativeValues: false,\r\n                allValuesAreNegative: false,\r\n            };\r\n            expect(actualData).toEqual(expectedData);\r\n        });\r\n\r\n        it('Check converter with no category and multi-measures with highlights', () => {\r\n            dataViewBuilder\r\n                .setMetadata(dataViewMetadataTwoMeasures)\r\n                .setCategories([]);\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataTwoMeasures.columns[1])\r\n                .setValues([300])\r\n                .setHighlights([15])\r\n                .setSubtotal(300)\r\n                .buildNewValue()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataTwoMeasures.columns[2])\r\n                .setValues([900])\r\n                .setHighlights([250])\r\n                .setSubtotal(900)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices);\r\n            let selectionIds: SelectionId[] = [\r\n                SelectionId.createWithMeasure(\"col2\"),\r\n                SelectionId.createWithMeasure(\"col3\")\r\n            ];\r\n            let sliceColor: string = colors.getColorByIndex(0).value;\r\n\r\n            let expectedData: powerbi.visuals.FunnelData = {\r\n                slices: [\r\n                        {\r\n                        label: 'col2',\r\n                        value: 300,\r\n                        originalValue: 300,\r\n                        categoryOrMeasureIndex: 0,\r\n                        identity: selectionIds[0],\r\n                        selected: false,\r\n                        key: selectionIds[0].getKey(),\r\n                        tooltipInfo: [{ displayName: \"col2\", value: \"300\" }, { displayName: 'Highlighted', value: '15' }, { displayName: \"Percent of first\", value: \"100.00 %\" }],\r\n                        color: sliceColor,\r\n                        labelFill: labelColor,\r\n                        },\r\n                        {\r\n                        label: 'col2',\r\n                        value: 300,\r\n                        originalValue: 300,\r\n                        categoryOrMeasureIndex: 0,\r\n                        identity: SelectionId.createWithHighlight(selectionIds[0]),\r\n                        selected: false,\r\n                        key: SelectionId.createWithHighlight(selectionIds[0]).getKey(),\r\n                        tooltipInfo: [{ displayName: \"col2\", value: \"300\" }, { displayName: 'Highlighted', value: '15' }, { displayName: \"Percent of first (highlight)\", value: \"100.00 %\" }],\r\n                        color: sliceColor,\r\n                        highlight: true,\r\n                        originalHighlightValue: 15,\r\n                        highlightValue: 15,\r\n                        },\r\n                        {\r\n                        label: 'col3',\r\n                        value: 900,\r\n                        originalValue: 900,\r\n                        categoryOrMeasureIndex: 1,\r\n                        identity: selectionIds[1],\r\n                        selected: false,\r\n                        key: selectionIds[1].getKey(),\r\n                        tooltipInfo: [{ displayName: \"col2\", value: \"900\" }, { displayName: 'Highlighted', value: '250' }, { displayName: \"Percent of first\", value: \"300.00 %\" }, { displayName: \"Percent of previous\", value: \"300.00 %\" }],\r\n                        color: sliceColor,\r\n                        labelFill: labelColor,\r\n                    },\r\n                    {\r\n                        label: 'col3',\r\n                        value: 900,\r\n                        originalValue: 900,\r\n                        categoryOrMeasureIndex: 1,\r\n                        identity: SelectionId.createWithHighlight(selectionIds[1]),\r\n                        selected: false,\r\n                        key: SelectionId.createWithHighlight(selectionIds[1]).getKey(),\r\n                        tooltipInfo: [{ displayName: \"col2\", value: \"900\" }, { displayName: 'Highlighted', value: '250' }, { displayName: \"Percent of first (highlight)\", value: \"1666.67 %\" }, { displayName: \"Percent of previous (highlight)\", value: \"1666.67 %\" }],\r\n                        color: sliceColor,\r\n                        highlight: true,\r\n                        originalHighlightValue: 250,\r\n                        highlightValue: 250,\r\n                    }],\r\n                categoryLabels: ['col2', 'col3'],\r\n                valuesMetadata: [dataViewMetadataTwoMeasures.columns[1], dataViewMetadataTwoMeasures.columns[2]],\r\n                hasHighlights: true,\r\n                highlightsOverflow: false,\r\n                canShowDataLabels: true,\r\n                dataLabelsSettings: dataLabelUtils.getDefaultFunnelLabelSettings(),\r\n                percentBarLabelSettings: dataLabelUtils.getDefaultLabelSettings(true),\r\n                hasNegativeValues: false,\r\n                allValuesAreNegative: false,\r\n            };\r\n            expect(actualData).toEqual(expectedData);\r\n        });\r\n\r\n        it('Negative values with positive values are converted to zero by converter', () => {\r\n            dataViewBuilder\r\n                .setMetadata(dataViewMetadataTwoMeasures)\r\n                .setCategories([]);\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataTwoMeasures.columns[1])\r\n                .setValues([300])\r\n                .setHighlights([-5])\r\n                .setSubtotal(300)\r\n                .buildNewValue()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataTwoMeasures.columns[2])\r\n                .setValues([-200])\r\n                .setHighlights([250])\r\n                .setSubtotal(-200)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let actualData = FunnelChart.converter(dataView, colors, hostServices);\r\n\r\n            // Negative values warning flags\r\n            expect(actualData.hasNegativeValues).toBeTruthy();\r\n            expect(actualData.allValuesAreNegative).toBeFalsy();\r\n\r\n            // Render and original values\r\n            expect(actualData.slices[1].highlightValue).toBe(0);\r\n            expect(actualData.slices[1].originalHighlightValue).toBe(-5);\r\n            expect(actualData.slices[2].value).toBe(0);\r\n            expect(actualData.slices[2].originalValue).toBe(-200);\r\n        });\r\n\r\n        it('When all values are negative converter converts to absolute values', () => {\r\n            dataViewBuilder\r\n                .setMetadata(dataViewMetadataTwoMeasures)\r\n                .setCategories([]);\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataTwoMeasures.columns[1])\r\n                .setValues([-100])\r\n                .setHighlights([-5])\r\n                .setSubtotal(-100)\r\n                .buildNewValue()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataTwoMeasures.columns[2])\r\n                .setValues([-200])\r\n                .setHighlights([-150])\r\n                .setSubtotal(-200)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let actualData = FunnelChart.converter(dataView, colors, hostServices);\r\n\r\n            // Negative values warning flags\r\n            expect(actualData.hasNegativeValues).toBeFalsy();\r\n            expect(actualData.allValuesAreNegative).toBeTruthy();\r\n\r\n            // Render and original values\r\n            expect(actualData.slices[0].value).toBe(100);\r\n            expect(actualData.slices[0].originalValue).toBe(-100);\r\n            expect(actualData.slices[1].highlightValue).toBe(5);\r\n            expect(actualData.slices[1].originalHighlightValue).toBe(-5);\r\n            expect(actualData.slices[2].value).toBe(200);\r\n            expect(actualData.slices[2].originalValue).toBe(-200);\r\n            expect(actualData.slices[3].highlightValue).toBe(150);\r\n            expect(actualData.slices[3].originalHighlightValue).toBe(-150);\r\n    });\r\n\r\n        it('non-categorical multi-measure tooltip values test', () => {\r\n            let dataViewMetadata: DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: \"a\", queryName: \"a\", isMeasure: true, roles: { \"Y\": true } },\r\n                    { displayName: \"b\", queryName: \"b\", isMeasure: true, roles: { \"Y\": true } },\r\n                    { displayName: \"c\", queryName: \"c\", isMeasure: true, roles: { \"Y\": true } },\r\n                ]\r\n            };\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadata);\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[0])\r\n                    .setValues([1])\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([2])\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[2])\r\n                    .setValues([3])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            let actualData: FunnelData = FunnelChart.converter(dataView, colors, hostServices);\r\n\r\n            expect(actualData.slices[0].tooltipInfo).toEqual([{ displayName: \"a\", value: \"1\" }, { displayName: \"Percent of first\", value: \"100.00 %\" }]);\r\n            expect(actualData.slices[1].tooltipInfo).toEqual([{ displayName: \"b\", value: \"2\" }, { displayName: \"Percent of first\", value: \"200.00 %\" }, { displayName: \"Percent of previous\", value: \"200.00 %\" }]);\r\n            expect(actualData.slices[2].tooltipInfo).toEqual([{ displayName: \"c\", value: \"3\" }, { displayName: \"Percent of first\", value: \"300.00 %\" }, { displayName: \"Percent of previous\", value: \"150.00 %\" }]);\r\n        });\r\n    });\r\n\r\n    describe(\"FunnelChart Interactivity\", () => {\r\n        let dataViewBuilder: DataViewBuilder = new DataViewBuilder();\r\n        \r\n        let visualBuilder: VisualBuilder;\r\n        \r\n        let dataViewMetadataCategorySeriesColumns: DataViewMetadata = {\r\n            columns: [\r\n                { queryName: \"select0\", displayName: \"Squad\", properties: { \"Category\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text) },\r\n                { displayName: \"Period\", properties: { \"Series\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                { displayName: null, groupName: \"201501\", isMeasure: true, roles: { \"Y\": true }, properties: { \"Values\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                { displayName: null, groupName: \"201502\", isMeasure: true, roles: { \"Y\": true }, properties: { \"Values\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n                { displayName: null, groupName: \"201503\", isMeasure: true, roles: { \"Y\": true }, properties: { \"Values\": true }, type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double) },\r\n            ]\r\n        };\r\n        let categoryColumnRef: SQExpr =\r\n            SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"Squad\" });\r\n        let DefaultOpacity: string = \"\" + FunnelChart.DefaultBarOpacity;\r\n        let DimmedOpacity: string = \"\" + FunnelChart.DimmedBarOpacity;\r\n\r\n        let interactiveCategoryValues: any[] = [\r\n            \"a\",\r\n            \"b\"\r\n        ];\r\n        \r\n        dataViewBuilder.setMetadata(dataViewMetadataCategorySeriesColumns);\r\n        \r\n        dataViewBuilder.categoryBuilder()\r\n            .setSource(dataViewMetadataCategorySeriesColumns.columns[0])\r\n            .setValues(interactiveCategoryValues)\r\n            .setIdentity(interactiveCategoryValues.map((value) => {\r\n                return mocks.dataViewScopeIdentity(value);\r\n            }))\r\n            .setIdentityFields([categoryColumnRef])\r\n            .buildCategory();\r\n        \r\n        dataViewBuilder.valueColumnsBuilder()\r\n            .newValueBuilder()\r\n                .setSource(dataViewMetadataCategorySeriesColumns.columns[2])\r\n                .setValues([0.00110, 120])\r\n                .setIdentity(mocks.dataViewScopeIdentity(\"201501\"))\r\n                .buildNewValue()\r\n            .newValueBuilder()\r\n                .setSource(dataViewMetadataCategorySeriesColumns.columns[3])\r\n                .setValues([210, 220])\r\n                .setIdentity(mocks.dataViewScopeIdentity(\"201502\"))\r\n                .buildNewValue()\r\n            .newValueBuilder()\r\n                .setSource(dataViewMetadataCategorySeriesColumns.columns[4])\r\n                .setValues([310, 0.00320])\r\n                .setIdentity(mocks.dataViewScopeIdentity(\"201503\"))\r\n                .buildNewValue()\r\n            .buildValueColumns();\r\n        \r\n        let interactiveDataViewOptions: VisualDataChangedOptions = {\r\n            dataViews: [dataViewBuilder.build()]\r\n        };\r\n\r\n        dataViewBuilder = new DataViewBuilder();\r\n        \r\n        dataViewBuilder.setMetadata(dataViewMetadataCategorySeriesColumns);\r\n        \r\n        dataViewBuilder.categoryBuilder()\r\n            .setSource(dataViewMetadataCategorySeriesColumns.columns[0])\r\n            .setValues(interactiveCategoryValues)\r\n            .setIdentity(interactiveCategoryValues.map((value: any) => {\r\n                return mocks.dataViewScopeIdentity(value);\r\n            }))\r\n            .setIdentityFields([categoryColumnRef])\r\n            .buildCategory();\r\n        \r\n        dataViewBuilder.valueColumnsBuilder()\r\n            .newValueBuilder()\r\n                .setSource(dataViewMetadataCategorySeriesColumns.columns[2])\r\n                .setValues([0.00110, 120])\r\n                .setIdentity(mocks.dataViewScopeIdentity(\"201501\"))\r\n                .buildNewValue()\r\n            .newValueBuilder()\r\n                .setSource(dataViewMetadataCategorySeriesColumns.columns[3])\r\n                .setValues([0.00210, 220])\r\n                .setIdentity(mocks.dataViewScopeIdentity(\"201502\"))\r\n                .buildNewValue()\r\n            .newValueBuilder()\r\n                .setSource(dataViewMetadataCategorySeriesColumns.columns[4])\r\n                .setValues([0.00310, 320])\r\n                .setIdentity(mocks.dataViewScopeIdentity(\"201503\"))\r\n                .buildNewValue()\r\n            .buildValueColumns();\r\n        \r\n        let smallerInteractiveDataViewOptions: powerbi.VisualDataChangedOptions = {\r\n            dataViews: [dataViewBuilder.build()]\r\n        };\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            visualBuilder = new VisualBuilder(\r\n                visualPluginFactory.createMinerva({\r\n                    dataDotChartEnabled: false,\r\n                    heatMap: false,\r\n                }),\r\n                \"funnel\",\r\n                500,\r\n                500\r\n            );\r\n            \r\n            visualBuilder.interactivitySelection = true;\r\n            \r\n            visualBuilder.build();\r\n            });\r\n\r\n        function getOptionsForValues(values: number[]): VisualDataChangedOptions {\r\n            let dataViewBuilder: DataViewBuilder = new DataViewBuilder();\r\n\r\n            let categoryValues: any[] = [\r\n                \"a\",\r\n                \"b\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadataCategorySeriesColumns);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataCategorySeriesColumns.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataCategorySeriesColumns.columns[2])\r\n                    .setValues(values)\r\n                    .setIdentity(mocks.dataViewScopeIdentity(\"201501\"))\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            return { dataViews: [dataViewBuilder.build()] };\r\n        }\r\n\r\n        it(\"Interactors are rendered with a minimum size\", (done) => {\r\n            let options = getOptionsForValues([0.001, 200, 700]);\r\n            visualBuilder.visual.onDataChanged(options);\r\n\r\n            setTimeout(() => {\r\n                let bars: JQuery = $(FunnelChart.Selectors.funnel.bars.selector);\r\n                let interactors: JQuery = $(FunnelChart.Selectors.funnel.interactors.selector);\r\n\r\n                expect(interactors.length).toBe(1);\r\n                expect(interactors.eq(0).attr(\"x\")).toBe(bars.eq(0).attr(\"x\"));\r\n\r\n                let firstInteractorHeight: number = parseInt(interactors.eq(0).attr(\"height\"), 10);\r\n                expect(firstInteractorHeight).toBe(FunnelChart.MinimumInteractorSize);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"NaN in values shows warning\", (done) => {\r\n            let warningSpy: Spy = jasmine.createSpy(\"warning\");\r\n            visualBuilder.host.setWarnings = warningSpy;\r\n            let options: VisualDataChangedOptions = getOptionsForValues([110, 120, NaN]);\r\n            visualBuilder.visual.onDataChanged(options);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                expect(warningSpy.calls.argsFor(0)[0][0].code).toBe(\"NaNNotSupported\");\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"Negative Infinity in values shows warning\", (done) => {\r\n            let warningSpy: Spy = jasmine.createSpy(\"warning\");\r\n            visualBuilder.host.setWarnings = warningSpy;\r\n\r\n            let options: VisualDataChangedOptions = getOptionsForValues([110, 120, Number.NEGATIVE_INFINITY]);\r\n            visualBuilder.visual.onDataChanged(options);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                expect(warningSpy.calls.argsFor(0)[0][0].code).toBe(\"InfinityValuesNotSupported\");\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"Positive Infinity in values shows warning\", (done) => {\r\n            let warningSpy: Spy = jasmine.createSpy(\"warning\");\r\n            visualBuilder.host.setWarnings = warningSpy;\r\n\r\n            let options: VisualDataChangedOptions = getOptionsForValues([110, 120, Number.POSITIVE_INFINITY]);\r\n            visualBuilder.visual.onDataChanged(options);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                expect(warningSpy.calls.argsFor(0)[0][0].code).toBe(\"InfinityValuesNotSupported\");\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"Out of range value in values shows warning\", (done) => {\r\n            let warningSpy: Spy = jasmine.createSpy(\"warning\");\r\n            visualBuilder.host.setWarnings = warningSpy;\r\n\r\n            let options: VisualDataChangedOptions = getOptionsForValues([110, 120, 1e301]);\r\n            visualBuilder.visual.onDataChanged(options);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                expect(warningSpy.calls.argsFor(0)[0][0].code).toBe(\"ValuesOutOfRange\");\r\n                done();\r\n            });\r\n        });\r\n\r\n        it('Negative value in values shows warning', (done) => {\r\n            let warningSpy: Spy = jasmine.createSpy('warning');\r\n            visualBuilder.host.setWarnings = warningSpy;\r\n\r\n            let options = getOptionsForValues([110, -120, 1e301]);\r\n            visualBuilder.visual.onDataChanged(options);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                expect(warningSpy.calls.argsFor(0)[0][0].code).toBe('NegativeValuesNotSupported');\r\n                done();\r\n            });\r\n        });\r\n\r\n        it('All values are negative in values shows warning', (done) => {\r\n            let warningSpy: Spy = jasmine.createSpy('warning');\r\n            visualBuilder.host.setWarnings = warningSpy;\r\n\r\n            let options = getOptionsForValues([-110, -120, -1e301]);\r\n            visualBuilder.visual.onDataChanged(options);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalled();\r\n                expect(warningSpy.calls.count()).toBe(1);\r\n                expect(warningSpy.calls.argsFor(0)[0][0].code).toBe('AllNegativeValuesNotSupported');\r\n                done();\r\n            });\r\n        });\r\n\r\n        it('All good in values does not show warning', (done) => {\r\n            let warningSpy: Spy = jasmine.createSpy('warning');\r\n            visualBuilder.host.setWarnings = warningSpy;\r\n\r\n            let options: VisualDataChangedOptions = getOptionsForValues([110, 120, 300]);\r\n            visualBuilder.visual.onDataChanged(options);\r\n\r\n            setTimeout(() => {\r\n                expect(warningSpy).toHaveBeenCalledWith([]);\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"funnel chart category select\", (done) => {\r\n            visualBuilder.visual.onDataChanged(interactiveDataViewOptions);\r\n\r\n            setTimeout(() => {\r\n                let bars: JQuery = $(FunnelChart.Selectors.funnel.bars.selector);\r\n\r\n                spyOn(visualBuilder.host, \"onSelect\").and.callThrough();\r\n\r\n                (<any>bars.first()).d3Click(0, 0);\r\n\r\n                expect(bars[0].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(bars[1].style.fillOpacity).toBe(DimmedOpacity);\r\n\r\n                expect(visualBuilder.host.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: {\r\n                                    \"select0\": interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"funnel chart category select via interactor\", (done) => {\r\n            visualBuilder.visual.onDataChanged(smallerInteractiveDataViewOptions);\r\n\r\n            setTimeout(() => {\r\n                let bars: JQuery = $(FunnelChart.Selectors.funnel.bars.selector);\r\n                let interactors: JQuery = $(FunnelChart.Selectors.funnel.interactors.selector);\r\n\r\n                spyOn(visualBuilder.host, \"onSelect\").and.callThrough();\r\n\r\n                (<any>interactors.first()).d3Click(0, 0);\r\n\r\n                expect(bars[0].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(bars[1].style.fillOpacity).toBe(DimmedOpacity);\r\n\r\n                expect(visualBuilder.host.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: {\r\n                                    \"select0\": interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"funnel chart category multi-select\", (done) => {\r\n            visualBuilder.visual.onDataChanged(interactiveDataViewOptions);\r\n            setTimeout(() => {\r\n                let bars: JQuery = $(FunnelChart.Selectors.funnel.bars.selector);\r\n\r\n                spyOn(visualBuilder.host, \"onSelect\").and.callThrough();\r\n\r\n                (<any>bars.first()).d3Click(0, 0);\r\n\r\n                expect(bars[0].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(bars[1].style.fillOpacity).toBe(DimmedOpacity);\r\n                expect(visualBuilder.host.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]],\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: {\r\n                                    \"select0\": interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                (<any>bars.last()).d3Click(0, 0, EventType.CtrlKey);\r\n\r\n                //expect(bars[0].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(bars[1].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(visualBuilder.host.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]],\r\n                            },\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: {\r\n                                    \"select0\": interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"funnel chart external clear\", (done) => {\r\n            visualBuilder.visual.onDataChanged(interactiveDataViewOptions);\r\n\r\n            setTimeout(() => {\r\n                let bars: JQuery = $(FunnelChart.Selectors.funnel.bars.selector);\r\n\r\n                spyOn(visualBuilder.host, \"onSelect\").and.callThrough();\r\n\r\n                (<any>bars.first()).d3Click(0, 0);\r\n\r\n                expect(bars[0].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(bars[1].style.fillOpacity).toBe(DimmedOpacity);\r\n\r\n                expect(visualBuilder.host.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: {\r\n                                    \"select0\": interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                visualBuilder.visual.onClearSelection();\r\n\r\n                expect(bars[0].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(bars[1].style.fillOpacity).toBe(DefaultOpacity);\r\n\r\n                done();\r\n            });\r\n        });\r\n\r\n        it(\"funnel chart clear on clearCatcher click\", (done) => {\r\n            visualBuilder.visual.onDataChanged(interactiveDataViewOptions);\r\n\r\n            setTimeout(() => {\r\n                let bars: JQuery = $(FunnelChart.Selectors.funnel.bars.selector);\r\n\r\n                spyOn(visualBuilder.host, \"onSelect\").and.callThrough();\r\n\r\n                (<any>bars.first()).d3Click(0, 0);\r\n\r\n                expect(bars[0].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(bars[1].style.fillOpacity).toBe(DimmedOpacity);\r\n                expect(visualBuilder.host.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: [\r\n                            {\r\n                                data: [interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]]\r\n                            }\r\n                        ],\r\n                        data2: [\r\n                            {\r\n                                dataMap: {\r\n                                    \"select0\": interactiveDataViewOptions.dataViews[0].categorical.categories[0].identity[0]\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n\r\n                let clearCatcher: JQuery = $(\".clearCatcher\");\r\n                (<any>clearCatcher.first()).d3Click(0, 0);\r\n\r\n                expect(bars[0].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(bars[1].style.fillOpacity).toBe(DefaultOpacity);\r\n                expect(visualBuilder.host.onSelect).toHaveBeenCalledWith(\r\n                    {\r\n                        data: []\r\n                    });\r\n\r\n                done();\r\n            });\r\n        });\r\n    });\r\n\r\n    describe(\"FunnelChart DOM Validation\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n        \r\n        let visualBuilder: VisualBuilder;\r\n        \r\n        let translate: number = 62;\r\n        let dataViewMetadata: DataViewMetadata = {\r\n            columns: [\r\n                { displayName: \"col1\", queryName: \"select0\" },\r\n                { displayName: \"col2\", queryName: \"select1\", isMeasure: true, roles: { \"Y\": true }, objects: { general: { formatString: \"$0\" } } },\r\n            ],\r\n            objects: {\r\n                labels: { show: true, labelPrecision: 0 }\r\n            }\r\n        };\r\n        let categoryColumnRef: SQExpr = SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"col1\" });\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadata);\r\n            \r\n            visualBuilder = new VisualBuilder(\r\n                visualPluginFactory.create(),\r\n                \"funnel\",\r\n                500,\r\n                500\r\n            );\r\n            \r\n            visualBuilder.build();\r\n        });\r\n\r\n        it(\"Ensure DOM built\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataView);\r\n                FunnelChartHelpers.validateDataLabels(dataView);\r\n                expect($(\".funnelChart g\").length).toBe(7);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(3);\r\n                expect($(\".funnelChart .labels\").find(\"text\").length).toBe(3);\r\n                expect($(\".funnelChart .labels\").find(\"text\").first().text()).toBe(\"$100\");\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Funnel partial highlight\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([50, 140, 420])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataView);\r\n                FunnelChartHelpers.validateDataLabels(dataView);\r\n                expect($(\".funnelChart g\").length).toBe(7);\r\n                expect($(\".funnelBar\").length).toBe(6);\r\n                expect($(\".highlight\").length).toBe(3); expect(+$(\".highlight\")[0].attributes.getNamedItem(\"height\").value)\r\n                    .toBeLessThan(+$(\".funnelBar\")[0].attributes.getNamedItem(\"height\").value);\r\n                expect(+$(\".highlight\")[0].attributes.getNamedItem(\"y\").value)\r\n                    .toBeGreaterThan(+$(\".funnelBar\")[0].attributes.getNamedItem(\"y\").value);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(3); done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Funnel partial highlight with overflow\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([150, 340, 720])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataView);\r\n                FunnelChartHelpers.validateDataLabels(dataView);\r\n                expect($(\".funnelChart g\").length).toBe(7);\r\n                expect($(\".funnelBar\").length).toBe(6);\r\n                expect($(\".highlight\").length).toBe(3);\r\n                expect(+$(\".highlight\")[0].attributes.getNamedItem(\"height\").value)\r\n                    .toBeGreaterThan(+$(\".funnelBar\")[0].attributes.getNamedItem(\"height\").value);\r\n                expect(+$(\".highlight\")[0].attributes.getNamedItem(\"y\").value)\r\n                    .toBeLessThan(+$(\".funnelBar\")[0].attributes.getNamedItem(\"y\").value);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(3); done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure Max Width is respected\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200])\r\n                    .setSubtotal(300)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let rect: JQuery = $(\".funnelChart\").find(\".funnelBar\").first();\r\n                expect(rect.attr(\"width\")).toBeLessThan(40);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure Labels that do not fit in the bar are shown outside and are the bar fill color\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            let dataViewMetadataWithLabelsObject: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = { labels: { labelPosition: labelPosition.insideCenter } };\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                    .setValues([1000, 2000, 20])\r\n                    .setSubtotal(3020)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {    \r\n                // The funnel bars are rotated 90 degrees, so for the bars, \"y\" and \"height\" correspond\r\n                // to what we would think of as the position and size along the x-axis.\r\n                // The funnel data labels are not rotated, so for the labels we need to use \"x\" and \"width\".\r\n\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n                let firstBarHeight: number = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"height\");\r\n                let firstBarY: number = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"y\");\r\n                let lastBarHeight: number = +$(\".funnelChart\").find(\".funnelBar\").last().attr(\"height\");\r\n                let lastBarY: number = +$(\".funnelChart\").find(\".funnelBar\").last().attr(\"y\");\r\n\r\n                expect(labels.length).toBe(3);\r\n                expect($(labels[0]).attr(\"x\")).toEqual($(labels[1]).attr(\"x\"));\r\n                expect($(labels[1]).attr(\"x\")).not.toEqual($(labels[2]).attr(\"x\"));\r\n\r\n                // Check that the first label is inside and white\r\n                helpers.assertColorsMatch($(labels[0]).css(\"fill\"), defaultInsideLabelColor);\r\n                expect($(labels[0]).attr(\"x\")).toBeGreaterThan(firstBarY + translate);\r\n                expect($(labels[0]).attr(\"x\")).toBeLessThan(firstBarY + firstBarHeight + translate);\r\n\r\n                // Check that the last label is outside and equal to fill color\r\n                helpers.assertColorsMatch($(labels[2]).css(\"fill\"), labelColor);\r\n                expect($(labels[2]).attr(\"x\")).toBeGreaterThan(lastBarY + lastBarHeight + translate);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure labels shown match default values when there are no highlights\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            let dataViewMetadataWithLabelsObject = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = {\r\n                labels: {\r\n                    labelPosition: labelPosition.insideCenter\r\n                }\r\n            };\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                    .setValues([5, 100, 200])\r\n                    .setSubtotal(305)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validateDataLabels(dataView);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it('Ensure labels shown match original values when they were negative', (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            let dataViewMetadataWithLabelsObject = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = {\r\n                labels: {\r\n                    labelPosition: labelPosition.insideCenter\r\n                }\r\n            };\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                    .setValues([5, -100, 200])\r\n                    .setSubtotal(105)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let labels = $(\".funnelChart .labels .data-labels\");\r\n                expect(labels.eq(1).text()).toBe(\"-$100\");\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure labels shown match highlight values when there are highlights\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            let dataViewMetadataWithLabelsObject = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = {\r\n                labels: {\r\n                    labelPosition: labelPosition.insideCenter\r\n                }\r\n            };\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                    .setValues([5, 100, 200])\r\n                    .setHighlights([465, 234, 300])\r\n                    .setSubtotal(305)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validateDataLabels(dataView);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure Labels hide when viewport forces bars to be smaller than min height\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Bugs Bunny\",\r\n                \"Mickey Mouse\",\r\n                \"Donald Duck\",\r\n                \"VRM Jones\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 300, 400, 500, 600])\r\n                    .setSubtotal(2100)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                expect($(\".funnelChart g\").length).toBe(10);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(6);\r\n                expect($(\".funnelChart .labels text\").length).toBe(6);\r\n                visualBuilder.visual.onResizing({ height: 50, width: 100 });\r\n                setTimeout(() => {\r\n                    expect($(\".funnelChart g\").length).toBe(3); // No \"g\" for data labels\r\n                    expect($(\".funnelChart .axis\").find(\"text\").length).toBe(0);\r\n                    expect($(\".funnelChart .labels text\").length).toBe(0);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure Labels show but percent bar hides when adding percent bars would cause labels to hide\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Bugs Bunny\",\r\n                \"Mickey Mouse\",\r\n                \"Donald Duck\",\r\n                \"VRM Jones\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 300, 400, 500, 600])\r\n                    .setSubtotal(2100)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataView);\r\n                expect($(\".funnelChart g\").length).toBe(10);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(6);\r\n                expect($(\".funnelChart .labels text\").length).toBe(6);\r\n                visualBuilder.visual.onResizing({ height: 100, width: 100 });\r\n                setTimeout(() => {\r\n                    FunnelChartHelpers.validatePercentBars(false, dataView);\r\n                    expect($(\".funnelChart g\").length).toBe(10);\r\n                    expect($(\".funnelChart .axis\").find(\"text\").length).toBe(6);\r\n                    expect($(\".funnelChart .labels text\").length).toBe(6);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure percent bars hide when viewport forces bars to be smaller than min height\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Bugs Bunny\",\r\n                \"Mickey Mouse\",\r\n                \"Donald Duck\",\r\n                \"VRM Jones\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 300, 400, 500, 600])\r\n                    .setSubtotal(2100)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataView);\r\n                expect($(\".funnelChart g\").length).toBe(10);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(6);\r\n                expect($(\".funnelChart .labels text\").length).toBe(6);\r\n                visualBuilder.visual.onResizing({ height: 50, width: 100 });\r\n                setTimeout(() => {\r\n                    FunnelChartHelpers.validatePercentBars(false, dataView);\r\n                    expect($(\".funnelChart g\").length).toBe(3); // No \"g\" for data labels\r\n                    expect($(\".funnelChart .axis\").find(\"text\").length).toBe(0);\r\n                    expect($(\".funnelChart .labels text\").length).toBe(0);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure percent bars hide when single value data set\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100])\r\n                    .setSubtotal(100)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(false, dataView);\r\n                expect($(\".funnelChart g\").length).toBe(5);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(1);\r\n                expect($(\".funnelChart .labels text\").length).toBe(1);\r\n                \r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure percent bars hide when baseline value is zero\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Bugs Bunny\",\r\n                \"Mickey Mouse\",\r\n                \"Donald Duck\",\r\n                \"VRM Jones\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([0, 200, 300, 400, 500, 600])\r\n                    .setSubtotal(2000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(false, dataView);\r\n                expect($(\".funnelChart g\").length).toBe(10);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(6);\r\n                expect($(\".funnelChart .labels text\").length).toBe(6);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure percent bars hide when settings are off\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Bugs Bunny\",\r\n                \"Mickey Mouse\",\r\n                \"Donald Duck\",\r\n                \"VRM Jones\"\r\n            ];\r\n\r\n            let percentBarOffMetadata: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            percentBarOffMetadata.objects = { percentBarLabel: { show: false } };\r\n            \r\n            dataViewBuilder.setMetadata(percentBarOffMetadata);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(percentBarOffMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(percentBarOffMetadata.columns[1])\r\n                .setValues([50, 200, 300, 400, 500, 600])\r\n                .setSubtotal(2000)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(false, dataView);\r\n                expect($(\".funnelChart g\").length).toBe(10);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(6);\r\n                expect($(\".funnelChart .labels text\").length).toBe(6);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Ensure percent bars font size\", (done) => {\r\n            let fontSize = 15;\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Bugs Bunny\",\r\n                \"Mickey Mouse\",\r\n                \"Donald Duck\",\r\n                \"VRM Jones\"\r\n            ];\r\n\r\n            let percentBarOnMetadata: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            percentBarOnMetadata.objects = { percentBarLabel: { show: true, fontSize: fontSize } };\r\n\r\n            dataViewBuilder.setMetadata(percentBarOnMetadata);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(percentBarOnMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(percentBarOnMetadata.columns[1])\r\n                .setValues([50, 200, 300, 400, 500, 600])\r\n                .setSubtotal(2000)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataView, fontSize);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        xit(\"Ensure percent bars font size position with many categories\", (done) => {\r\n            let fontSize = 35;\r\n            let categoryValues: any[] = [\r\n                \"United States\",\r\n                \"United Kingdom\",\r\n                \"Russia\",\r\n                \"Turkey\",\r\n                \"Romania\",\r\n                \"Latvia\",\r\n                \"Laos\",\r\n                \"Jamaica\",\r\n                \"Canada\",\r\n                \"India\",\r\n            ];\r\n\r\n            let percentBarOnMetadata: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            percentBarOnMetadata.objects = { percentBarLabel: { show: true, fontSize: fontSize } };\r\n\r\n            dataViewBuilder.setMetadata(percentBarOnMetadata);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(percentBarOnMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(percentBarOnMetadata.columns[1])\r\n                .setValues([50, 200, 300, 400, 500, 600, 450, 900, 100, 255])\r\n                .setSubtotal(2000)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let funnelBox = $('svg.funnelChart').get(0).getBoundingClientRect();\r\n                let percentBars = $('.percentBars text');\r\n                let topTextBox = percentBars.get(0).getBoundingClientRect();\r\n                let bottomTextBox = percentBars.get(1).getBoundingClientRect();\r\n\r\n                expect(topTextBox.top).toBeGreaterThan(funnelBox.top);\r\n                expect(bottomTextBox.bottom).toBeLessThan(funnelBox.bottom);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Default labels validation\", (done) => {\r\n            let metadataWithDisplayUnits: DataViewMetadata = $.extend(true, {}, dataViewMetadata);\r\n            metadataWithDisplayUnits.objects = { labels: { labelDisplayUnits: 1000 } };\r\n\r\n            let fontSize: string = \"12px\";\r\n            \r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(metadataWithDisplayUnits);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([555, 2000, 20])\r\n                    .setSubtotal(2575)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {    \r\n                // The funnel bars are rotated 90 degrees, so for the bars, \"y\" and \"height\" correspond\r\n                // to what we would think of as the position and size along the x-axis.\r\n                // The funnel data labels are not rotated, so for the labels we need to use \"x\" and \"width\".\r\n                // Format supplied without precision\r\n\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n                let firstBarY: number = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"y\");\r\n                let firstBarHeight: number = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"height\");\r\n                let lastBarY: number = +$(\".funnelChart\").find(\".funnelBar\").last().attr(\"y\");\r\n                let lastBarHeight: number = +$(\".funnelChart\").find(\".funnelBar\").last().attr(\"height\");\r\n\r\n                expect(labels.length).toBe(3);\r\n                helpers.assertColorsMatch($(labels[0]).css(\"fill\"), defaultInsideLabelColor);\r\n                helpers.assertColorsMatch($(labels[2]).css(\"fill\"), labelColor);\r\n                expect($(labels[0]).css(\"fill-opacity\")).toEqual(\"1\");\r\n                expect($(labels[1]).css(\"fill-opacity\")).toEqual(\"1\");\r\n                expect($(labels[2]).css(\"fill-opacity\")).toEqual(\"1\");\r\n                expect($(labels.first().css(\"font-size\")).selector).toBe(fontSize);\r\n                expect($(labels[0]).text()).toEqual(\"$1K\");\r\n\r\n                // Check that the first label is inside\r\n                expect($(labels[0]).attr(\"x\")).toBeGreaterThan(firstBarY + translate);\r\n                expect($(labels[0]).attr(\"x\")).toBeLessThan(firstBarY + firstBarHeight + translate);\r\n\r\n                // Check that the last label is outside\r\n                expect($(labels[2]).attr(\"x\")).toBeGreaterThan(lastBarY + lastBarHeight);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Change text size validation\", (done) => {\r\n            \r\n            var assert = () => {\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n\r\n                expect(labels.length).toBe(3);\r\n                expect($(labels.first().css(\"font-size\")).selector).toBe('16px');\r\n                expect($(labels[0]).text()).toEqual(\"$1K\");\r\n\r\n                done();\r\n            };\r\n\r\n            FunnelChartHelpers.testLabelsFontSize(\r\n                dataViewBuilder,\r\n                categoryColumnRef,\r\n                visualBuilder,\r\n                dataViewMetadata,\r\n                12,\r\n                assert);\r\n        });\r\n\r\n        it(\"labels filtered when heigher than bar height\", (done) => {\r\n\r\n            var assert = () => {\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n                expect(labels.length).toBe(0);\r\n                done();\r\n            };\r\n\r\n            FunnelChartHelpers.testLabelsFontSize(\r\n                dataViewBuilder,\r\n                categoryColumnRef,\r\n                visualBuilder,\r\n                dataViewMetadata,\r\n                40,\r\n                assert);\r\n        });\r\n        \r\n        it(\"Default labels validation - with value 0\", (done) => {\r\n            let metadataWithDisplayUnits: DataViewMetadata = $.extend(true, {}, dataViewMetadata);\r\n            metadataWithDisplayUnits.objects = { labels: { labelDisplayUnits: 1000 } };\r\n            \r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(metadataWithDisplayUnits);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([555, 2000, 0])\r\n                    .setSubtotal(2555)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {    \r\n                // The funnel bars are rotated 90 degrees, so for the bars, \"y\" and \"height\" correspond\r\n                // to what we would think of as the position and size along the x-axis.\r\n                // The funnel data labels are not rotated, so for the labels we need to use \"x\" and \"width\".\r\n\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n                expect(labels.length).toBe(3);\r\n                expect($(labels[2]).text()).toEqual(\"$0K\");\r\n                helpers.assertColorsMatch($(labels[0]).css(\"fill\"), defaultInsideLabelColor);\r\n                \r\n                //last value is 0, should be default color \r\n                helpers.assertColorsMatch($(labels[2]).css(\"fill\"), labelColor);\r\n                \r\n                // Check that all labels are centering \r\n                expect($(labels[2]).attr(\"x\")).toEqual($(labels[0]).attr(\"x\"));\r\n                expect($(labels[2]).attr(\"x\")).toEqual($(labels[1]).attr(\"x\"));\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Validate label colors and positioning\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadata);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([2000, 1555, 20])\r\n                    .setSubtotal(3575)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {    \r\n                // The funnel bars are rotated 90 degrees, so for the bars, \"y\" and \"height\" correspond\r\n                // to what we would think of as the position and size along the x-axis.\r\n                // The funnel data labels are not rotated, so for the labels we need to use \"x\" and \"width\".\r\n\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n                let firstBarY: number = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"y\");\r\n                let firstBarHeight: number = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"height\");\r\n\r\n                // The first label should be white and should be inside the bar.\r\n                expect($(labels[0]).text()).toEqual(\"$2K\");\r\n                helpers.assertColorsMatch($(labels[0]).css(\"fill\"), defaultInsideLabelColor);\r\n                expect($(labels[0]).attr(\"x\")).toBeGreaterThan(firstBarY + translate);\r\n                expect($(labels[0]).attr(\"x\")).toBeLessThan(firstBarY + firstBarHeight + translate);\r\n\r\n                // The third label should be the same as the fill color and should be outside the bar.\r\n                let thirdBarY: number = +$(\".funnelChart\").find(\".funnelBar\").eq(2).attr(\"y\");\r\n                let thirdBarHeight: number = +$(\".funnelChart\").find(\".funnelBar\").eq(2).attr(\"height\");\r\n                \r\n                //Data labels precision = 0\r\n                expect($(labels[2]).text()).toEqual(\"$0K\");\r\n                helpers.assertColorsMatch($(labels[2]).css(\"fill\"), labelColor);\r\n                expect($(labels[2]).attr(\"x\")).toBeGreaterThan(thirdBarY + thirdBarHeight + translate);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Change labels position validation\", (done) => {\r\n            let dataViewMetadataWithLabelsObject: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = { labels: { labelPosition: labelPosition.insideBase } };\r\n\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadata);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([1000, 2000, 2000])\r\n                    .setSubtotal(5000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let labels: JQuery = $(\".funnelChart .labels .data-labels\");\r\n                let firstBarX: number = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"x\");\r\n                let firstBarWidth: number = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"height\");\r\n                let firstBarTranslated: number = firstBarX - translate;\r\n                let firstBar: number = firstBarTranslated + firstBarWidth;\r\n\r\n                expect(labels.length).toBe(3);\r\n                helpers.assertColorsMatch($(labels[0]).css(\"fill\"), defaultInsideLabelColor);\r\n                helpers.assertColorsMatch($(labels[1]).css(\"fill\"), defaultInsideLabelColor);\r\n                helpers.assertColorsMatch($(labels[2]).css(\"fill\"), defaultInsideLabelColor);\r\n                \r\n                //Check that the labels position is inside\r\n                expect($(labels[0]).attr(\"x\")).toBeGreaterThan(firstBarTranslated);\r\n                expect($(labels[0]).attr(\"x\")).toBeLessThan(firstBar);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Change labels color validation\", (done) => {\r\n            let color: string = \"#CC0099\";\r\n            \r\n            let dataViewMetadataWithLabelsObject: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = {\r\n                labels: {\r\n                    color: { solid: { color: \"#CC0099\" } },\r\n                }\r\n            };\r\n            \r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                    .setValues([1555, 2000, 20])\r\n                    .setSubtotal(3575)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n                expect(labels.length).toBe(3);\r\n                \r\n                //inside labels are white\r\n                helpers.assertColorsMatch($(labels[0]).css(\"fill\"), defaultInsideLabelColor);\r\n                helpers.assertColorsMatch($(labels[1]).css(\"fill\"), defaultInsideLabelColor);\r\n                \r\n                //outside labels are changed\r\n                helpers.assertColorsMatch($(labels[2]).css(\"fill\"), color);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Hide labels validation\", (done) => {\r\n            let dataViewMetadataWithLabelsObject: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = { labels: { show: false } };\r\n\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                    .setValues([1555, 2000, 20])\r\n                    .setSubtotal(3575)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n                expect(labels.length).toBe(0);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Funnel highlighted values - validate labels\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewNoHighlights: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([50, 140, 420])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsA: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([75, 40, 220])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsB: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewNoHighlights] });\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlightsA] });\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlightsB] });\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewNoHighlights] });\r\n\r\n            setTimeout(() => {\r\n                let labels: JQuery = $(\".funnelChart .labels text\");\r\n                expect(labels.length).toBe(3);\r\n                helpers.assertColorsMatch($(labels[0]).css(\"fill\"), defaultInsideLabelColor);\r\n                expect($(labels[0]).text()).toEqual(\"$100\");\r\n                expect($(labels[1]).text()).toEqual(\"$200\");\r\n                expect($(labels[2]).text()).toEqual(\"$700\");\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Funnel highlighted values - validate percent bars\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewNoHighlights: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([50, 140, 420])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsA: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([75, 40, 220])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsB: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewNoHighlights] });\r\n\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataViewNoHighlights);\r\n                visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlightsA] });\r\n                setTimeout(() => {\r\n                    FunnelChartHelpers.validatePercentBars(true, dataViewHighlightsA);\r\n                    visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlightsB] });\r\n                    setTimeout(() => {\r\n                        FunnelChartHelpers.validatePercentBars(true, dataViewHighlightsB);\r\n                        visualBuilder.visual.onDataChanged({ dataViews: [dataViewNoHighlights] });\r\n                        setTimeout(() => {\r\n                            FunnelChartHelpers.validatePercentBars(true, dataViewNoHighlights);\r\n                            done();\r\n                        }, DefaultWaitForRender);\r\n                    }, DefaultWaitForRender);\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"labels should support display units with no precision\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            let dataViewMetadataWithLabelsObject: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = {\r\n                labels: { show: true, labelDisplayUnits: 1000, labelPrecision: 0 }\r\n            };\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                    .setValues([1555, 2000, 20])\r\n                    .setSubtotal(3575)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                expect($(\".funnelChart .labels text\").first().text()).toBe(\"$2K\");\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"labels should support display units with precision\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            let dataViewMetadataWithLabelsObject: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = {\r\n                labels: { show: true, labelDisplayUnits: 1000, labelPrecision: 2 }\r\n            };\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                    .setValues([1556, 2000, 20])\r\n                    .setSubtotal(3575)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n            \r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                expect($(\".funnelChart .labels text\").first().text()).toBe(\"$1.56K\");\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Default decimal labels validation\", (done) => {\r\n            let metadataWithDisplayUnits = $.extend(true, {}, dataViewMetadata);\r\n            metadataWithDisplayUnits.objects = { labels: { labelDisplayUnits: 1000 } };\r\n            metadataWithDisplayUnits.columns[1].objects.general.formatString = \"$#,0.00\"; // Match format string to output result\r\n\r\n            let fontSize = \"12px\";\r\n            \r\n            let categoryValues: any = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(metadataWithDisplayUnits);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([555, 2000, 20])\r\n                    .setSubtotal(2575)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: powerbi.DataView = dataViewBuilder.build();\r\n                \r\n            dataView.categorical.values[0].source[\"objects\"][\"general\"][\"formatString\"] = \"$0.00\";\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {    \r\n                // The funnel bars are rotated 90 degrees, so for the bars, \"y\" and \"height\" correspond\r\n                // to what we would think of as the position and size along the x-axis.\r\n                // The funnel data labels are not rotated, so for the labels we need to use \"x\" and \"width\".\r\n\r\n                let labels = $(\".funnelChart .labels text\");\r\n                let firstBarY = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"y\");\r\n                let firstBarHeight = +$(\".funnelChart\").find(\".funnelBar\").first().attr(\"height\");\r\n                let lastBarY = +$(\".funnelChart\").find(\".funnelBar\").last().attr(\"y\");\r\n                let lastBarHeight = +$(\".funnelChart\").find(\".funnelBar\").last().attr(\"height\");\r\n\r\n                expect(labels.length).toBe(3);\r\n                helpers.assertColorsMatch($(labels[0]).css(\"fill\"), defaultInsideLabelColor);\r\n                helpers.assertColorsMatch($(labels[2]).css(\"fill\"), labelColor);\r\n                expect($(labels[0]).css(\"fill-opacity\")).toEqual(\"1\");\r\n                expect($(labels[1]).css(\"fill-opacity\")).toEqual(\"1\");\r\n                expect($(labels[2]).css(\"fill-opacity\")).toEqual(\"1\");\r\n                expect($(labels.first().css(\"font-size\")).selector).toBe(fontSize);\r\n                expect($(labels[0]).text()).toEqual(\"$0.56K\");\r\n\r\n                // Check that the first label is inside\r\n                expect($(labels[0]).attr(\"x\")).toBeGreaterThan(firstBarY + translate);\r\n                expect($(labels[0]).attr(\"x\")).toBeLessThan(firstBarY + firstBarHeight + translate);\r\n\r\n                // Check that the last label is outside\r\n                expect($(labels[2]).attr(\"x\")).toBeGreaterThan(lastBarY + lastBarHeight);\r\n\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"Category Labels with repeated items due to source formatting\", (done) => {\r\n            let visualBuilder: VisualBuilder = new VisualBuilder(\r\n                visualPluginFactory.create(),\r\n                \"funnel\",\r\n                500,\r\n                500\r\n            );\r\n            visualBuilder.build();\r\n\r\n            var dataViewMetadata: DataViewMetadata = {\r\n                columns: [\r\n                    {\r\n                        displayName: \"Date\",\r\n                        queryName: \"select0\",\r\n                        format: \"%d\\-MMM\",\r\n                        objects: { general: { formatString: \"%d\\-MMM\" } },\r\n                        type: ValueType.fromDescriptor({ dateTime: true }),\r\n                        roles: { 'Category': true }\r\n                    },\r\n                    {\r\n                        displayName: \"Sales\",\r\n                        queryName: \"select1\",\r\n                        format: \"g\",\r\n                        isMeasure: true,\r\n                        roles: { \"Y\": true },\r\n                        objects: { general: { formatString: \"g\" } }\r\n                    },\r\n                ]\r\n            };\r\n\r\n            let categoryValues: Date[] = [\r\n                new Date(2010, 0, 1),   //1-Jan-2010\r\n                new Date(2010, 1, 1),\r\n                new Date(2010, 2, 1),\r\n                new Date(2011, 0, 1),\r\n                new Date(2012, 0, 1),\r\n                new Date(2013, 0, 1)\r\n            ];\r\n\r\n            var categoryIdentities = [\r\n                mocks.dataViewScopeIdentity(\"2010/1/1\"),\r\n                mocks.dataViewScopeIdentity(\"2010/2/1\"),\r\n                mocks.dataViewScopeIdentity(\"2010/3/1\"),\r\n                mocks.dataViewScopeIdentity(\"2011/1/1\"),\r\n                mocks.dataViewScopeIdentity(\"2012/1/1\"),\r\n                mocks.dataViewScopeIdentity(\"2013/1/1\")\r\n            ];\r\n\r\n            let dataView = {\r\n                metadata: dataViewMetadata,\r\n                categorical: {\r\n                    categories: [{\r\n                        source: dataViewMetadata.columns[0],\r\n                        values: categoryValues,\r\n                        identity: categoryIdentities,\r\n                    }],\r\n                    values: powerbi.data.DataViewTransform.createValueColumns([\r\n                        {\r\n                            source: dataViewMetadata.columns[1],\r\n                            min: 1,\r\n                            max: 6,\r\n                            subtotal: 21,\r\n                            values: [1, 2, 3, 4, 5, 6]\r\n                        }])\r\n                }\r\n            };\r\n\r\n            let Months = [\r\n                \"Jan\",\r\n                \"Feb\",\r\n                \"Mar\",\r\n                \"Apr\",\r\n                \"May\",\r\n                \"Jun\",\r\n                \"Jul\",\r\n                \"Aug\",\r\n                \"Sep\",\r\n                \"Oct\",\r\n                \"Nov\",\r\n                \"Dec\"];\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(categoryValues.length);\r\n                for (let i = 0, len = categoryValues.length; i < len; i++) {\r\n                    expect($(\".funnelChart .axis\").find(\"text\")[i].textContent).toBe(categoryValues[i].getDate() + \"-\" + Months[categoryValues[i].getMonth()]);\r\n                }\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        }\r\n            );\r\n\r\n        it(\"funnel axis tooltip\", (done) => {\r\n            let tickValueClassSelector = '.tick title';\r\n            let categoryValues: any[] = [\r\n                \"Donald Duck Donald Duck Donald Duck Donald Duck Donald Duck Donald Duck Donald Duck Donald Duck Donald Duck\",\r\n                \"Mickey Mouse\",\r\n                \"Pluto\"\r\n            ];\r\n\r\n            let dataViewMetadataWithLabelsObject: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = {\r\n                labels: { show: true, labelDisplayUnits: 1000, labelPrecision: 2 }\r\n            };\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                .setValues([1555, 2000, 20])\r\n                .setSubtotal(3575)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                expect($(tickValueClassSelector)[0].textContent).toBe(categoryValues[0]);\r\n                expect($(tickValueClassSelector)[1].textContent).toBe(categoryValues[1]);\r\n                expect($(tickValueClassSelector)[2].textContent).toBe(categoryValues[2]);\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"funnel percent bars tooltip\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"Donald Duck\",\r\n                \"Mickey Mouse\",\r\n                \"Pluto\"\r\n            ];\r\n\r\n            let percentBarsSelector = '.value title';\r\n            let dataViewMetadataWithLabelsObject: DataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadataWithLabelsObject.objects = {\r\n                labels: { show: true, labelDisplayUnits: 1000, labelPrecision: 2 }\r\n            };\r\n\r\n            dataViewBuilder.setMetadata(dataViewMetadataWithLabelsObject);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadataWithLabelsObject.columns[1])\r\n                .setValues([1555, 2000, 20])\r\n                .setSubtotal(3575)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                expect($(percentBarsSelector)[0].textContent).toBe('100%');\r\n                expect($(percentBarsSelector)[1].textContent).toBe('1.3%');\r\n                done();\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"funnel chart web animation\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n        \r\n        let visualBuilder: VisualBuilder;\r\n        \r\n        let dataViewMetadata: DataViewMetadata = {\r\n            columns: [\r\n                { displayName: \"col1\", queryName: \"col1\" },\r\n                { displayName: \"col2\", queryName: \"col2\", roles: { \"Y\": true } },\r\n                { displayName: \"col3\", queryName: \"col3\", roles: { \"Y\": true } },\r\n            ]\r\n        };\r\n        let categoryColumnRef: SQExpr =\r\n            SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"col1\" });\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadata);\r\n            \r\n            visualBuilder = new VisualBuilder(\r\n                visualPluginFactory.createMinerva({}),\r\n                \"funnel\",\r\n                500,\r\n                500\r\n            );\r\n            \r\n            visualBuilder.build();\r\n        });\r\n\r\n        it(\"funnel highlight animation\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewNoHighlights: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([50, 140, 420])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsA: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([75, 40, 220])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsB: DataView = dataViewBuilder.build();\r\n\r\n            let animator: WebFunnelAnimator = <WebFunnelAnimator>(<FunnelChart>visualBuilder.visual).animator;\r\n            spyOn(animator, \"animate\").and.callThrough();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewNoHighlights] });\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlightsA] });\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlightsB] });\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewNoHighlights] });\r\n\r\n            expect(animator).toBeTruthy();\r\n            expect(animator.animate).toHaveBeenCalled();\r\n\r\n            done();\r\n        });\r\n\r\n        it(\"funnel highlight animation - percent bars\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewNoHighlights: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([50, 140, 420])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsA: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([75, 40, 220])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsB: DataView = dataViewBuilder.build();\r\n\r\n            let animator: WebFunnelAnimator = <WebFunnelAnimator>(<FunnelChart>visualBuilder.visual).animator;\r\n            expect(animator).toBeTruthy();\r\n\r\n            let animatorSpy: Spy = spyOn(animator, \"animate\");\r\n            animatorSpy.and.callThrough();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewNoHighlights] });\r\n            expect(animator.animate).toHaveBeenCalled();\r\n\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataViewNoHighlights);\r\n                visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlightsA] });\r\n                setTimeout(() => {\r\n                    FunnelChartHelpers.validatePercentBars(true, dataViewHighlightsA);\r\n                    visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlightsB] });\r\n                    setTimeout(() => {\r\n                        FunnelChartHelpers.validatePercentBars(true, dataViewHighlightsB);\r\n                        visualBuilder.visual.onDataChanged({ dataViews: [dataViewNoHighlights] });\r\n                        setTimeout(() => {\r\n                            FunnelChartHelpers.validatePercentBars(true, dataViewNoHighlights);\r\n                            expect(animator.animate).toHaveBeenCalled();\r\n                            expect(animatorSpy.calls.count()).toBe(4);\r\n\r\n                            done();\r\n                        }, DefaultWaitForRender);\r\n                    }, DefaultWaitForRender);\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n\r\n        it(\"funnel highlight animation - suppressAnimations\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewNoHighlights: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([50, 140, 420])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsA: DataView = dataViewBuilder.build();\r\n            \r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .setHighlights([75, 40, 220])\r\n                    .setSubtotal(1000)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlightsB: DataView = dataViewBuilder.build();\r\n\r\n            let animator: WebFunnelAnimator = <WebFunnelAnimator>(<FunnelChart>visualBuilder.visual).animator;\r\n            spyOn(animator, \"animate\").and.callThrough();\r\n\r\n            visualBuilder.visual.onDataChanged({ suppressAnimations: true, dataViews: [dataViewNoHighlights] });\r\n            visualBuilder.visual.onDataChanged({ suppressAnimations: true, dataViews: [dataViewHighlightsA] });\r\n            visualBuilder.visual.onDataChanged({ suppressAnimations: true, dataViews: [dataViewHighlightsB] });\r\n            visualBuilder.visual.onDataChanged({ suppressAnimations: true, dataViews: [dataViewNoHighlights] });\r\n\r\n            expect(animator).toBeTruthy();\r\n            expect(animator.animate).not.toHaveBeenCalled();\r\n\r\n            done();\r\n        });\r\n\r\n        it(\"funnel highlight animation - small viewport forcing small bars also hides category and data labels\", (done) => {\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\",\r\n                \"Bugs Bunny\",\r\n                \"Mickey Mouse\",\r\n                \"Donald Duck\",\r\n                \"VRM Jones\"\r\n            ];\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 300, 400, 500, 600, 700])\r\n                    .setHighlights([50, 140, 220, 386, 418, 563, 610])\r\n                    .setSubtotal(2800)\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataViewHighlights: DataView = dataViewBuilder.build();\r\n\r\n            let animator: WebFunnelAnimator = <WebFunnelAnimator>(<FunnelChart>visualBuilder.visual).animator;\r\n            spyOn(animator, \"animate\").and.callThrough();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataViewHighlights] });\r\n\r\n            expect(animator).toBeTruthy();\r\n            expect(animator.animate).toHaveBeenCalled();\r\n\r\n            setTimeout(() => {\r\n                FunnelChartHelpers.validatePercentBars(true, dataViewHighlights);\r\n                expect($(\".funnelChart g\").length).toBe(11);\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(7);\r\n                expect($(\".funnelChart .labels text\").length).toBe(7);\r\n                visualBuilder.visual.onResizing({ height: 50, width: 100 });\r\n                setTimeout(() => {\r\n                    FunnelChartHelpers.validatePercentBars(false, dataViewHighlights);\r\n                    expect($(\".funnelChart g\").length).toBe(3); // No \"g\" for data labels\r\n                    expect($(\".funnelChart .axis\").find(\"text\").length).toBe(0);\r\n                    expect($(\".funnelChart .labels text\").length).toBe(0);\r\n                    done();\r\n                }, DefaultWaitForRender);\r\n            }, DefaultWaitForRender);\r\n        });\r\n    });\r\n\r\n    describe(\"Enumerate Objects\", () => {\r\n        let dataViewBuilder: DataViewBuilder;\r\n        \r\n        let visualBuilder: VisualBuilder;\r\n        \r\n        let dataViewMetadata: DataViewMetadata = {\r\n            columns: [\r\n                {\r\n                    displayName: \"col1\",\r\n                    queryName: \"col1\",\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text),\r\n                },\r\n                {\r\n                    displayName: \"col2\",\r\n                    queryName: \"col2\",\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n                    isMeasure: true,\r\n                    roles: { \"Y\": true },\r\n                },\r\n                {\r\n                    displayName: \"col3\",\r\n                    queryName: \"col3\",\r\n                    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Double),\r\n                    isMeasure: true,\r\n                    roles: { \"Y\": true },\r\n                }\r\n            ]\r\n        };\r\n\r\n        let dataViewGradientMetadata: DataViewMetadata = {\r\n            columns: [\r\n                { displayName: \"col1\", queryName: \"col1\" },\r\n                { displayName: \"col2\", queryName: \"col2\", isMeasure: true, roles: { \"Y\": true } },\r\n                { displayName: \"col3\", queryName: \"col3\", isMeasure: true, roles: { \"Gradient\": true } },\r\n            ]\r\n        };\r\n\r\n        let dataViewGradientAndYMetadata: DataViewMetadata = {\r\n            columns: [\r\n                { displayName: \"col1\", queryName: \"col1\" },\r\n                { displayName: \"col2\", queryName: \"col2\", isMeasure: true, roles: { \"Y\": true, \"Gradient\": true } },\r\n                { displayName: \"col3\", queryName: \"col3\", isMeasure: true, roles: { \"Y\": true } },\r\n            ]\r\n        };\r\n\r\n        let categoryColumnRef: SQExpr =\r\n            SQExprBuilder.fieldDef({ schema: \"s\", entity: \"e\", column: \"col1\" });\r\n\r\n        beforeEach(() => {\r\n            dataViewBuilder = new DataViewBuilder();\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadata);\r\n            \r\n            visualBuilder = new VisualBuilder(\r\n                visualPluginFactory.create(),\r\n                \"funnel\",\r\n                500,\r\n                500\r\n            );\r\n\r\n            visualBuilder.build();\r\n        });\r\n\r\n        it(\"Check enumeration: category measure\", () => {\r\n            let categoryValues: any[] = [\r\n                \"a\",\r\n                \"b\",\r\n                \"c\"\r\n            ];\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 300, 400, 500])\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[2])\r\n                    .setValues([200, 400, 600, 800, 1000])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataChangedOptions: VisualDataChangedOptions = {\r\n                dataViews: [dataViewBuilder.build()]\r\n            };\r\n\r\n            visualBuilder.visual.onDataChanged(dataChangedOptions);\r\n            let points = <VisualObjectInstanceEnumerationObject>visualBuilder.visual.enumerateObjectInstances({ objectName: 'dataPoint' });\r\n            expect(points.instances.length).toBe(4);\r\n            expect(points.instances[1].displayName).toBe('a');\r\n            expect(points.instances[1].properties['fill']).toBeDefined();\r\n            expect(points.instances[2].displayName).toBe('b');\r\n            expect(points.instances[2].properties['fill']).toBeDefined();\r\n        });\r\n\r\n        it(\"Check enumeration: multi-measure\", () => {\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100])\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[2])\r\n                    .setValues([200])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataChangedOptions: VisualDataChangedOptions = {\r\n                dataViews: [dataViewBuilder.build()]\r\n            };\r\n\r\n            visualBuilder.visual.onDataChanged(dataChangedOptions);\r\n            let points = <VisualObjectInstanceEnumerationObject>visualBuilder.visual.enumerateObjectInstances({ objectName: 'dataPoint' });\r\n            expect(points.instances.length).toBe(3);\r\n            expect(points.instances[1].displayName).toBe('col2');\r\n            expect(points.instances[1].properties['fill']).toBeDefined();\r\n            expect(points.instances[2].displayName).toBe('col3');\r\n            expect(points.instances[2].properties['fill']).toBeDefined();\r\n        });\r\n\r\n        it(\"Gradient color\", () => {\r\n            let dataColors: IDataColorPalette = visualStyles.create().colorPalette.dataColors;\r\n            let colors: string[] = [\"#d9f2fb\", \"#ff557f\", \"#b1eab7\"];\r\n            let objectDefinitions: DataViewObjects[] = [\r\n                { dataPoint: { fill: { solid: { color: colors[0] } } } },\r\n                { dataPoint: { fill: { solid: { color: colors[1] } } } },\r\n                { dataPoint: { fill: { solid: { color: colors[2] } } } }\r\n            ];\r\n            \r\n            let categoryValues: any[] = [\r\n                \"a\",\r\n                \"b\",\r\n                \"c\"\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewGradientMetadata);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewGradientMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setObjects(objectDefinitions)\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewGradientMetadata.columns[1])\r\n                    .setValues([100, 200, 300, 400, 500])\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewGradientMetadata.columns[1])\r\n                    .setValues([200, 400, 600, 800, 1000])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let defaultDataPointColor: string = \"#00FF00\";\r\n\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, dataColors, visualBuilder.host, defaultDataPointColor);\r\n\r\n            helpers.assertColorsMatch(actualData.slices[0].color, colors[0]);\r\n            helpers.assertColorsMatch(actualData.slices[1].color, colors[1]);\r\n            helpers.assertColorsMatch(actualData.slices[2].color, colors[2]);\r\n        });\r\n\r\n        it(\"Gradient color - validate tool tip\", () => {\r\n            let dataColors: IDataColorPalette = visualStyles.create().colorPalette.dataColors;\r\n            let colors: string[] = [\"#d9f2fb\", \"#ff557f\", \"#b1eab7\"];\r\n            let objectDefinitions: DataViewObjects[] = [\r\n                { dataPoint: { fill: { solid: { color: colors[0] } } } },\r\n                { dataPoint: { fill: { solid: { color: colors[1] } } } },\r\n                { dataPoint: { fill: { solid: { color: colors[2] } } } }\r\n            ];\r\n\r\n            let categoryValues: any[] = [\r\n                \"a\",\r\n                \"b\",\r\n                \"c\"\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewGradientMetadata);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewGradientMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setObjects(objectDefinitions)\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewGradientMetadata.columns[1])\r\n                    .setValues([100, 200, 300, 400, 500])\r\n                    .setSubtotal([1500])\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewGradientMetadata.columns[2])\r\n                    .setValues([200, 400, 600, 800, 1000])\r\n                    .setSubtotal([3000])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let defaultDataPointColor: string = \"#00FF00\";\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, dataColors, visualBuilder.host, defaultDataPointColor);\r\n\r\n            expect(actualData.slices[0].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"a\" }, { displayName: \"col2\", value: \"100\" }, { displayName: \"col3\", value: \"200\" }, { displayName: \"Percent of first\", value: \"100.00 %\" }]);\r\n            expect(actualData.slices[1].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"b\" }, { displayName: \"col2\", value: \"200\" }, { displayName: \"col3\", value: \"400\" }, { displayName: \"Percent of first\", value: \"200.00 %\" }, { displayName: \"Percent of previous\", value: \"200.00 %\" }]);\r\n            expect(actualData.slices[2].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"c\" }, { displayName: \"col2\", value: \"300\" }, { displayName: \"col3\", value: \"600\" }, { displayName: \"Percent of first\", value: \"300.00 %\" }, { displayName: \"Percent of previous\", value: \"150.00 %\" }]);\r\n        });\r\n\r\n        it(\"Gradient and Y have the index - validate tool tip\", () => {\r\n            let dataColors: IDataColorPalette = visualStyles.create().colorPalette.dataColors;\r\n            let colors: string[] = [\"#d9f2fb\", \"#ff557f\", \"#b1eab7\"];\r\n            let objectDefinitions: DataViewObjects[] = [\r\n                { dataPoint: { fill: { solid: { color: colors[0] } } } },\r\n                { dataPoint: { fill: { solid: { color: colors[1] } } } },\r\n                { dataPoint: { fill: { solid: { color: colors[2] } } } }\r\n            ];\r\n            \r\n            let categoryValues: any[] = [\r\n                \"a\",\r\n                \"b\",\r\n                \"c\"\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewGradientAndYMetadata);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewGradientAndYMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setObjects(objectDefinitions)\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewGradientAndYMetadata.columns[1])\r\n                    .setValues([100, 200, 300, 400, 500])\r\n                    .setSubtotal([1500])\r\n                    .buildNewValue()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewGradientAndYMetadata.columns[2])\r\n                    .setValues([200, 400, 600, 800, 1000])\r\n                    .setSubtotal([3000])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n            \r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            let defaultDataPointColor: string = \"#00FF00\";\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, dataColors, visualBuilder.host, defaultDataPointColor);\r\n\r\n            expect(actualData.slices[0].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"a\" }, { displayName: \"col3\", value: \"100\" }, { displayName: \"col2\", value: \"100\" }, { displayName: \"Percent of first\", value: \"100.00 %\" }]);\r\n            expect(actualData.slices[1].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"b\" }, { displayName: \"col3\", value: \"200\" }, { displayName: \"col2\", value: \"200\" }, { displayName: \"Percent of first\", value: \"200.00 %\" }, { displayName: \"Percent of previous\", value: \"200.00 %\" }]);\r\n            expect(actualData.slices[2].tooltipInfo).toEqual([{ displayName: \"col1\", value: \"c\" }, { displayName: \"col3\", value: \"300\" }, { displayName: \"col2\", value: \"300\" }, { displayName: \"Percent of first\", value: \"300.00 %\" }, { displayName: \"Percent of previous\", value: \"150.00 %\" }]);\r\n        });\r\n\r\n        it(\"converter does filter Gradient role\", () => {\r\n            let dataColors: IDataColorPalette = visualStyles.create().colorPalette.dataColors;\r\n\r\n            let dataViewGradientMetadata: DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: \"col1\", queryName: \"col1\" },\r\n                    { displayName: \"col2\", queryName: \"col2\", isMeasure: true, roles: { \"Gradient\": true } },\r\n                    { displayName: \"col3\", queryName: \"col3\", isMeasure: true, roles: { \"Y\": true } },\r\n                ]\r\n            };\r\n\r\n            let categoryValues: any[] = [\r\n                \"a\",\r\n                \"b\",\r\n                \"c\"\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewGradientMetadata);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewGradientMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewGradientMetadata.columns[1])\r\n                .setValues([100, 200, 300, 400, 500])\r\n                .setSubtotal([1500])\r\n                .buildNewValue()\r\n                .newValueBuilder()\r\n                .setSource(dataViewGradientMetadata.columns[2])\r\n                .setValues([200, 400, 600, 800, 1000])\r\n                .setSubtotal([3000])\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, dataColors, visualBuilder.host);\r\n\r\n            let expectedSliceValues = [200, 400, 600];\r\n            actualData.slices.map((slice, i) => {\r\n                expect(slice.value).toBe(expectedSliceValues[i]);\r\n            });\r\n        });\r\n\r\n        it(\"converter does not filter Gradient + Y role\", () => {\r\n            let dataColors: IDataColorPalette = visualStyles.create().colorPalette.dataColors;\r\n\r\n            let categoryValues: any[] = [\r\n                \"a\",\r\n                \"b\",\r\n                \"c\"\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(dataViewGradientMetadata);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewGradientMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewGradientMetadata.columns[1])\r\n                .setValues([100, 200, 300, 400, 500])\r\n                .setSubtotal([1500])\r\n                .buildNewValue()\r\n                .newValueBuilder()\r\n                .setSource(dataViewGradientMetadata.columns[2])\r\n                .setValues([200, 400, 600, 800, 1000])\r\n                .setSubtotal([3000])\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n            let actualData: FunnelData = FunnelChart.converter(dataView, dataColors, visualBuilder.host);\r\n\r\n            let expectedSliceValues = [100, 200, 300];\r\n            actualData.slices.map((slice, i) => {\r\n                expect(slice.value).toBe(expectedSliceValues[i]);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe(\"funnel categoryLabels tests\", () => {\r\n\r\n        it(\"funnel categoryLabels test with view port categoryLabelsVisibleSmallerThanMinHeight mobile\", (done) => {\r\n            FunnelChartHelpers.testCategoryLabels(categoryLabelsVisibleSmallerThanMinHeightString, true);\r\n\r\n            setTimeout(() => {\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(0);\r\n                done();\r\n\r\n            });\r\n        });\r\n\r\n        it(\"funnel categoryLabels test with view port categoryLabelsVisibleGreaterThanDefaultMinHeight mobile\", (done) => {\r\n            FunnelChartHelpers.testCategoryLabels(categoryLabelsVisibleGreaterThanMinHeightString, true);\r\n\r\n            setTimeout(() => {\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(3);\r\n                done();\r\n\r\n            });\r\n        });\r\n\r\n        it(\"funnel categoryLabels test with view port categoryLabelsVisibleSmallerThanDefaultMinHeight\", (done) => {\r\n            FunnelChartHelpers.testCategoryLabels(categoryLabelsVisibleSmallerThanMinHeightString, false);\r\n\r\n            setTimeout(() => {\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(3);\r\n                done();\r\n\r\n            });\r\n        });\r\n\r\n        it(\"funnel categoryLabels test with view port categoryLabelsVisibleGreaterThanDefaultMinHeight\", (done) => {\r\n            FunnelChartHelpers.testCategoryLabels(categoryLabelsVisibleGreaterThanMinHeightString, false);\r\n\r\n            setTimeout(() => {\r\n                expect($(\".funnelChart .axis\").find(\"text\").length).toBe(3);\r\n                done();\r\n\r\n            });\r\n        });\r\n    });\r\n\r\n    export module FunnelChartHelpers {\r\n        let PercentBarValueFormatRegex: RegExp = /^[0-9\\,]+(\\.[0-9]{1})?%$/gi;\r\n\r\n        function validatePercentValues(dataView: DataView, fontSize?: number): void {\r\n            let values: any[] = dataView.categorical.values[0].values;\r\n            let highlights: any[] = dataView.categorical.values[0].highlights;\r\n            let hasHighlights: boolean = !!highlights;\r\n            \r\n            let topElement = $(FunnelChart.Selectors.percentBar.text.selector).first();\r\n            let bottomElement = $(FunnelChart.Selectors.percentBar.text.selector).last();\r\n\r\n            let topPercent: string = helpers.findElementText(topElement);\r\n            let bottomPercent: string = helpers.findElementText(bottomElement);\r\n\r\n            let topPercentTitle: string = helpers.findElementTitle(topElement) ? helpers.findElementTitle(topElement) : topPercent;\r\n            let bottomPercentTitle: string = helpers.findElementTitle(bottomElement) ? helpers.findElementTitle(bottomElement) : bottomPercent;\r\n\r\n            [topPercent, bottomPercent].map((percent: string) => {\r\n                let validFormat = !!percent.match(PercentBarValueFormatRegex);\r\n                expect(validFormat).toBeTruthy();\r\n\r\n                let bottomPercentValue: number = hasHighlights\r\n                    ? highlights[highlights.length - 1] / highlights[0]\r\n                    : values[values.length - 1] / values[0];\r\n                let bottomPercentText: string =\r\n                    formattingService.formatValue(\r\n                        bottomPercentValue,\r\n                        powerbi.visuals.valueFormatter.getLocalizedString(\"Percentage1\"));\r\n\r\n                expect(topPercent).toBe(\"100%\");\r\n                expect(bottomPercent).toBe(bottomPercentText);\r\n                //validate titles\r\n                expect(topPercentTitle).toBe(\"100%\");\r\n                expect(bottomPercentTitle).toBe(bottomPercentText);\r\n\r\n                if (fontSize) {\r\n                    expect(topElement.css('font-size')).toBe(PixelConverter.fromPoint(fontSize));\r\n                    expect(bottomElement.css('font-size')).toBe(PixelConverter.fromPoint(fontSize));\r\n                }\r\n            });\r\n        }\r\n\r\n        function validatePercentBarComponents(shown: boolean): void {\r\n            let count: number = shown ? 2 : 0;\r\n            \r\n            expect($(FunnelChart.Selectors.percentBar.mainLine.selector).length).toBe(count);\r\n            expect($(FunnelChart.Selectors.percentBar.leftTick.selector).length).toBe(count);\r\n            expect($(FunnelChart.Selectors.percentBar.rightTick.selector).length).toBe(count);\r\n            expect($(FunnelChart.Selectors.percentBar.text.selector).length).toBe(count);\r\n        }\r\n\r\n        export function validatePercentBars(shown: boolean, dataView: DataView, fontSize?: number): void {\r\n            validatePercentBarComponents(shown);\r\n\r\n            if (shown) {\r\n                validatePercentValues(dataView, fontSize);\r\n            }\r\n        }\r\n\r\n        export function validateDataLabels(dataView: powerbi.DataView): void {\r\n            let values = dataView.categorical.values[0].values;\r\n            let highlights = dataView.categorical.values[0].highlights;\r\n            let hasHighlights = !!highlights;\r\n\r\n            let allDataLabelsMatch = _.every($(\".funnelChart .labels .data-labels\"), (label: HTMLElement, i: number) => {\r\n                let expectedValue = hasHighlights ? highlights[i] : values[i];\r\n                let labelValue = label.textContent.match(/([\\d\\.\\,]+)/g)[0];\r\n                return expectedValue === parseInt(labelValue, 10);\r\n            });\r\n\r\n            expect(allDataLabelsMatch).toBeTruthy();\r\n        }\r\n\r\n        export function testCategoryLabels(domSizeString: string, isMobile: boolean) {\r\n            let visualPluginService: IVisualPluginService,\r\n                dataViewBuilder: DataViewBuilder = new DataViewBuilder(),\r\n                domSize: number = Number(domSizeString);\r\n            \r\n            if (isMobile)\r\n                visualPluginService = visualPluginFactory.createMobile();\r\n            else\r\n                visualPluginService = visualPluginFactory.create();\r\n            \r\n            let visualBuilder: VisualBuilder = new VisualBuilder(\r\n                visualPluginService,\r\n                \"funnel\",\r\n                domSize,\r\n                domSize\r\n            );\r\n            \r\n            visualBuilder.build();\r\n            \r\n            let dataViewMetadata: DataViewMetadata = {\r\n                columns: [\r\n                    { displayName: \"col1\", queryName: \"col1\" },\r\n                    { displayName: \"col2\", queryName: \"col2\", isMeasure: true, roles: { \"Y\": true } },\r\n                ]\r\n            };\r\n\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Jean Tablau\"\r\n            ];\r\n            \r\n            dataViewBuilder.setMetadata(dataViewMetadata);\r\n            \r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .buildCategory();\r\n            \r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                    .setSource(dataViewMetadata.columns[1])\r\n                    .setValues([100, 200, 700])\r\n                    .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            visualBuilder.visual.onDataChanged({\r\n                dataViews: [dataViewBuilder.build()]\r\n            });\r\n        }\r\n\r\n        export function testLabelsFontSize(dataViewBuilder: DataViewBuilder, categoryColumnRef: SQExpr, visualBuilder: VisualBuilder, dataViewMetadata: DataViewMetadata, fontSizeInPt: number, assertCallback: () => void) {\r\n\r\n            let metadataWithDisplayUnits: DataViewMetadata = $.extend(true, {}, dataViewMetadata);\r\n            metadataWithDisplayUnits.objects = { labels: { labelDisplayUnits: 1000, fontSize: fontSizeInPt } };\r\n\r\n            let categoryValues: any[] = [\r\n                \"John Domo\",\r\n                \"Delta Force\",\r\n                \"Mr Bing\"\r\n            ];\r\n\r\n            dataViewBuilder.setMetadata(metadataWithDisplayUnits);\r\n\r\n            dataViewBuilder.categoryBuilder()\r\n                .setSource(dataViewMetadata.columns[0])\r\n                .setValues(categoryValues)\r\n                .setIdentity(categoryValues.map((value: any) => {\r\n                    return mocks.dataViewScopeIdentity(value);\r\n                }))\r\n                .setIdentityFields([categoryColumnRef])\r\n                .buildCategory();\r\n\r\n            dataViewBuilder.valueColumnsBuilder()\r\n                .newValueBuilder()\r\n                .setSource(dataViewMetadata.columns[1])\r\n                .setValues([555, 2000, 20])\r\n                .setSubtotal(2575)\r\n                .buildNewValue()\r\n                .buildValueColumns();\r\n\r\n            let dataView: DataView = dataViewBuilder.build();\r\n\r\n            visualBuilder.visual.onDataChanged({ dataViews: [dataView] });\r\n            setTimeout(() => {\r\n                assertCallback();\r\n            }, DefaultWaitForRender);\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}